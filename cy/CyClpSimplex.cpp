/* Generated by Cython 0.15.1 on Tue Dec 11 16:31:13 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__CyLP__cy__CyClpSimplex
#define __PYX_HAVE_API__CyLP__cy__CyClpSimplex
#include "ICoinIndexedVector.hpp"
#include "ClpPrimalColumnPivot.hpp"
#include "ClpFactorization.hpp"
#include "IClpPrimalColumnPivotBase.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "CoinModel.hpp"
#include "ICoinPackedMatrix.hpp"
#include "CglAllDifferent.hpp"
#include "CglClique.hpp"
#include "CglKnapsackCover.hpp"
#include "CglOddHole.hpp"
#include "CglFlowCover.hpp"
#include "CglGomory.hpp"
#include "CglRedSplit.hpp"
#include "CglLiftAndProject.hpp"
#include "CglLandP.hpp"
#include "CglMixedIntegerRounding.hpp"
#include "CglMixedIntegerRounding2.hpp"
#include "CglTwomir.hpp"
#include "CglResidualCapacity.hpp"
#include "CglPreProcess.hpp"
#include "CglProbing.hpp"
#include "CglSimpleRounding.hpp"
#include "CglCutGenerator.hpp"
#include "ICbcNode.hpp"
#include "CbcCompareUser.hpp"
#include "ICbcModel.hpp"
#include <string>
#include <vector>
#include "IClpSimplex.hpp"
#include "ICoinMpsIO.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif

#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

static const char *__pyx_f[] = {
  "CyClpSimplex.pyx",
  "numpy.pxd",
  "CyCoinIndexedVector.pxd",
  "CyClpPrimalColumnPivotBase.pxd",
  "CyCoinModel.pxd",
  "CyCoinPackedMatrix.pxd",
  "CyCgl.pxd",
  "CyCbcNode.pxd",
  "CyCbcModel.pxd",
  "CyWolfePivot.pxd",
  "CyPEPivot.pxd",
  "CyPivotPythonBase.pxd",
  "CyCoinMpsIO.pxd",
};

/* "numpy.pxd":719
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "numpy.pxd":720
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "numpy.pxd":721
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "numpy.pxd":722
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "numpy.pxd":726
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "numpy.pxd":727
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "numpy.pxd":728
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "numpy.pxd":729
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "numpy.pxd":733
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "numpy.pxd":734
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "numpy.pxd":743
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "numpy.pxd":744
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "numpy.pxd":745
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "numpy.pxd":747
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "numpy.pxd":748
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "numpy.pxd":749
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "numpy.pxd":751
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "numpy.pxd":752
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "numpy.pxd":754
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "numpy.pxd":755
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "numpy.pxd":756
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif

/*--- Type declarations ---*/
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglLandP;
struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglRedSplit;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglOddHole;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglTwomir;
struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglSimpleRounding;
struct __pyx_obj_4CyLP_2cy_11CyCoinMpsIO_CyCoinMpsIO;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglProbing;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglClique;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglFlowCover;
struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglResidualCapacity;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglPreProcess;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglAllDifferent;
struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase;
struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglGomory;
struct __pyx_obj_4CyLP_2cy_9CyCbcNode_CyCbcNode;
struct __pyx_obj_4CyLP_2cy_12CyWolfePivot_CyWolfePivot;
struct __pyx_obj_4CyLP_2cy_9CyPEPivot_CyPEPivot;
struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix;
struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_VarStatus;
struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglKnapsackCover;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding2;
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglLiftAndProject;

/* "numpy.pxd":758
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "numpy.pxd":759
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "numpy.pxd":760
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "numpy.pxd":762
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_4CyLP_2cy_10CyCbcModel_10CyCbcModel_addCutGenerator;

/* "CyLP/cy/CyCbcModel.pxd":57
 *     cdef setCppSelf(self, CppICbcModel* cppmodel)
 *     cdef setClpModel(self, clpmodel)
 *     cpdef addCutGenerator(self, CyCglCutGenerator generator,             # <<<<<<<<<<<<<<
 *                         howOften=*, name=*, normal=*, atSolution=*,
 *                         infeasible=*, howOftenInSub=*, whatDepth=*,
 */
struct __pyx_opt_args_4CyLP_2cy_10CyCbcModel_10CyCbcModel_addCutGenerator {
  int __pyx_n;
  PyObject *howOften;
  PyObject *name;
  PyObject *normal;
  PyObject *atSolution;
  PyObject *infeasible;
  PyObject *howOftenInSub;
  PyObject *whatDepth;
  PyObject *whatDepthInSub;
};
struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps;

/* "CyLP/cy/CyClpSimplex.pxd":244
 *     #cdef object isPivotAcceptable_func
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=*,             # <<<<<<<<<<<<<<
 *                       int ignoreErrors=*)
 * 
 */
struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps {
  int __pyx_n;
  int keepNames;
  int ignoreErrors;
};

/* "CyLP/cy/CyCgl.pxd":103
 * 
 * 
 * cdef class CyCglCutGenerator:             # <<<<<<<<<<<<<<
 *     cdef CppCglCutGenerator* CppSelf
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator {
  PyObject_HEAD
  CglCutGenerator *CppSelf;
};


/* "CyLP/cy/CyCgl.pxd":140
 *     pass
 * 
 * cdef class CyCglLandP(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglLandP {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCoinModel.pxd":34
 * 
 * 
 * cdef class CyCoinModel:             # <<<<<<<<<<<<<<
 *     cdef CppCoinModel* CppSelf
 * 
 */
struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_4CyLP_2cy_11CyCoinModel_CyCoinModel *__pyx_vtab;
  CoinModel *CppSelf;
};


/* "CyLP/cy/CyCgl.pxd":145
 * ###################
 * 
 * cdef class CyCglMixedIntegerRounding(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":132
 *     #cdef CppCglCutGenerator* CppSelf
 * 
 * cdef class CyCglRedSplit(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglRedSplit {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":117
 *     cdef CppCglKnapsackCover* realCppSelf(self)
 * 
 * cdef class CyCglOddHole(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglOddHole {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":151
 *     pass
 * 
 * cdef class CyCglTwomir(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglTwomir {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCoinIndexedVector.pxd":19
 * 
 * 
 * cdef class CyCoinIndexedVector:             # <<<<<<<<<<<<<<
 *     cpdef CppCoinIndexedVector *CppSelf
 *     cpdef reserve(self, n)
 */
struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector {
  PyObject_HEAD
  struct __pyx_vtabstruct_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_vtab;
  ICoinIndexedVector *CppSelf;
};


/* "CyLP/cy/CyCgl.pxd":168
 *     pass
 * 
 * cdef class CyCglSimpleRounding(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglSimpleRounding {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyCoinMpsIO.pxd":46
 * 
 * 
 * cdef class CyCoinMpsIO:             # <<<<<<<<<<<<<<
 *     cdef CppICoinMpsIO *CppSelf
 *     cpdef Hessian
 */
struct __pyx_obj_4CyLP_2cy_11CyCoinMpsIO_CyCoinMpsIO {
  PyObject_HEAD
  ICoinMpsIO *CppSelf;
  PyObject *Hessian;
};


/* "CyLP/cy/CyCgl.pxd":165
 *     pass
 * 
 * cdef class CyCglProbing(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglProbing {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":111
 *     pass
 * 
 * cdef class CyCglClique(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglClique {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":122
 * ##################
 * 
 * cdef class CyCglFlowCover(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglFlowCover {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyClpSimplex.pxd":222
 * 
 * 
 * cdef class CyClpSimplex:             # <<<<<<<<<<<<<<
 *     '''
 *     This is the documentation of CyClpSimpelx in the pyx class
 */
struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex {
  PyObject_HEAD
  struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_vtab;
  IClpSimplex *CppSelf;
  PyObject *vars;
  PyObject *varSelCriteria;
  struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *coinModel;
  PyObject *cyLPModel;
  PyObject *Hessian;
  struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *cyPivot;
};


/* "CyLP/cy/CyCgl.pxd":154
 *     pass
 * 
 * cdef class CyCglResidualCapacity(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglResidualCapacity {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":162
 * #    pass
 * 
 * cdef class CyCglPreProcess(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglPreProcess {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":108
 * ###########
 * 
 * cdef class CyCglAllDifferent(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglAllDifferent {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyClpPrimalColumnPivotBase.pxd":70
 * 
 * 
 * cdef class CyClpPrimalColumnPivotBase:             # <<<<<<<<<<<<<<
 *     cdef CppClpPrimalColumnPivotBase* CppSelf
 *     cdef CyClpSimplex.CyClpSimplex cyModel
 */
struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *__pyx_vtab;
  CppClpPrimalColumnPivotBase *CppSelf;
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *cyModel;
};


/* "CyPivotPythonBase.pxd":6
 * 
 * 
 * cdef class CyPivotPythonBase(CyClpPrimalColumnPivotBase):             # <<<<<<<<<<<<<<
 * 	cdef pivotColumn(self, CppCoinIndexedVector* v1,
 *                      CppCoinIndexedVector* v2, CppCoinIndexedVector* v3,
 */
struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase {
  struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase __pyx_base;
  PyObject *pivotMethodObject;
};


/* "CyLP/cy/CyCgl.pxd":127
 * ##################
 * 
 * cdef class CyCglGomory(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     cdef CppCglGomory* realCppSelf(self)
 *     #cdef CppCglGomory* CppSelf
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglGomory {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
  struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglGomory *__pyx_vtab;
};


/* "CyLP/cy/CyCbcNode.pxd":13
 *         bint breakTie(CppICbcNode* y)
 * 
 * cdef class CyCbcNode:             # <<<<<<<<<<<<<<
 *     cdef CppICbcNode* CppSelf
 *     cdef setCppSelf(self, CppICbcNode* cbcnode)
 */
struct __pyx_obj_4CyLP_2cy_9CyCbcNode_CyCbcNode {
  PyObject_HEAD
  struct __pyx_vtabstruct_4CyLP_2cy_9CyCbcNode_CyCbcNode *__pyx_vtab;
  ICbcNode *CppSelf;
};


/* "CyWolfePivot.pxd":5
 * 
 * 
 * cdef class CyWolfePivot(CyClpPrimalColumnPivotBase):             # <<<<<<<<<<<<<<
 *     cdef pivotColumn(self, CppCoinIndexedVector* v1,
 *                      CppCoinIndexedVector* v2, CppCoinIndexedVector* v3,
 */
struct __pyx_obj_4CyLP_2cy_12CyWolfePivot_CyWolfePivot {
  struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase __pyx_base;
};


/* "CyPEPivot.pxd":6
 * 
 * 
 * cdef class CyPEPivot(CyClpPrimalColumnPivotBase):             # <<<<<<<<<<<<<<
 *     cdef pivotColumn(self, CppCoinIndexedVector* v1,
 *                      CppCoinIndexedVector* v2, CppCoinIndexedVector* v3,
 */
struct __pyx_obj_4CyLP_2cy_9CyPEPivot_CyPEPivot {
  struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase __pyx_base;
};


/* "CyLP/cy/CyCoinPackedMatrix.pxd":22
 * 
 * 
 * cdef class CyCoinPackedMatrix:             # <<<<<<<<<<<<<<
 *     cpdef CppCoinPackedMatrix* CppSelf
 *     #cpdef getIndices(self)
 */
struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix {
  PyObject_HEAD
  ICoinPackedMatrix *CppSelf;
};


/* "CyLP/cy/CyClpSimplex.pxd":293
 *     cpdef setConstraintName(self, constInd, name)
 * 
 * cdef class VarStatus:             # <<<<<<<<<<<<<<
 *     pass
 * cpdef cydot(CyCoinIndexedVector v1, CyCoinIndexedVector v2)
 */
struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_VarStatus {
  PyObject_HEAD
};


/* "CyLP/cy/CyCbcModel.pxd":51
 *         double getIntegerTolerance()
 * 
 * cdef class CyCbcModel:             # <<<<<<<<<<<<<<
 *     cdef CppICbcModel* CppSelf
 *     cdef object cyLPModel
 */
struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel {
  PyObject_HEAD
  struct __pyx_vtabstruct_4CyLP_2cy_10CyCbcModel_CyCbcModel *__pyx_vtab;
  ICbcModel *CppSelf;
  PyObject *cyLPModel;
  PyObject *clpModel;
};


/* "CyLP/cy/CyCgl.pxd":114
 *     pass
 * 
 * cdef class CyCglKnapsackCover(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     cdef CppCglKnapsackCover* realCppSelf(self)
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglKnapsackCover {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
  struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglKnapsackCover *__pyx_vtab;
};


/* "CyLP/cy/CyCgl.pxd":148
 *     pass
 * 
 * cdef class CyCglMixedIntegerRounding2(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding2 {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};


/* "CyLP/cy/CyCgl.pxd":137
 * ###################
 * 
 * cdef class CyCglLiftAndProject(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglLiftAndProject {
  struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator __pyx_base;
};



/* "CyLP/cy/CyClpPrimalColumnPivotBase.pxd":70
 * 
 * 
 * cdef class CyClpPrimalColumnPivotBase:             # <<<<<<<<<<<<<<
 *     cdef CppClpPrimalColumnPivotBase* CppSelf
 *     cdef CyClpSimplex.CyClpSimplex cyModel
 */

struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase {
  PyObject *(*pivotColumn)(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *);
  int (*DantzigDualUpdate)(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *);
  ClpPrimalColumnPivot *(*clone)(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *, int);
  void (*saveWeights)(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *, IClpSimplex *, int);
  IClpSimplex *(*model)(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *);
  void (*setModel)(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *, IClpSimplex *);
  double *(*getReducedCosts)(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *);
};
static struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *__pyx_vtabptr_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase;


/* "CyPEPivot.pxd":6
 * 
 * 
 * cdef class CyPEPivot(CyClpPrimalColumnPivotBase):             # <<<<<<<<<<<<<<
 *     cdef pivotColumn(self, CppCoinIndexedVector* v1,
 *                      CppCoinIndexedVector* v2, CppCoinIndexedVector* v3,
 */

struct __pyx_vtabstruct_4CyLP_2cy_9CyPEPivot_CyPEPivot {
  struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase __pyx_base;
};
static struct __pyx_vtabstruct_4CyLP_2cy_9CyPEPivot_CyPEPivot *__pyx_vtabptr_4CyLP_2cy_9CyPEPivot_CyPEPivot;


/* "CyLP/cy/CyCgl.pxd":114
 *     pass
 * 
 * cdef class CyCglKnapsackCover(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     cdef CppCglKnapsackCover* realCppSelf(self)
 * 
 */

struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglKnapsackCover {
  CglKnapsackCover *(*realCppSelf)(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglKnapsackCover *);
};
static struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglKnapsackCover *__pyx_vtabptr_4CyLP_2cy_5CyCgl_CyCglKnapsackCover;


/* "CyWolfePivot.pxd":5
 * 
 * 
 * cdef class CyWolfePivot(CyClpPrimalColumnPivotBase):             # <<<<<<<<<<<<<<
 *     cdef pivotColumn(self, CppCoinIndexedVector* v1,
 *                      CppCoinIndexedVector* v2, CppCoinIndexedVector* v3,
 */

struct __pyx_vtabstruct_4CyLP_2cy_12CyWolfePivot_CyWolfePivot {
  struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase __pyx_base;
};
static struct __pyx_vtabstruct_4CyLP_2cy_12CyWolfePivot_CyWolfePivot *__pyx_vtabptr_4CyLP_2cy_12CyWolfePivot_CyWolfePivot;


/* "CyLP/cy/CyCoinModel.pxd":34
 * 
 * 
 * cdef class CyCoinModel:             # <<<<<<<<<<<<<<
 *     cdef CppCoinModel* CppSelf
 * 
 */

struct __pyx_vtabstruct_4CyLP_2cy_11CyCoinModel_CyCoinModel {
  void (*CLP_addColumn)(struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *, int, int *, double *, double, double, double);
  void (*CLP_addRow)(struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *, int, int *, double *, double, double);
};
static struct __pyx_vtabstruct_4CyLP_2cy_11CyCoinModel_CyCoinModel *__pyx_vtabptr_4CyLP_2cy_11CyCoinModel_CyCoinModel;


/* "CyLP/cy/CyCbcModel.pxd":51
 *         double getIntegerTolerance()
 * 
 * cdef class CyCbcModel:             # <<<<<<<<<<<<<<
 *     cdef CppICbcModel* CppSelf
 *     cdef object cyLPModel
 */

struct __pyx_vtabstruct_4CyLP_2cy_10CyCbcModel_CyCbcModel {
  PyObject *(*setCppSelf)(struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel *, ICbcModel *);
  PyObject *(*setClpModel)(struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel *, PyObject *);
  PyObject *(*addCutGenerator)(struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel *, struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator *, int __pyx_skip_dispatch, struct __pyx_opt_args_4CyLP_2cy_10CyCbcModel_10CyCbcModel_addCutGenerator *__pyx_optional_args);
};
static struct __pyx_vtabstruct_4CyLP_2cy_10CyCbcModel_CyCbcModel *__pyx_vtabptr_4CyLP_2cy_10CyCbcModel_CyCbcModel;


/* "CyPivotPythonBase.pxd":6
 * 
 * 
 * cdef class CyPivotPythonBase(CyClpPrimalColumnPivotBase):             # <<<<<<<<<<<<<<
 * 	cdef pivotColumn(self, CppCoinIndexedVector* v1,
 *                      CppCoinIndexedVector* v2, CppCoinIndexedVector* v3,
 */

struct __pyx_vtabstruct_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase {
  struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase __pyx_base;
};
static struct __pyx_vtabstruct_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase *__pyx_vtabptr_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase;


/* "CyLP/cy/CyCbcNode.pxd":13
 *         bint breakTie(CppICbcNode* y)
 * 
 * cdef class CyCbcNode:             # <<<<<<<<<<<<<<
 *     cdef CppICbcNode* CppSelf
 *     cdef setCppSelf(self, CppICbcNode* cbcnode)
 */

struct __pyx_vtabstruct_4CyLP_2cy_9CyCbcNode_CyCbcNode {
  PyObject *(*setCppSelf)(struct __pyx_obj_4CyLP_2cy_9CyCbcNode_CyCbcNode *, ICbcNode *);
};
static struct __pyx_vtabstruct_4CyLP_2cy_9CyCbcNode_CyCbcNode *__pyx_vtabptr_4CyLP_2cy_9CyCbcNode_CyCbcNode;


/* "CyLP/cy/CyClpSimplex.pyx":31
 * 
 * 
 * cdef class CyClpSimplex:             # <<<<<<<<<<<<<<
 *     '''
 *     CyClpSimplex is a Cython interface to CLP.
 */

struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex {
  PyObject *(*setCppSelf)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, IClpSimplex *);
  int (*readMps)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, char *, int __pyx_skip_dispatch, struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps *__pyx_optional_args);
  PyObject *(*setPrimalColumnPivotAlgorithm)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, void *);
  double *(*primalColumnSolution)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  double *(*dualColumnSolution)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  double *(*primalRowSolution)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  double *(*dualRowSolution)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  double *(*rowLower)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  double *(*rowUpper)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  PyObject *(*getReducedCosts)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch);
  PyObject *(*getStatusArray)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch);
  PyObject *(*getComplementarityList)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch);
  PyObject *(*getPivotVariable)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch);
  PyObject *(*filterVars)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*getVarStatus)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int, int __pyx_skip_dispatch);
  PyObject *(*primalRow)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, int);
  PyObject *(*getACol)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, int __pyx_skip_dispatch);
  int *(*ComplementarityList)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  int *(*pivotVariable)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *);
  PyObject *(*vectorTimesB_1)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, int __pyx_skip_dispatch);
  PyObject *(*setVariableName)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*setConstraintName)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_vtabptr_4CyLP_2cy_12CyClpSimplex_CyClpSimplex;


/* "CyLP/cy/CyCoinIndexedVector.pxd":19
 * 
 * 
 * cdef class CyCoinIndexedVector:             # <<<<<<<<<<<<<<
 *     cpdef CppCoinIndexedVector *CppSelf
 *     cpdef reserve(self, n)
 */

struct __pyx_vtabstruct_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector {
  PyObject *(*reserve)(struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*assign)(struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_vtabptr_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector;


/* "CyLP/cy/CyCgl.pxd":127
 * ##################
 * 
 * cdef class CyCglGomory(CyCglCutGenerator):             # <<<<<<<<<<<<<<
 *     cdef CppCglGomory* realCppSelf(self)
 *     #cdef CppCglGomory* CppSelf
 */

struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglGomory {
  CglGomory *(*realCppSelf)(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglGomory *);
};
static struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglGomory *__pyx_vtabptr_4CyLP_2cy_5CyCgl_CyCglGomory;

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

#ifndef CYTHON_PROFILE
  #define CYTHON_PROFILE 1
#endif

#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif

#if CYTHON_PROFILE

  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"

  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL Py_DECREF(__pyx_frame)
  #endif

  #define __Pyx_TraceDeclarations                                  \
  static PyCodeObject *__pyx_frame_code = NULL;                      \
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;           \
  int __Pyx_use_tracing = 0;

  #define __Pyx_TraceCall(funcname, srcfile, firstlineno)                            \
  if (unlikely(PyThreadState_GET()->use_tracing && PyThreadState_GET()->c_profilefunc)) {      \
      __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);  \
  }

  #define __Pyx_TraceException()                                                           \
  if (unlikely(__Pyx_use_tracing( && PyThreadState_GET()->use_tracing && PyThreadState_GET()->c_profilefunc) {  \
      PyObject *exc_info = __Pyx_GetExceptionTuple();                                      \
      if (exc_info) {                                                                      \
          PyThreadState_GET()->c_profilefunc(                                              \
              PyThreadState_GET()->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);  \
          Py_DECREF(exc_info);                                                             \
      }                                                                                    \
  }

  #define __Pyx_TraceReturn(result)                                                  \
  if (unlikely(__Pyx_use_tracing) && PyThreadState_GET()->use_tracing && PyThreadState_GET()->c_profilefunc) {  \
      PyThreadState_GET()->c_profilefunc(                                            \
          PyThreadState_GET()->c_profileobj, __pyx_frame, PyTrace_RETURN, (PyObject*)result);     \
      CYTHON_FRAME_DEL;                                                               \
  }

  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno); /*proto*/
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, const char *funcname, const char *srcfile, int firstlineno); /*proto*/

#else

  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno)
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result)

#endif /* CYTHON_PROFILE */

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

/* Run-time type information about structs used with buffers */
struct __Pyx_StructField_;

typedef struct {
  const char* name; /* for error messages only */
  struct __Pyx_StructField_* fields;
  size_t size;     /* sizeof(type) */
  char typegroup; /* _R_eal, _C_omplex, Signed _I_nt, _U_nsigned int, _S_truct, _P_ointer, _O_bject */
} __Pyx_TypeInfo;

typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;

typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;


static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj, __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
#define __Pyx_GetBuffer PyObject_GetBuffer
#define __Pyx_ReleaseBuffer PyBuffer_Release
#endif

Py_ssize_t __Pyx_zeros[] = {0};
Py_ssize_t __Pyx_minusones[] = {-1};

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif

#if defined(_WIN32) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig); /*proto*/

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static void* __Pyx_GetVtable(PyObject *dict); /*proto*/

static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig); /*proto*/

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'CyLP.cy' */

/* Module declarations from 'CyLP.cy.CyCoinIndexedVector' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector = 0;

/* Module declarations from 'CyLP.cy.CyClpPrimalColumnPivotBase' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase = 0;
static int (*__pyx_f_4CyLP_2cy_26CyClpPrimalColumnPivotBase_RunPivotColumn)(void *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *); /*proto*/
static ClpPrimalColumnPivot *(*__pyx_f_4CyLP_2cy_26CyClpPrimalColumnPivotBase_RunClone)(void *, int); /*proto*/
static void (*__pyx_f_4CyLP_2cy_26CyClpPrimalColumnPivotBase_RunSaveWeights)(void *, IClpSimplex *, int); /*proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *); /*proto*/

/* Module declarations from 'CyLP.cy.CyCoinModel' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_11CyCoinModel_CyCoinModel = 0;

/* Module declarations from 'CyLP.cy.CyCoinPackedMatrix' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix = 0;

/* Module declarations from 'CyLP.cy.CyCgl' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglCutGenerator = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglAllDifferent = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglClique = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglKnapsackCover = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglOddHole = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglFlowCover = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglGomory = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglRedSplit = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglLiftAndProject = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglLandP = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding2 = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglTwomir = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglResidualCapacity = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglPreProcess = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglProbing = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglSimpleRounding = 0;

/* Module declarations from 'CyLP.cy.CyCbcNode' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_9CyCbcNode_CyCbcNode = 0;

/* Module declarations from 'CyLP.cy.CyCbcModel' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_10CyCbcModel_CyCbcModel = 0;

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'CyLP.cy.CyWolfePivot' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_12CyWolfePivot_CyWolfePivot = 0;

/* Module declarations from 'CyLP.cy.CyPEPivot' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_9CyPEPivot_CyPEPivot = 0;

/* Module declarations from 'CyLP.cy.CyPivotPythonBase' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase = 0;

/* Module declarations from 'CyLP.cy.CyCoinMpsIO' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_11CyCoinMpsIO_CyCoinMpsIO = 0;

/* Module declarations from 'CyLP.cy.CyClpSimplex' */
static PyTypeObject *__pyx_ptype_4CyLP_2cy_12CyClpSimplex_CyClpSimplex = 0;
static PyTypeObject *__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus = 0;
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_cydot(struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_4CyLP_2cy_12CyClpSimplex_RunIsPivotAcceptable(void *); /*proto*/
static int __pyx_f_4CyLP_2cy_12CyClpSimplex_RunVarSelCriteria(void *, int); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_double_t = { "double_t", NULL, sizeof(__pyx_t_5numpy_double_t), 'R' };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t = { "int32_t", NULL, sizeof(__pyx_t_5numpy_int32_t), 'I' };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t = { "int64_t", NULL, sizeof(__pyx_t_5numpy_int64_t), 'I' };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t = { "uint8_t", NULL, sizeof(__pyx_t_5numpy_uint8_t), 'U' };
#define __Pyx_MODULE_NAME "CyLP.cy.CyClpSimplex"
int __pyx_module_is_main_CyLP__cy__CyClpSimplex = 0;

/* Implementation of 'CyLP.cy.CyClpSimplex' */
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static char __pyx_k_1[] = "Expected a CyLPModel as an argument to CyLPSimplex constructor. Got %s";
static char __pyx_k_2[] = "setObjectiveCoefficient";
static char __pyx_k_3[] = "To set the objective function of CyClpSimplex set CyLPSimplex.cyLPModel first.";
static char __pyx_k_5[] = "No CyClpSimplex cyLPModel.";
static char __pyx_k_8[] = "Hessian can be set to a matrix that implements *tocoo* method";
static char __pyx_k_10[] = "loadQuadraticObjective";
static char __pyx_k_11[] = "";
static char __pyx_k_12[] = "To add a constraint you must set CyLPSimplex.cyLPModel first.";
static char __pyx_k_14[] = "To remove a constraint you must set CyLPSimplex.cyLPModel first.";
static char __pyx_k_17[] = "To remove a variable you must set CyLPSimplex.cyLPModel first.";
static char __pyx_k_19[] = "No CyLPSimplex.cyLPModel is set.";
static char __pyx_k_22[] = "CyClpSimplex.pyx:addConstraint: Column number %d should be less than column size %d";
static char __pyx_k_23[] = "CyClpSimplex.pyx:addColumn: Row number %d should be less than row size %d";
static char __pyx_k_26[] = "The argument of setInteger can be a CyLPVar only if the object is built using a CyLPModel.";
static char __pyx_k_28[] = "No such variable: %s";
static char __pyx_k_30[] = "feasibilityTolerance";
static char __pyx_k_32[] = "Presolve says problem infeasible.";
static char __pyx_k_33[] = "No write access for %s or an intermediate                             directory does not exist.";
static char __pyx_k_34[] = "pivotMethodObject should be of a                             class derived from PivotPythonBase";
static char __pyx_k_36[] = "CyClpPrimalColumnPivotBase.pyx: pivot column should be implemented.";
static char __pyx_k_38[] = "getComplementarityList";
static char __pyx_k_40[] = "Variables should have the same  dimensions to be complements. Got %s: %g and %s: %g";
static char __pyx_k_42[] = "CyLP.py.modeling.CyLPModel";
static char __pyx_k_43[] = "CyLP.cy";
static char __pyx_k_46[] = "../input/p0033.mps";
static char __pyx_k_47[] = "ndarray is not C contiguous";
static char __pyx_k_49[] = "ndarray is not Fortran contiguous";
static char __pyx_k_51[] = "Non-native byte order not supported";
static char __pyx_k_53[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_54[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_57[] = "Format string allocated too short.";
static char __pyx_k_59[] = "\n        Set the objective function using this property.\n        See the :ref:`modeling example <modeling-usage>`.\n        ";
static char __pyx_k_60[] = "\n        Number of iterations.\n        ";
static char __pyx_k_61[] = "\n        Number of rows, constraints.\n        ";
static char __pyx_k_62[] = "\n        Number of constraints, rows.\n        ";
static char __pyx_k_63[] = "\n        Number of variables, columns.\n        ";
static char __pyx_k_64[] = "\n        Number of columns, variables.\n        ";
static char __pyx_k_65[] = "\n        The coefficient matrix.\n        ";
static char __pyx_k_66[] = "\n        Constraints.\n        ";
static char __pyx_k_67[] = "\n        variable names\n        ";
static char __pyx_k_68[] = "\n        Variables.\n        ";
static char __pyx_k_69[] = "\n        The objective value. Readonly.\n        ";
static char __pyx_k_70[] = "\n        Solution to the primal variables.\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_71[] = "\n        Solution to the primal variables. Including the slacks.\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_72[] = "\n        Return the current point.\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_73[] = "\n        Solution to the dual variables\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_74[] = "\n        Solution to the primal slack variables\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_75[] = "\n        Solution to the dual slack variables\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_76[] = "\n        The reduced costs. A Numpy array.\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_77[] = "\n        Variables upper bounds\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_78[] = "\n        Variables lower bounds\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_79[] = "\n        Constraints upper bounds\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_80[] = "\n        Constraints lower bounds\n\n        :rtype: Numpy array\n        ";
static char __pyx_k_81[] = "\n        A Numpy array of all the variables' status\n        ";
static char __pyx_k_82[] = "\n        The index set of variables that are *free* or *superbasic*.\n        ";
static char __pyx_k_83[] = "\n        The index set of variables that are not *basic* or *fixed*.\n        ";
static char __pyx_k_84[] = "\n        The index set of variables that are *free*.\n        ";
static char __pyx_k_85[] = "\n        The index set of variables that are *basic*.\n        ";
static char __pyx_k_86[] = "\n        The index set of variables that are at their upper bound.\n        ";
static char __pyx_k_87[] = "\n        The index set of variables that are at their lower bound.\n        ";
static char __pyx_k_88[] = "\n        The index set of variables that are *superbasic*.\n        ";
static char __pyx_k_89[] = "\n        The index set of variables that are *fixed*.\n        ";
static char __pyx_k_90[] = "\n        The index set of variables that are *flagged*.\n        ";
static char __pyx_k_91[] = "\n        The index set of variables that are NOT *free*.\n        ";
static char __pyx_k_92[] = "\n        The index set of variables that are NOT *basic*.\n        ";
static char __pyx_k_93[] = "\n        The index set of variables that are NOT at their upper bound.\n        ";
static char __pyx_k_94[] = "\n        The index set of variables that are NOT at their lower bound.\n        ";
static char __pyx_k_95[] = "\n        The index set of variables that are NOT *superbasic*.\n        ";
static char __pyx_k_96[] = "\n        The index set of variables that are NOT *fixed*.\n        ";
static char __pyx_k_97[] = "\n        The index set of variables that are NOT flagged.\n        ";
static char __pyx_k_98[] = "os.path";
static char __pyx_k_99[] = "CyLP.py.utils.sparseUtil";
static char __pyx_k__B[] = "B";
static char __pyx_k__H[] = "H";
static char __pyx_k__I[] = "I";
static char __pyx_k__L[] = "L";
static char __pyx_k__O[] = "O";
static char __pyx_k__Q[] = "Q";
static char __pyx_k__b[] = "b";
static char __pyx_k__d[] = "d";
static char __pyx_k__f[] = "f";
static char __pyx_k__g[] = "g";
static char __pyx_k__h[] = "h";
static char __pyx_k__i[] = "i";
static char __pyx_k__l[] = "l";
static char __pyx_k__q[] = "q";
static char __pyx_k__w[] = "w";
static char __pyx_k__x[] = "x";
static char __pyx_k__y[] = "y";
static char __pyx_k_100[] = "CyLP.py.pivots.PivotPythonBase";
static char __pyx_k_101[] = "primal infeasible";
static char __pyx_k_102[] = "dual infeasible";
static char __pyx_k_103[] = "stopped on iterations or time";
static char __pyx_k_104[] = "stopped due to errors";
static char __pyx_k_105[] = "stopped by event handler (virtual int ClpEventHandler::event())";
static char __pyx_k_106[] = "CyLP.cy.CyClpSimplex";
static char __pyx_k_107[] = "CyClpSimplex.initialSolve (line 748)";
static char __pyx_k_108[] = "\n        Run CLP's initialSolve. It does a presolve and uses primal or dual\n        Simplex to solve a problem.\n\n        **Usage example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.initialSolve()\n        'optimal'\n        >>> round(s.objectiveValue, 4)\n        2520.5717\n\n        ";
static char __pyx_k_109[] = "CyClpSimplex.initialPrimalSolve (line 768)";
static char __pyx_k_110[] = "\n        Run CLP's initalPrimalSolve. The same as :func:`initalSolve` but force\n        the use of primal Simplex.\n\n        **Usage example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.initialPrimalSolve()\n        'optimal'\n        >>> round(s.objectiveValue, 4)\n        2520.5717\n\n        ";
static char __pyx_k_111[] = "CyClpSimplex.initialDualSolve (line 788)";
static char __pyx_k_112[] = "\n        Run CLP's initalPrimalSolve. The same as :func:`initalSolve` but force\n        the use of dual Simplex.\n\n        **Usage example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.initialDualSolve()\n        'optimal'\n        >>> round(s.objectiveValue, 4)\n        2520.5717\n\n        ";
static char __pyx_k_113[] = "CyClpSimplex.dual (line 1005)";
static char __pyx_k_114[] = "\n        Runs CLP dual simplex.\n\n        **Usage Example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.dual()\n        'optimal'\n\n        ";
static char __pyx_k_115[] = "CyClpSimplex.setInteger (line 1074)";
static char __pyx_k_116[] = "\n        if ``arg`` is an integer: mark variable index ``arg`` as integer.\n        if ``arg`` is a :class:`CyLPVar` object: mark variable\n        ``arg`` as integer. Here is an example of the latter:\n\n        >>> import numpy as np\n        >>> from CyLP.cy import CyClpSimplex\n        >>> from CyLP.py.modeling.CyLPModel import CyLPModel, CyLPArray\n        >>> model = CyLPModel()\n        >>>\n        >>> x = model.addVariable('x', 3)\n        >>> y = model.addVariable('y', 2)\n        >>>\n        >>> A = np.matrix([[1., 2., 0],[1., 0, 1.]])\n        >>> B = np.matrix([[1., 0, 0], [0, 0, 1.]])\n        >>> D = np.matrix([[1., 2.],[0, 1]])\n        >>> a = CyLPArray([5, 2.5])\n        >>> b = CyLPArray([4.2, 3])\n        >>> x_u= CyLPArray([2., 3.5])\n        >>>\n        >>> model += A*x <= a\n        >>> model += 2 <= B * x + D * y <= b\n        >>> model += y >= 0\n        >>> model += 1.1 <= x[1:3] <= x_u\n        >>>\n        >>> c = CyLPArray([1., -2., 3.])\n        >>> model.objective = c * x + 2 * y.sum()\n        >>>\n        >>>\n        >>> s = CyClpSimplex(model)\n        >>> s.setInteger(x[1:3])\n        >>>\n        >>> cbcModel = s.getCbcModel()\n        >>> cbcModel.branchAndBound()\n        >>>\n        >>> sol_x = cbcModel.primalVariableSolution['x']\n        >>> (abs(sol_x -\n        ...     np.array([0.5, 2, 2]) ) <= 10**-6).all()\n        True\n        >>> sol_y = cbcModel.primalVariableSolution['y']\n        >>> (abs(sol_y -\n        ...     np.array([0, 0.75]) ) <= 10**-6).all()\n        True\n\n        ";
static char __pyx_k_117[] = "CyClpSimplex.loadFromCyLPModel (line 1195)";
static char __pyx_k_118[] = "\n        Set the coefficient matrix, constraint bounds, and variable\n        bounds based on the data in *cyLPModel* which should be and object\n        of *CyLPModel* class.\n\n        This method is usually called from CyClpSimplex's constructor.\n        But in a case that the CyClpSimplex instance is created before\n        we have the CyLPModel we use this method to load the LP,\n        for example:\n\n        >>> import numpy as np\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getModelExample\n        >>>\n        >>> s = CyClpSimplex()\n        >>> model = getModelExample()\n        >>> s.loadFromCyLPModel(model)\n        >>>\n        >>> s.primal()\n        'optimal'\n        >>> sol_x = s.primalVariableSolution['x']\n        >>> (abs(sol_x -\n        ...     np.array([0.2, 2, 1.1]) ) <= 10**-6).all()\n        True\n\n        ";
static char __pyx_k__Zd[] = "Zd";
static char __pyx_k__Zf[] = "Zf";
static char __pyx_k__Zg[] = "Zg";
static char __pyx_k__cl[] = "cl";
static char __pyx_k__np[] = "np";
static char __pyx_k__os[] = "os";
static char __pyx_k__pi[] = "pi";
static char __pyx_k__v1[] = "v1";
static char __pyx_k__v2[] = "v2";
static char __pyx_k__arr[] = "arr";
static char __pyx_k__col[] = "col";
static char __pyx_k__dim[] = "dim";
static char __pyx_k__end[] = "end";
static char __pyx_k__ind[] = "ind";
static char __pyx_k__obj[] = "obj";
static char __pyx_k__row[] = "row";
static char __pyx_k__sum[] = "sum";
static char __pyx_k__val[] = "val";
static char __pyx_k__cons[] = "cons";
static char __pyx_k__copy[] = "copy";
static char __pyx_k__data[] = "data";
static char __pyx_k__dims[] = "dims";
static char __pyx_k__free[] = "free";
static char __pyx_k__inds[] = "inds";
static char __pyx_k__izip[] = "izip";
static char __pyx_k__join[] = "join";
static char __pyx_k__keys[] = "keys";
static char __pyx_k__name[] = "name";
static char __pyx_k__ncol[] = "ncol";
static char __pyx_k__open[] = "open";
static char __pyx_k__path[] = "path";
static char __pyx_k__rows[] = "rows";
static char __pyx_k__var1[] = "var1";
static char __pyx_k__var2[] = "var2";
static char __pyx_k__array[] = "array";
static char __pyx_k__basic[] = "basic";
static char __pyx_k__close[] = "close";
static char __pyx_k__collb[] = "collb";
static char __pyx_k__colub[] = "colub";
static char __pyx_k__fixed[] = "fixed";
static char __pyx_k__int32[] = "int32";
static char __pyx_k__isInt[] = "isInt";
static char __pyx_k__nRows[] = "nRows";
static char __pyx_k__numpy[] = "numpy";
static char __pyx_k__range[] = "range";
static char __pyx_k__rowlb[] = "rowlb";
static char __pyx_k__rowub[] = "rowub";
static char __pyx_k__scipy[] = "scipy";
static char __pyx_k__shape[] = "shape";
static char __pyx_k__start[] = "start";
static char __pyx_k__tocoo[] = "tocoo";
static char __pyx_k__w_ind[] = "w_ind";
static char __pyx_k__where[] = "where";
static char __pyx_k__which[] = "which";
static char __pyx_k__astype[] = "astype";
static char __pyx_k__double[] = "double";
static char __pyx_k__hasVar[] = "hasVar";
static char __pyx_k__matrix[] = "matrix";
static char __pyx_k__number[] = "number";
static char __pyx_k__parent[] = "parent";
static char __pyx_k__resize[] = "resize";
static char __pyx_k__sparse[] = "sparse";
static char __pyx_k__status[] = "status";
static char __pyx_k__varInd[] = "varInd";
static char __pyx_k__xrange[] = "xrange";
static char __pyx_k__CyLPVar[] = "CyLPVar";
static char __pyx_k__arr_ind[] = "arr_ind";
static char __pyx_k__columns[] = "columns";
static char __pyx_k__dirname[] = "dirname";
static char __pyx_k__getACol[] = "getACol";
static char __pyx_k__getfile[] = "getfile";
static char __pyx_k__indices[] = "indices";
static char __pyx_k__inspect[] = "inspect";
static char __pyx_k__optimal[] = "optimal";
static char __pyx_k__product[] = "product";
static char __pyx_k__readMps[] = "readMps";
static char __pyx_k__status_[] = "status_";
static char __pyx_k__varname[] = "varname";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__checkVar[] = "checkVar";
static char __pyx_k__colArray[] = "colArray";
static char __pyx_k__constInd[] = "constInd";
static char __pyx_k__elements[] = "elements";
static char __pyx_k__fileName[] = "fileName";
static char __pyx_k__filename[] = "filename";
static char __pyx_k__majorDim[] = "majorDim";
static char __pyx_k__minorDim[] = "minorDim";
static char __pyx_k__mpsNames[] = "mpsNames";
static char __pyx_k__objSense[] = "objSense";
static char __pyx_k__rowLower[] = "rowLower";
static char __pyx_k__rowUpper[] = "rowUpper";
static char __pyx_k__varIndex[] = "varIndex";
static char __pyx_k__CyLPArray[] = "CyLPArray";
static char __pyx_k__CyLPModel[] = "CyLPModel";
static char __pyx_k__Exception[] = "Exception";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k____class__[] = "__class__";
static char __pyx_k__appendCol[] = "appendCol";
static char __pyx_k__appendRow[] = "appendRow";
static char __pyx_k__cyLPModel[] = "cyLPModel";
static char __pyx_k__dropNames[] = "dropNames";
static char __pyx_k__itertools[] = "itertools";
static char __pyx_k__keepNames[] = "keepNames";
static char __pyx_k__objective[] = "objective";
static char __pyx_k__rowStarts[] = "rowStarts";
static char __pyx_k__variables[] = "variables";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__constIndex[] = "constIndex";
static char __pyx_k__coo_matrix[] = "coo_matrix";
static char __pyx_k__csc_matrix[] = "csc_matrix";
static char __pyx_k__csr_matrix[] = "csr_matrix";
static char __pyx_k__exceptions[] = "exceptions";
static char __pyx_k__filterVars[] = "filterVars";
static char __pyx_k__formatType[] = "formatType";
static char __pyx_k__getNumCols[] = "getNumCols";
static char __pyx_k__getNumRows[] = "getNumRows";
static char __pyx_k__lil_matrix[] = "lil_matrix";
static char __pyx_k__nVariables[] = "nVariables";
static char __pyx_k__setInteger[] = "setInteger";
static char __pyx_k__superBasic[] = "superBasic";
static char __pyx_k____getitem__[] = "__getitem__";
static char __pyx_k__addVariable[] = "addVariable";
static char __pyx_k__columnLower[] = "columnLower";
static char __pyx_k__columnUpper[] = "columnUpper";
static char __pyx_k__constraints[] = "constraints";
static char __pyx_k__modelObject[] = "modelObject";
static char __pyx_k__numberInRow[] = "numberInRow";
static char __pyx_k__setRowLower[] = "setRowLower";
static char __pyx_k__setRowUpper[] = "setRowUpper";
static char __pyx_k__CyClpSimplex[] = "CyClpSimplex";
static char __pyx_k__CyLPSolution[] = "CyLPSolution";
static char __pyx_k__RuntimeError[] = "RuntimeError";
static char __pyx_k__atLowerBound[] = "atLowerBound";
static char __pyx_k__atUpperBound[] = "atUpperBound";
static char __pyx_k__columnStarts[] = "columnStarts";
static char __pyx_k__currentframe[] = "currentframe";
static char __pyx_k__elementIndex[] = "elementIndex";
static char __pyx_k__elementValue[] = "elementValue";
static char __pyx_k__getVarByName[] = "getVarByName";
static char __pyx_k__getVarStatus[] = "getVarStatus";
static char __pyx_k__ifValuesPass[] = "ifValuesPass";
static char __pyx_k__ignoreErrors[] = "ignoreErrors";
static char __pyx_k__keepIntegers[] = "keepIntegers";
static char __pyx_k__makeMatrices[] = "makeMatrices";
static char __pyx_k__nConstraints[] = "nConstraints";
static char __pyx_k__numberAcross[] = "numberAcross";
static char __pyx_k__numberPasses[] = "numberPasses";
static char __pyx_k__numberWanted[] = "numberWanted";
static char __pyx_k__rowObjective[] = "rowObjective";
static char __pyx_k__sparseConcat[] = "sparseConcat";
static char __pyx_k__vectorStarts[] = "vectorStarts";
static char __pyx_k__addConstraint[] = "addConstraint";
static char __pyx_k__deleteCurrent[] = "deleteCurrent";
static char __pyx_k__getMpsExample[] = "getMpsExample";
static char __pyx_k__getStatusCode[] = "getStatusCode";
static char __pyx_k__newNumberRows[] = "newNumberRows";
static char __pyx_k__problemStatus[] = "problemStatus";
static char __pyx_k__replaceMatrix[] = "replaceMatrix";
static char __pyx_k__variableNames[] = "variableNames";
static char __pyx_k__csc_matrixPlus[] = "csc_matrixPlus";
static char __pyx_k__doRowObjective[] = "doRowObjective";
static char __pyx_k__getStatusArray[] = "getStatusArray";
static char __pyx_k__numberInColumn[] = "numberInColumn";
static char __pyx_k__removeVariable[] = "removeVariable";
static char __pyx_k__setColumnLower[] = "setColumnLower";
static char __pyx_k__setColumnUpper[] = "setColumnUpper";
static char __pyx_k__variablesLower[] = "variablesLower";
static char __pyx_k__variablesUpper[] = "variablesUpper";
static char __pyx_k__vectorTimesB_1[] = "vectorTimesB_1";
static char __pyx_k__PivotPythonBase[] = "PivotPythonBase";
static char __pyx_k__getModelExample[] = "getModelExample";
static char __pyx_k__getReducedCosts[] = "getReducedCosts";
static char __pyx_k__setVariableName[] = "setVariableName";
static char __pyx_k__tryPlusMinusOne[] = "tryPlusMinusOne";
static char __pyx_k__constraintsLower[] = "constraintsLower";
static char __pyx_k__constraintsUpper[] = "constraintsUpper";
static char __pyx_k__getPivotVariable[] = "getPivotVariable";
static char __pyx_k__getVariableNames[] = "getVariableNames";
static char __pyx_k__newNumberColumns[] = "newNumberColumns";
static char __pyx_k__removeConstraint[] = "removeConstraint";
static char __pyx_k__reverseVarSearch[] = "reverseVarSearch";
static char __pyx_k__isPivotAcceptable[] = "isPivotAcceptable";
static char __pyx_k__loadFromCyLPModel[] = "loadFromCyLPModel";
static char __pyx_k__setConstraintName[] = "setConstraintName";
static char __pyx_k__setObjectiveArray[] = "setObjectiveArray";
static char __pyx_k__startFinishOptions[] = "startFinishOptions";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_n_s_10;
static PyObject *__pyx_n_s_100;
static PyObject *__pyx_kp_s_101;
static PyObject *__pyx_kp_s_102;
static PyObject *__pyx_kp_s_103;
static PyObject *__pyx_kp_s_104;
static PyObject *__pyx_kp_s_105;
static PyObject *__pyx_n_s_106;
static PyObject *__pyx_kp_u_107;
static PyObject *__pyx_kp_u_108;
static PyObject *__pyx_kp_u_109;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_kp_u_110;
static PyObject *__pyx_kp_u_111;
static PyObject *__pyx_kp_u_112;
static PyObject *__pyx_kp_u_113;
static PyObject *__pyx_kp_u_114;
static PyObject *__pyx_kp_u_115;
static PyObject *__pyx_kp_u_116;
static PyObject *__pyx_kp_u_117;
static PyObject *__pyx_kp_u_118;
static PyObject *__pyx_kp_s_12;
static PyObject *__pyx_kp_s_14;
static PyObject *__pyx_kp_s_17;
static PyObject *__pyx_kp_s_19;
static PyObject *__pyx_n_s_2;
static PyObject *__pyx_kp_s_22;
static PyObject *__pyx_kp_s_23;
static PyObject *__pyx_kp_s_26;
static PyObject *__pyx_kp_s_28;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_n_s_30;
static PyObject *__pyx_kp_s_32;
static PyObject *__pyx_kp_s_33;
static PyObject *__pyx_kp_s_34;
static PyObject *__pyx_kp_s_36;
static PyObject *__pyx_n_s_38;
static PyObject *__pyx_kp_s_40;
static PyObject *__pyx_n_s_42;
static PyObject *__pyx_n_s_43;
static PyObject *__pyx_kp_s_46;
static PyObject *__pyx_kp_u_47;
static PyObject *__pyx_kp_u_49;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_u_51;
static PyObject *__pyx_kp_u_53;
static PyObject *__pyx_kp_u_54;
static PyObject *__pyx_kp_u_57;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_n_s_98;
static PyObject *__pyx_n_s_99;
static PyObject *__pyx_n_s__CyClpSimplex;
static PyObject *__pyx_n_s__CyLPArray;
static PyObject *__pyx_n_s__CyLPModel;
static PyObject *__pyx_n_s__CyLPSolution;
static PyObject *__pyx_n_s__CyLPVar;
static PyObject *__pyx_n_s__Exception;
static PyObject *__pyx_n_s__PivotPythonBase;
static PyObject *__pyx_n_s__RuntimeError;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s____class__;
static PyObject *__pyx_n_s____getitem__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__addConstraint;
static PyObject *__pyx_n_s__addVariable;
static PyObject *__pyx_n_s__appendCol;
static PyObject *__pyx_n_s__appendRow;
static PyObject *__pyx_n_s__arr;
static PyObject *__pyx_n_s__arr_ind;
static PyObject *__pyx_n_s__array;
static PyObject *__pyx_n_s__astype;
static PyObject *__pyx_n_s__atLowerBound;
static PyObject *__pyx_n_s__atUpperBound;
static PyObject *__pyx_n_s__basic;
static PyObject *__pyx_n_s__checkVar;
static PyObject *__pyx_n_s__cl;
static PyObject *__pyx_n_s__close;
static PyObject *__pyx_n_s__col;
static PyObject *__pyx_n_s__colArray;
static PyObject *__pyx_n_s__collb;
static PyObject *__pyx_n_s__colub;
static PyObject *__pyx_n_s__columnLower;
static PyObject *__pyx_n_s__columnStarts;
static PyObject *__pyx_n_s__columnUpper;
static PyObject *__pyx_n_s__columns;
static PyObject *__pyx_n_s__cons;
static PyObject *__pyx_n_s__constInd;
static PyObject *__pyx_n_s__constIndex;
static PyObject *__pyx_n_s__constraints;
static PyObject *__pyx_n_s__constraintsLower;
static PyObject *__pyx_n_s__constraintsUpper;
static PyObject *__pyx_n_s__coo_matrix;
static PyObject *__pyx_n_s__copy;
static PyObject *__pyx_n_s__csc_matrix;
static PyObject *__pyx_n_s__csc_matrixPlus;
static PyObject *__pyx_n_s__csr_matrix;
static PyObject *__pyx_n_s__currentframe;
static PyObject *__pyx_n_s__cyLPModel;
static PyObject *__pyx_n_s__data;
static PyObject *__pyx_n_s__deleteCurrent;
static PyObject *__pyx_n_s__dim;
static PyObject *__pyx_n_s__dims;
static PyObject *__pyx_n_s__dirname;
static PyObject *__pyx_n_s__doRowObjective;
static PyObject *__pyx_n_s__double;
static PyObject *__pyx_n_s__dropNames;
static PyObject *__pyx_n_s__elementIndex;
static PyObject *__pyx_n_s__elementValue;
static PyObject *__pyx_n_s__elements;
static PyObject *__pyx_n_s__end;
static PyObject *__pyx_n_s__exceptions;
static PyObject *__pyx_n_s__fileName;
static PyObject *__pyx_n_s__filename;
static PyObject *__pyx_n_s__filterVars;
static PyObject *__pyx_n_s__fixed;
static PyObject *__pyx_n_s__formatType;
static PyObject *__pyx_n_s__free;
static PyObject *__pyx_n_s__getACol;
static PyObject *__pyx_n_s__getModelExample;
static PyObject *__pyx_n_s__getMpsExample;
static PyObject *__pyx_n_s__getNumCols;
static PyObject *__pyx_n_s__getNumRows;
static PyObject *__pyx_n_s__getPivotVariable;
static PyObject *__pyx_n_s__getReducedCosts;
static PyObject *__pyx_n_s__getStatusArray;
static PyObject *__pyx_n_s__getStatusCode;
static PyObject *__pyx_n_s__getVarByName;
static PyObject *__pyx_n_s__getVarStatus;
static PyObject *__pyx_n_s__getVariableNames;
static PyObject *__pyx_n_s__getfile;
static PyObject *__pyx_n_s__hasVar;
static PyObject *__pyx_n_s__ifValuesPass;
static PyObject *__pyx_n_s__ignoreErrors;
static PyObject *__pyx_n_s__ind;
static PyObject *__pyx_n_s__indices;
static PyObject *__pyx_n_s__inds;
static PyObject *__pyx_n_s__inspect;
static PyObject *__pyx_n_s__int32;
static PyObject *__pyx_n_s__isInt;
static PyObject *__pyx_n_s__isPivotAcceptable;
static PyObject *__pyx_n_s__itertools;
static PyObject *__pyx_n_s__izip;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__keepIntegers;
static PyObject *__pyx_n_s__keepNames;
static PyObject *__pyx_n_s__keys;
static PyObject *__pyx_n_s__lil_matrix;
static PyObject *__pyx_n_s__loadFromCyLPModel;
static PyObject *__pyx_n_s__majorDim;
static PyObject *__pyx_n_s__makeMatrices;
static PyObject *__pyx_n_s__matrix;
static PyObject *__pyx_n_s__minorDim;
static PyObject *__pyx_n_s__modelObject;
static PyObject *__pyx_n_s__mpsNames;
static PyObject *__pyx_n_s__nConstraints;
static PyObject *__pyx_n_s__nRows;
static PyObject *__pyx_n_s__nVariables;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__ncol;
static PyObject *__pyx_n_s__newNumberColumns;
static PyObject *__pyx_n_s__newNumberRows;
static PyObject *__pyx_n_s__np;
static PyObject *__pyx_n_s__number;
static PyObject *__pyx_n_s__numberAcross;
static PyObject *__pyx_n_s__numberInColumn;
static PyObject *__pyx_n_s__numberInRow;
static PyObject *__pyx_n_s__numberPasses;
static PyObject *__pyx_n_s__numberWanted;
static PyObject *__pyx_n_s__numpy;
static PyObject *__pyx_n_s__obj;
static PyObject *__pyx_n_s__objSense;
static PyObject *__pyx_n_s__objective;
static PyObject *__pyx_n_s__open;
static PyObject *__pyx_n_s__optimal;
static PyObject *__pyx_n_s__os;
static PyObject *__pyx_n_s__parent;
static PyObject *__pyx_n_s__path;
static PyObject *__pyx_n_s__pi;
static PyObject *__pyx_n_s__problemStatus;
static PyObject *__pyx_n_s__product;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__readMps;
static PyObject *__pyx_n_s__removeConstraint;
static PyObject *__pyx_n_s__removeVariable;
static PyObject *__pyx_n_s__replaceMatrix;
static PyObject *__pyx_n_s__resize;
static PyObject *__pyx_n_s__reverseVarSearch;
static PyObject *__pyx_n_s__row;
static PyObject *__pyx_n_s__rowLower;
static PyObject *__pyx_n_s__rowObjective;
static PyObject *__pyx_n_s__rowStarts;
static PyObject *__pyx_n_s__rowUpper;
static PyObject *__pyx_n_s__rowlb;
static PyObject *__pyx_n_s__rows;
static PyObject *__pyx_n_s__rowub;
static PyObject *__pyx_n_s__scipy;
static PyObject *__pyx_n_s__setColumnLower;
static PyObject *__pyx_n_s__setColumnUpper;
static PyObject *__pyx_n_s__setConstraintName;
static PyObject *__pyx_n_s__setInteger;
static PyObject *__pyx_n_s__setObjectiveArray;
static PyObject *__pyx_n_s__setRowLower;
static PyObject *__pyx_n_s__setRowUpper;
static PyObject *__pyx_n_s__setVariableName;
static PyObject *__pyx_n_s__shape;
static PyObject *__pyx_n_s__sparse;
static PyObject *__pyx_n_s__sparseConcat;
static PyObject *__pyx_n_s__start;
static PyObject *__pyx_n_s__startFinishOptions;
static PyObject *__pyx_n_s__status;
static PyObject *__pyx_n_s__status_;
static PyObject *__pyx_n_s__sum;
static PyObject *__pyx_n_s__superBasic;
static PyObject *__pyx_n_s__tocoo;
static PyObject *__pyx_n_s__tryPlusMinusOne;
static PyObject *__pyx_n_s__v1;
static PyObject *__pyx_n_s__v2;
static PyObject *__pyx_n_s__val;
static PyObject *__pyx_n_s__var1;
static PyObject *__pyx_n_s__var2;
static PyObject *__pyx_n_s__varInd;
static PyObject *__pyx_n_s__varIndex;
static PyObject *__pyx_n_s__variableNames;
static PyObject *__pyx_n_s__variables;
static PyObject *__pyx_n_s__variablesLower;
static PyObject *__pyx_n_s__variablesUpper;
static PyObject *__pyx_n_s__varname;
static PyObject *__pyx_n_s__vectorStarts;
static PyObject *__pyx_n_s__vectorTimesB_1;
static PyObject *__pyx_n_s__w;
static PyObject *__pyx_n_s__w_ind;
static PyObject *__pyx_n_s__where;
static PyObject *__pyx_n_s__which;
static PyObject *__pyx_n_s__x;
static PyObject *__pyx_n_s__xrange;
static PyObject *__pyx_n_s__y;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_15;
static PyObject *__pyx_int_64;
static PyObject *__pyx_k_16;
static PyObject *__pyx_k_24;
static PyObject *__pyx_k_25;
static PyObject *__pyx_k_29;
static PyObject *__pyx_k_31;
static PyArrayObject *__pyx_k_41;
static PyObject *__pyx_k_tuple_4;
static PyObject *__pyx_k_tuple_6;
static PyObject *__pyx_k_tuple_7;
static PyObject *__pyx_k_tuple_9;
static PyObject *__pyx_k_tuple_13;
static PyObject *__pyx_k_tuple_15;
static PyObject *__pyx_k_tuple_18;
static PyObject *__pyx_k_tuple_20;
static PyObject *__pyx_k_tuple_21;
static PyObject *__pyx_k_tuple_27;
static PyObject *__pyx_k_tuple_35;
static PyObject *__pyx_k_tuple_37;
static PyObject *__pyx_k_tuple_39;
static PyObject *__pyx_k_tuple_44;
static PyObject *__pyx_k_tuple_45;
static PyObject *__pyx_k_tuple_48;
static PyObject *__pyx_k_tuple_50;
static PyObject *__pyx_k_tuple_52;
static PyObject *__pyx_k_tuple_55;
static PyObject *__pyx_k_tuple_56;
static PyObject *__pyx_k_tuple_58;

/* "CyLP/cy/CyClpSimplex.pyx":56
 *     '''
 * 
 *     def __cinit__(self, cyLPModel=None):             # <<<<<<<<<<<<<<
 *         self.CppSelf = new CppIClpSimplex(<cpy_ref.PyObject*>self,
 *                                 <runIsPivotAcceptable_t>RunIsPivotAcceptable,
 */

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cyLPModel = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__cyLPModel,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__cinit__");
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 56);
  {
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cyLPModel);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cyLPModel = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":57
 * 
 *     def __cinit__(self, cyLPModel=None):
 *         self.CppSelf = new CppIClpSimplex(<cpy_ref.PyObject*>self,             # <<<<<<<<<<<<<<
 *                                 <runIsPivotAcceptable_t>RunIsPivotAcceptable,
 *                                 <varSelCriteria_t>RunVarSelCriteria)
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf = new IClpSimplex(((PyObject *)__pyx_v_self), ((runIsPivotAcceptable_t)__pyx_f_4CyLP_2cy_12CyClpSimplex_RunIsPivotAcceptable), ((varSelCriteria_t)__pyx_f_4CyLP_2cy_12CyClpSimplex_RunVarSelCriteria));

  /* "CyLP/cy/CyClpSimplex.pyx":60
 *                                 <runIsPivotAcceptable_t>RunIsPivotAcceptable,
 *                                 <varSelCriteria_t>RunVarSelCriteria)
 *         self.vars = []             # <<<<<<<<<<<<<<
 *         #self.cbcModelExists = False
 *         self.coinModel = CyCoinModel()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->vars);
  __Pyx_DECREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->vars);
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->vars = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":62
 *         self.vars = []
 *         #self.cbcModelExists = False
 *         self.coinModel = CyCoinModel()             # <<<<<<<<<<<<<<
 * 
 *         self.cyLPModel = cyLPModel
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_11CyCoinModel_CyCoinModel)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->coinModel);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->coinModel));
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->coinModel = ((struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":64
 *         self.coinModel = CyCoinModel()
 * 
 *         self.cyLPModel = cyLPModel             # <<<<<<<<<<<<<<
 *         if cyLPModel:
 *             if isinstance(cyLPModel, CyLPModel):
 */
  __Pyx_INCREF(__pyx_v_cyLPModel);
  __Pyx_GIVEREF(__pyx_v_cyLPModel);
  __Pyx_GOTREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
  __Pyx_DECREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel = __pyx_v_cyLPModel;

  /* "CyLP/cy/CyClpSimplex.pyx":65
 * 
 *         self.cyLPModel = cyLPModel
 *         if cyLPModel:             # <<<<<<<<<<<<<<
 *             if isinstance(cyLPModel, CyLPModel):
 *                 self.loadFromCyLPModel(cyLPModel)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_cyLPModel); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":66
 *         self.cyLPModel = cyLPModel
 *         if cyLPModel:
 *             if isinstance(cyLPModel, CyLPModel):             # <<<<<<<<<<<<<<
 *                 self.loadFromCyLPModel(cyLPModel)
 *             else:
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPModel); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_cyLPModel, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":67
 *         if cyLPModel:
 *             if isinstance(cyLPModel, CyLPModel):
 *                 self.loadFromCyLPModel(cyLPModel)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError('Expected a CyLPModel as an argument to ' \
 */
      __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__loadFromCyLPModel); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __Pyx_INCREF(__pyx_v_cyLPModel);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_cyLPModel);
      __Pyx_GIVEREF(__pyx_v_cyLPModel);
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "CyLP/cy/CyClpSimplex.pyx":69
 *                 self.loadFromCyLPModel(cyLPModel)
 *             else:
 *                 raise TypeError('Expected a CyLPModel as an argument to ' \             # <<<<<<<<<<<<<<
 *                                 'CyLPSimplex constructor. Got %s' %
 *                                 cyLPModel.__class__)
 */
      __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__TypeError); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);

      /* "CyLP/cy/CyClpSimplex.pyx":71
 *                 raise TypeError('Expected a CyLPModel as an argument to ' \
 *                                 'CyLPSimplex constructor. Got %s' %
 *                                 cyLPModel.__class__)             # <<<<<<<<<<<<<<
 * 
 *     cdef setCppSelf(self,  CppIClpSimplex* s):
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_cyLPModel, __pyx_n_s____class__); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_1), __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_1));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":73
 *                                 cyLPModel.__class__)
 * 
 *     cdef setCppSelf(self,  CppIClpSimplex* s):             # <<<<<<<<<<<<<<
 *         self.CppSelf = s
 * 
 */

static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setCppSelf(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, IClpSimplex *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setCppSelf");
  __Pyx_TraceCall("setCppSelf", __pyx_f[0], 73);

  /* "CyLP/cy/CyClpSimplex.pyx":74
 * 
 *     cdef setCppSelf(self,  CppIClpSimplex* s):
 *         self.CppSelf = s             # <<<<<<<<<<<<<<
 * 
 *     #############################################
 */
  __pyx_v_self->CppSelf = __pyx_v_s;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":85
 *         See the :ref:`modeling example <modeling-usage>`.
 *         '''
 *         def __set__(self, obj):             # <<<<<<<<<<<<<<
 *             if self.cyLPModel:
 *                 self.cyLPModel.objective = obj
 */

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_v_o = NULL;
  PyObject *__pyx_v_i = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__");
  __Pyx_TraceCall("__set__", __pyx_f[0], 85);

  /* "CyLP/cy/CyClpSimplex.pyx":86
 *         '''
 *         def __set__(self, obj):
 *             if self.cyLPModel:             # <<<<<<<<<<<<<<
 *                 self.cyLPModel.objective = obj
 *                 o = self.cyLPModel.objective
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "CyLP/cy/CyClpSimplex.pyx":87
 *         def __set__(self, obj):
 *             if self.cyLPModel:
 *                 self.cyLPModel.objective = obj             # <<<<<<<<<<<<<<
 *                 o = self.cyLPModel.objective
 * 
 */
    if (PyObject_SetAttr(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel, __pyx_n_s__objective, __pyx_v_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "CyLP/cy/CyClpSimplex.pyx":88
 *             if self.cyLPModel:
 *                 self.cyLPModel.objective = obj
 *                 o = self.cyLPModel.objective             # <<<<<<<<<<<<<<
 * 
 *                 if isinstance(o, (np.ndarray)):
 */
    __pyx_t_2 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel, __pyx_n_s__objective); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_o = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":90
 *                 o = self.cyLPModel.objective
 * 
 *                 if isinstance(o, (np.ndarray)):             # <<<<<<<<<<<<<<
 *                     self.setObjectiveArray(o.astype(np.double))
 *                 if isinstance(o, (sparse.coo_matrix,
 */
    __pyx_t_2 = ((PyObject *)((PyObject*)__pyx_ptype_5numpy_ndarray));
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "CyLP/cy/CyClpSimplex.pyx":91
 * 
 *                 if isinstance(o, (np.ndarray)):
 *                     self.setObjectiveArray(o.astype(np.double))             # <<<<<<<<<<<<<<
 *                 if isinstance(o, (sparse.coo_matrix,
 *                                                 sparse.csc_matrix,
 */
      __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__setObjectiveArray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_o, __pyx_n_s__astype); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__double); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "CyLP/cy/CyClpSimplex.pyx":92
 *                 if isinstance(o, (np.ndarray)):
 *                     self.setObjectiveArray(o.astype(np.double))
 *                 if isinstance(o, (sparse.coo_matrix,             # <<<<<<<<<<<<<<
 *                                                 sparse.csc_matrix,
 *                                                 sparse.csr_matrix,
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__sparse); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__coo_matrix); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":93
 *                     self.setObjectiveArray(o.astype(np.double))
 *                 if isinstance(o, (sparse.coo_matrix,
 *                                                 sparse.csc_matrix,             # <<<<<<<<<<<<<<
 *                                                 sparse.csr_matrix,
 *                                                 sparse.lil_matrix)):
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__sparse); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__csc_matrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":94
 *                 if isinstance(o, (sparse.coo_matrix,
 *                                                 sparse.csc_matrix,
 *                                                 sparse.csr_matrix,             # <<<<<<<<<<<<<<
 *                                                 sparse.lil_matrix)):
 *                     for i in xrange(self.nVariables):
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__sparse); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__csr_matrix); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":95
 *                                                 sparse.csc_matrix,
 *                                                 sparse.csr_matrix,
 *                                                 sparse.lil_matrix)):             # <<<<<<<<<<<<<<
 *                     for i in xrange(self.nVariables):
 *                         self.setObjectiveCoefficient(i, o[0, i])
 */
    __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__sparse); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__lil_matrix); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_o, ((PyObject *)__pyx_t_5)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (__pyx_t_1) {

      /* "CyLP/cy/CyClpSimplex.pyx":96
 *                                                 sparse.csr_matrix,
 *                                                 sparse.lil_matrix)):
 *                     for i in xrange(self.nVariables):             # <<<<<<<<<<<<<<
 *                         self.setObjectiveCoefficient(i, o[0, i])
 *                     #if not isinstance(o, sparse.coo_matrix):
 */
      __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__nVariables); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      if (PyList_CheckExact(__pyx_t_5) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (PyList_CheckExact(__pyx_t_6)) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++;
        } else if (PyTuple_CheckExact(__pyx_t_6)) {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++;
        } else {
          __pyx_t_5 = __pyx_t_8(__pyx_t_6);
          if (unlikely(!__pyx_t_5)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_5;
        __pyx_t_5 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":97
 *                                                 sparse.lil_matrix)):
 *                     for i in xrange(self.nVariables):
 *                         self.setObjectiveCoefficient(i, o[0, i])             # <<<<<<<<<<<<<<
 *                     #if not isinstance(o, sparse.coo_matrix):
 *                     #    o = o.tocoo()
 */
        __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_3));
        __Pyx_INCREF(__pyx_int_0);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        __Pyx_INCREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        __pyx_t_2 = PyObject_GetItem(__pyx_v_o, ((PyObject *)__pyx_t_3)); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_3));
        __Pyx_INCREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L7;
    }
    __pyx_L7:;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":105
 *                 #       self.cyLPModel.objective.astype(np.double))
 *             else:
 *                 raise Exception('To set the objective function of ' \             # <<<<<<<<<<<<<<
 *                                 'CyClpSimplex set CyLPSimplex.cyLPModel ' \
 *                                 'first.')
 */
    __pyx_t_6 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_4), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.objective.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":108
 *                                 'CyClpSimplex set CyLPSimplex.cyLPModel ' \
 *                                 'first.')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getObjective()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 108);

  /* "CyLP/cy/CyClpSimplex.pyx":109
 *                                 'first.')
 *         def __get__(self):
 *             return <object>self.CppSelf.getObjective()             # <<<<<<<<<<<<<<
 * 
 *     property iteration:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getObjective();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":115
 *         Number of iterations.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.numberIterations()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9iteration___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9iteration___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 115);

  /* "CyLP/cy/CyClpSimplex.pyx":116
 *         '''
 *         def __get__(self):
 *             return self.CppSelf.numberIterations()             # <<<<<<<<<<<<<<
 * 
 *     property nRows:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->numberIterations()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.iteration.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":122
 *         Number of rows, constraints.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.getNumRows()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nRows___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nRows___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 122);

  /* "CyLP/cy/CyClpSimplex.pyx":123
 *         '''
 *         def __get__(self):
 *             return self.CppSelf.getNumRows()             # <<<<<<<<<<<<<<
 * 
 *     property nConstraints:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getNumRows()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.nRows.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":129
 *         Number of constraints, rows.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.getNumRows()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12nConstraints___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12nConstraints___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 129);

  /* "CyLP/cy/CyClpSimplex.pyx":130
 *         '''
 *         def __get__(self):
 *             return self.CppSelf.getNumRows()             # <<<<<<<<<<<<<<
 * 
 *     property nVariables:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getNumRows()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.nConstraints.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":136
 *         Number of variables, columns.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.getNumCols()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10nVariables___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10nVariables___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 136);

  /* "CyLP/cy/CyClpSimplex.pyx":137
 *         '''
 *         def __get__(self):
 *             return self.CppSelf.getNumCols()             # <<<<<<<<<<<<<<
 * 
 *     property nCols:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getNumCols()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.nVariables.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":143
 *         Number of columns, variables.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.getNumCols()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nCols___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nCols___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 143);

  /* "CyLP/cy/CyClpSimplex.pyx":144
 *         '''
 *         def __get__(self):
 *             return self.CppSelf.getNumCols()             # <<<<<<<<<<<<<<
 * 
 *     property matrix:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getNumCols()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.nCols.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":150
 *         The coefficient matrix.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef CppCoinPackedMatrix* cppMat = self.CppSelf.getMatrix()
 *             mat = CyCoinPackedMatrix()
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6matrix___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6matrix___get__(PyObject *__pyx_v_self) {
  ICoinPackedMatrix *__pyx_v_cppMat;
  struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_mat = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 150);

  /* "CyLP/cy/CyClpSimplex.pyx":151
 *         '''
 *         def __get__(self):
 *             cdef CppCoinPackedMatrix* cppMat = self.CppSelf.getMatrix()             # <<<<<<<<<<<<<<
 *             mat = CyCoinPackedMatrix()
 *             mat.CppSelf = cppMat
 */
  __pyx_v_cppMat = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getMatrix();

  /* "CyLP/cy/CyClpSimplex.pyx":152
 *         def __get__(self):
 *             cdef CppCoinPackedMatrix* cppMat = self.CppSelf.getMatrix()
 *             mat = CyCoinPackedMatrix()             # <<<<<<<<<<<<<<
 *             mat.CppSelf = cppMat
 *             return mat
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mat = ((struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":153
 *             cdef CppCoinPackedMatrix* cppMat = self.CppSelf.getMatrix()
 *             mat = CyCoinPackedMatrix()
 *             mat.CppSelf = cppMat             # <<<<<<<<<<<<<<
 *             return mat
 * 
 */
  __pyx_v_mat->CppSelf = __pyx_v_cppMat;

  /* "CyLP/cy/CyClpSimplex.pyx":154
 *             mat = CyCoinPackedMatrix()
 *             mat.CppSelf = cppMat
 *             return mat             # <<<<<<<<<<<<<<
 * 
 *     property constraints:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = ((PyObject *)__pyx_v_mat);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.matrix.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":160
 *         Constraints.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self.cyLPModel:
 *                 raise Exception('No CyClpSimplex cyLPModel.')
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11constraints___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11constraints___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 160);

  /* "CyLP/cy/CyClpSimplex.pyx":161
 *         '''
 *         def __get__(self):
 *             if not self.cyLPModel:             # <<<<<<<<<<<<<<
 *                 raise Exception('No CyClpSimplex cyLPModel.')
 *             else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":162
 *         def __get__(self):
 *             if not self.cyLPModel:
 *                 raise Exception('No CyClpSimplex cyLPModel.')             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.cyLPModel.constraints
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_6), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":164
 *                 raise Exception('No CyClpSimplex cyLPModel.')
 *             else:
 *                 return self.cyLPModel.constraints             # <<<<<<<<<<<<<<
 * 
 *     property variableNames:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel, __pyx_n_s__constraints); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.constraints.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":170
 *         variable names
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.getVariableNames()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13variableNames___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13variableNames___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 170);

  /* "CyLP/cy/CyClpSimplex.pyx":171
 *         '''
 *         def __get__(self):
 *             return self.getVariableNames()             # <<<<<<<<<<<<<<
 * 
 *     property variables:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__getVariableNames); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.variableNames.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":177
 *         Variables.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self.cyLPModel:
 *                 raise Exception('No CyClpSimplex cyLPModel.')
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9variables___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9variables___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 177);

  /* "CyLP/cy/CyClpSimplex.pyx":178
 *         '''
 *         def __get__(self):
 *             if not self.cyLPModel:             # <<<<<<<<<<<<<<
 *                 raise Exception('No CyClpSimplex cyLPModel.')
 *             else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":179
 *         def __get__(self):
 *             if not self.cyLPModel:
 *                 raise Exception('No CyClpSimplex cyLPModel.')             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.cyLPModel.variables
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_7), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":181
 *                 raise Exception('No CyClpSimplex cyLPModel.')
 *             else:
 *                 return self.cyLPModel.variables             # <<<<<<<<<<<<<<
 * 
 * #    def getNumRows(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel, __pyx_n_s__variables); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.variables.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":196
 *         The objective value. Readonly.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.objectiveValue()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14objectiveValue___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14objectiveValue___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 196);

  /* "CyLP/cy/CyClpSimplex.pyx":197
 *         '''
 *         def __get__(self):
 *             return self.CppSelf.objectiveValue()             # <<<<<<<<<<<<<<
 * 
 *     property primalVariableSolution:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->objectiveValue()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.objectiveValue.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":205
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22primalVariableSolution___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22primalVariableSolution___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_v_dimRanges = NULL;
  PyObject *__pyx_v_element = NULL;
  PyObject *__pyx_v_names = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 205);

  /* "CyLP/cy/CyClpSimplex.pyx":208
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 *             ret = <object>self.CppSelf.getPrimalColumnSolution()             # <<<<<<<<<<<<<<
 *             if self.cyLPModel:
 *                 m = self.cyLPModel
 */
  __pyx_t_1 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getPrimalColumnSolution();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = ((PyObject *)__pyx_t_1);

  /* "CyLP/cy/CyClpSimplex.pyx":209
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 *             ret = <object>self.CppSelf.getPrimalColumnSolution()
 *             if self.cyLPModel:             # <<<<<<<<<<<<<<
 *                 m = self.cyLPModel
 *                 inds = m.inds
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":210
 *             ret = <object>self.CppSelf.getPrimalColumnSolution()
 *             if self.cyLPModel:
 *                 m = self.cyLPModel             # <<<<<<<<<<<<<<
 *                 inds = m.inds
 *                 d = {}
 */
    __Pyx_INCREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    __pyx_v_m = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel;

    /* "CyLP/cy/CyClpSimplex.pyx":211
 *             if self.cyLPModel:
 *                 m = self.cyLPModel
 *                 inds = m.inds             # <<<<<<<<<<<<<<
 *                 d = {}
 *                 for v in inds.varIndex.keys():
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__inds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_inds = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":212
 *                 m = self.cyLPModel
 *                 inds = m.inds
 *                 d = {}             # <<<<<<<<<<<<<<
 *                 for v in inds.varIndex.keys():
 *                     d[v] = ret[inds.varIndex[v]]
 */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_v_d = ((PyObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":213
 *                 inds = m.inds
 *                 d = {}
 *                 for v in inds.varIndex.keys():             # <<<<<<<<<<<<<<
 *                     d[v] = ret[inds.varIndex[v]]
 *                     var = m.getVarByName(v)
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__keys); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (PyList_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++;
      } else if (PyTuple_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++;
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF(__pyx_v_v);
      __pyx_v_v = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":214
 *                 d = {}
 *                 for v in inds.varIndex.keys():
 *                     d[v] = ret[inds.varIndex[v]]             # <<<<<<<<<<<<<<
 *                     var = m.getVarByName(v)
 *                     if var.dims:
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyObject_GetItem(__pyx_t_3, __pyx_v_v); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_GetItem(__pyx_v_ret, __pyx_t_7); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PyObject_SetItem(__pyx_v_d, __pyx_v_v, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":215
 *                 for v in inds.varIndex.keys():
 *                     d[v] = ret[inds.varIndex[v]]
 *                     var = m.getVarByName(v)             # <<<<<<<<<<<<<<
 *                     if var.dims:
 *                         d[v] = CyLPSolution()
 */
      __pyx_t_3 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__getVarByName); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      __Pyx_INCREF(__pyx_v_v);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_v);
      __Pyx_GIVEREF(__pyx_v_v);
      __pyx_t_8 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_v_var);
      __pyx_v_var = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":216
 *                     d[v] = ret[inds.varIndex[v]]
 *                     var = m.getVarByName(v)
 *                     if var.dims:             # <<<<<<<<<<<<<<
 *                         d[v] = CyLPSolution()
 *                         dimRanges = [range(i) for i in var.dims]
 */
      __pyx_t_8 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dims); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_2) {

        /* "CyLP/cy/CyClpSimplex.pyx":217
 *                     var = m.getVarByName(v)
 *                     if var.dims:
 *                         d[v] = CyLPSolution()             # <<<<<<<<<<<<<<
 *                         dimRanges = [range(i) for i in var.dims]
 *                         for element in product(*dimRanges):
 */
        __pyx_t_8 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPSolution); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (PyObject_SetItem(__pyx_v_d, __pyx_v_v, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":218
 *                     if var.dims:
 *                         d[v] = CyLPSolution()
 *                         dimRanges = [range(i) for i in var.dims]             # <<<<<<<<<<<<<<
 *                         for element in product(*dimRanges):
 *                             d[v][element] = ret[var.__getitem__(element).indices[0]]
 */
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_7));
        __pyx_t_8 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dims); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        if (PyList_CheckExact(__pyx_t_8) || PyTuple_CheckExact(__pyx_t_8)) {
          __pyx_t_3 = __pyx_t_8; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext;
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        for (;;) {
          if (PyList_CheckExact(__pyx_t_3)) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++;
          } else if (PyTuple_CheckExact(__pyx_t_3)) {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++;
          } else {
            __pyx_t_8 = __pyx_t_10(__pyx_t_3);
            if (unlikely(!__pyx_t_8)) {
              if (PyErr_Occurred()) {
                if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
                else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_8);
          }
          __Pyx_XDECREF(__pyx_v_i);
          __pyx_v_i = __pyx_t_8;
          __pyx_t_8 = 0;
          __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(((PyObject *)__pyx_t_8));
          __Pyx_INCREF(__pyx_v_i);
          PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_i);
          __Pyx_GIVEREF(__pyx_v_i);
          __pyx_t_11 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
          if (unlikely(PyList_Append(__pyx_t_7, (PyObject*)__pyx_t_11))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_INCREF(((PyObject *)__pyx_t_7));
        __Pyx_XDECREF(((PyObject *)__pyx_v_dimRanges));
        __pyx_v_dimRanges = __pyx_t_7;
        __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":219
 *                         d[v] = CyLPSolution()
 *                         dimRanges = [range(i) for i in var.dims]
 *                         for element in product(*dimRanges):             # <<<<<<<<<<<<<<
 *                             d[v][element] = ret[var.__getitem__(element).indices[0]]
 *                 ret = d
 */
        __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__product); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = PySequence_Tuple(((PyObject *)__pyx_v_dimRanges)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_3));
        __pyx_t_11 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
        if (PyList_CheckExact(__pyx_t_11) || PyTuple_CheckExact(__pyx_t_11)) {
          __pyx_t_3 = __pyx_t_11; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        for (;;) {
          if (PyList_CheckExact(__pyx_t_3)) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++;
          } else if (PyTuple_CheckExact(__pyx_t_3)) {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++;
          } else {
            __pyx_t_11 = __pyx_t_10(__pyx_t_3);
            if (unlikely(!__pyx_t_11)) {
              if (PyErr_Occurred()) {
                if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
                else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_11);
          }
          __Pyx_XDECREF(__pyx_v_element);
          __pyx_v_element = __pyx_t_11;
          __pyx_t_11 = 0;

          /* "CyLP/cy/CyClpSimplex.pyx":220
 *                         dimRanges = [range(i) for i in var.dims]
 *                         for element in product(*dimRanges):
 *                             d[v][element] = ret[var.__getitem__(element).indices[0]]             # <<<<<<<<<<<<<<
 *                 ret = d
 *             else:
 */
          __pyx_t_11 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s____getitem__); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(((PyObject *)__pyx_t_7));
          __Pyx_INCREF(__pyx_v_element);
          PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_element);
          __Pyx_GIVEREF(__pyx_v_element);
          __pyx_t_8 = PyObject_Call(__pyx_t_11, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
          __pyx_t_7 = PyObject_GetAttr(__pyx_t_8, __pyx_n_s__indices); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_7, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = PyObject_GetItem(__pyx_v_ret, __pyx_t_8); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyObject_GetItem(__pyx_v_d, __pyx_v_v); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          if (PyObject_SetItem(__pyx_t_8, __pyx_v_element, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L8;
      }
      __pyx_L8:;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":221
 *                         for element in product(*dimRanges):
 *                             d[v][element] = ret[var.__getitem__(element).indices[0]]
 *                 ret = d             # <<<<<<<<<<<<<<
 *             else:
 *                 names = self.variableNames
 */
    __Pyx_INCREF(__pyx_v_d);
    __Pyx_DECREF(__pyx_v_ret);
    __pyx_v_ret = __pyx_v_d;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":223
 *                 ret = d
 *             else:
 *                 names = self.variableNames             # <<<<<<<<<<<<<<
 *                 if names:
 *                     d = CyLPSolution()
 */
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__variableNames); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_names = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":224
 *             else:
 *                 names = self.variableNames
 *                 if names:             # <<<<<<<<<<<<<<
 *                     d = CyLPSolution()
 *                     for i in range(len(names)):
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_names); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":225
 *                 names = self.variableNames
 *                 if names:
 *                     d = CyLPSolution()             # <<<<<<<<<<<<<<
 *                     for i in range(len(names)):
 *                         d[names[i]] = ret[i]
 */
      __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPSolution); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_d = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":226
 *                 if names:
 *                     d = CyLPSolution()
 *                     for i in range(len(names)):             # <<<<<<<<<<<<<<
 *                         d[names[i]] = ret[i]
 *                     ret = d
 */
      __pyx_t_5 = PyObject_Length(__pyx_v_names); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (PyList_CheckExact(__pyx_t_4)) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++;
        } else if (PyTuple_CheckExact(__pyx_t_4)) {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++;
        } else {
          __pyx_t_3 = __pyx_t_6(__pyx_t_4);
          if (unlikely(!__pyx_t_3)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":227
 *                     d = CyLPSolution()
 *                     for i in range(len(names)):
 *                         d[names[i]] = ret[i]             # <<<<<<<<<<<<<<
 *                     ret = d
 *             return ret
 */
        __pyx_t_3 = PyObject_GetItem(__pyx_v_ret, __pyx_v_i); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = PyObject_GetItem(__pyx_v_names, __pyx_v_i); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        if (PyObject_SetItem(__pyx_v_d, __pyx_t_7, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":228
 *                     for i in range(len(names)):
 *                         d[names[i]] = ret[i]
 *                     ret = d             # <<<<<<<<<<<<<<
 *             return ret
 * 
 */
      __Pyx_INCREF(__pyx_v_d);
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_v_d;
      goto __pyx_L13;
    }
    __pyx_L13:;
  }
  __pyx_L5:;

  /* "CyLP/cy/CyClpSimplex.pyx":229
 *                         d[names[i]] = ret[i]
 *                     ret = d
 *             return ret             # <<<<<<<<<<<<<<
 * 
 *     property primalVariableSolutionAll:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.primalVariableSolution.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_dimRanges);
  __Pyx_XDECREF(__pyx_v_element);
  __Pyx_XDECREF(__pyx_v_names);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":237
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25primalVariableSolutionAll___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25primalVariableSolutionAll___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 237);

  /* "CyLP/cy/CyClpSimplex.pyx":240
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 *             return <object>self.CppSelf.getPrimalColumnSolutionAll()             # <<<<<<<<<<<<<<
 * 
 *     property solution:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getPrimalColumnSolutionAll();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":248
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8solution___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8solution___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 248);

  /* "CyLP/cy/CyClpSimplex.pyx":251
 *             #if self.cbcModelExists:
 *             #    return <object>self.cbcModel.getPrimalVariableSolution()
 *             return <object>self.CppSelf.getSolutionRegion()             # <<<<<<<<<<<<<<
 * 
 *     property dualVariableSolution:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getSolutionRegion();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":259
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getDualColumnSolution()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20dualVariableSolution___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20dualVariableSolution___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 259);

  /* "CyLP/cy/CyClpSimplex.pyx":260
 *         '''
 *         def __get__(self):
 *             return <object>self.CppSelf.getDualColumnSolution()             # <<<<<<<<<<<<<<
 * 
 *     property primalConstraintSolution:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getDualColumnSolution();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":268
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getPrimalRowSolution()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24primalConstraintSolution___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24primalConstraintSolution___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 268);

  /* "CyLP/cy/CyClpSimplex.pyx":269
 *         '''
 *         def __get__(self):
 *             return <object>self.CppSelf.getPrimalRowSolution()             # <<<<<<<<<<<<<<
 * 
 *     property dualConstraintSolution:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getPrimalRowSolution();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":277
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getDualRowSolution()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22dualConstraintSolution___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22dualConstraintSolution___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 277);

  /* "CyLP/cy/CyClpSimplex.pyx":278
 *         '''
 *         def __get__(self):
 *             return <object>self.CppSelf.getDualRowSolution()             # <<<<<<<<<<<<<<
 * 
 *     property reducedCosts:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getDualRowSolution();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":286
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.getReducedCosts()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 286);

  /* "CyLP/cy/CyClpSimplex.pyx":287
 *         '''
 *         def __get__(self):
 *             return self.getReducedCosts()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, np.ndarray[np.double_t, ndim=1] rc):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->getReducedCosts(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.reducedCosts.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":289
 *             return self.getReducedCosts()
 * 
 *         def __set__(self, np.ndarray[np.double_t, ndim=1] rc):             # <<<<<<<<<<<<<<
 *             self.CppSelf.setReducedCosts(<double*> rc.data)
 * 
 */

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rc); /*proto*/
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rc) {
  Py_buffer __pyx_bstruct_rc;
  Py_ssize_t __pyx_bstride_0_rc = 0;
  Py_ssize_t __pyx_bshape_0_rc = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__");
  __Pyx_TraceCall("__set__", __pyx_f[0], 289);
  __pyx_bstruct_rc.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rc), __pyx_ptype_5numpy_ndarray, 1, "rc", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_rc, (PyObject*)__pyx_v_rc, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_rc = __pyx_bstruct_rc.strides[0];
  __pyx_bshape_0_rc = __pyx_bstruct_rc.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":290
 * 
 *         def __set__(self, np.ndarray[np.double_t, ndim=1] rc):
 *             self.CppSelf.setReducedCosts(<double*> rc.data)             # <<<<<<<<<<<<<<
 * 
 *     cpdef getReducedCosts(self):
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setReducedCosts(((double *)((PyArrayObject *)__pyx_v_rc)->data));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rc);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.reducedCosts.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rc);
  __pyx_L2:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":292
 *             self.CppSelf.setReducedCosts(<double*> rc.data)
 * 
 *     cpdef getReducedCosts(self):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.getReducedCosts()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_1getReducedCosts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getReducedCosts(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getReducedCosts");
  __Pyx_TraceCall("getReducedCosts", __pyx_f[0], 292);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getReducedCosts); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_1getReducedCosts)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":293
 * 
 *     cpdef getReducedCosts(self):
 *         return <object>self.CppSelf.getReducedCosts()             # <<<<<<<<<<<<<<
 * 
 *     property variablesUpper:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_v_self->CppSelf->getReducedCosts();
  __Pyx_INCREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getReducedCosts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":292
 *             self.CppSelf.setReducedCosts(<double*> rc.data)
 * 
 *     cpdef getReducedCosts(self):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.getReducedCosts()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_1getReducedCosts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_1getReducedCosts[] = "CyClpSimplex.getReducedCosts(self)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_1getReducedCosts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getReducedCosts");
  __Pyx_TraceCall("getReducedCosts", __pyx_f[0], 292);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->getReducedCosts(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getReducedCosts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":301
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getColUpper()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesUpper___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesUpper___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 301);

  /* "CyLP/cy/CyClpSimplex.pyx":302
 *         '''
 *         def __get__(self):
 *             return <object>self.CppSelf.getColUpper()             # <<<<<<<<<<<<<<
 * 
 *     property variablesLower:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getColUpper();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":310
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getColLower()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesLower___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesLower___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 310);

  /* "CyLP/cy/CyClpSimplex.pyx":311
 *         '''
 *         def __get__(self):
 *             return <object>self.CppSelf.getColLower()             # <<<<<<<<<<<<<<
 * 
 *     property constraintsUpper:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getColLower();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":319
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getRowUpper()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsUpper___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsUpper___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 319);

  /* "CyLP/cy/CyClpSimplex.pyx":320
 *         '''
 *         def __get__(self):
 *             return <object>self.CppSelf.getRowUpper()             # <<<<<<<<<<<<<<
 * 
 *     property constraintsLower:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getRowUpper();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":328
 *         :rtype: Numpy array
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <object>self.CppSelf.getRowLower()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsLower___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsLower___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 328);

  /* "CyLP/cy/CyClpSimplex.pyx":329
 *         '''
 *         def __get__(self):
 *             return <object>self.CppSelf.getRowLower()             # <<<<<<<<<<<<<<
 * 
 *     property status:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getRowLower();
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":335
 *         A Numpy array of all the variables' status
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.getStatusArray()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6status___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6status___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 335);

  /* "CyLP/cy/CyClpSimplex.pyx":336
 *         '''
 *         def __get__(self):
 *             return self.getStatusArray()             # <<<<<<<<<<<<<<
 * 
 *     cpdef getStatusArray(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->getStatusArray(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.status.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":338
 *             return self.getStatusArray()
 * 
 *     cpdef getStatusArray(self):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.getStatusArray()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_2getStatusArray(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getStatusArray(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getStatusArray");
  __Pyx_TraceCall("getStatusArray", __pyx_f[0], 338);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getStatusArray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_2getStatusArray)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":339
 * 
 *     cpdef getStatusArray(self):
 *         return <object>self.CppSelf.getStatusArray()             # <<<<<<<<<<<<<<
 * 
 *     property freeOrSuperBasicVarInds:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_v_self->CppSelf->getStatusArray();
  __Pyx_INCREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getStatusArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":338
 *             return self.getStatusArray()
 * 
 *     cpdef getStatusArray(self):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.getStatusArray()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_2getStatusArray(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_2getStatusArray[] = "CyClpSimplex.getStatusArray(self)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_2getStatusArray(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getStatusArray");
  __Pyx_TraceCall("getStatusArray", __pyx_f[0], 338);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->getStatusArray(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getStatusArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":345
 *         The index set of variables that are *free* or *superbasic*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return np.where((status & 7 == 4) | (status & 7 == 0))[0]
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23freeOrSuperBasicVarInds___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23freeOrSuperBasicVarInds___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 345);

  /* "CyLP/cy/CyClpSimplex.pyx":346
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return np.where((status & 7 == 4) | (status & 7 == 0))[0]
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":347
 *         def __get__(self):
 *             status = self.status
 *             return np.where((status & 7 == 4) | (status & 7 == 0))[0]             # <<<<<<<<<<<<<<
 * 
 *     property notBasicOrFixedOrFlaggedVarInds:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__where); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_int_4, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Or(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.freeOrSuperBasicVarInds.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":353
 *         The index set of variables that are not *basic* or *fixed*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return np.where((status & 7 != 1) &
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31notBasicOrFixedOrFlaggedVarInds___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31notBasicOrFixedOrFlaggedVarInds___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 353);

  /* "CyLP/cy/CyClpSimplex.pyx":354
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return np.where((status & 7 != 1) &
 *                             (status & 7 != 5) &
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":355
 *         def __get__(self):
 *             status = self.status
 *             return np.where((status & 7 != 1) &             # <<<<<<<<<<<<<<
 *                             (status & 7 != 5) &
 *                             (status & 64 == 0))[0]
 */
  __Pyx_XDECREF(__pyx_r);

  /* "CyLP/cy/CyClpSimplex.pyx":357
 *             return np.where((status & 7 != 1) &
 *                             (status & 7 != 5) &
 *                             (status & 64 == 0))[0]             # <<<<<<<<<<<<<<
 * 
 *     property varIsFree:
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__where); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":355
 *         def __get__(self):
 *             status = self.status
 *             return np.where((status & 7 != 1) &             # <<<<<<<<<<<<<<
 *                             (status & 7 != 5) &
 *                             (status & 64 == 0))[0]
 */
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_NE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":356
 *             status = self.status
 *             return np.where((status & 7 != 1) &
 *                             (status & 7 != 5) &             # <<<<<<<<<<<<<<
 *                             (status & 64 == 0))[0]
 * 
 */
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_int_5, Py_NE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_And(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":357
 *             return np.where((status & 7 != 1) &
 *                             (status & 7 != 5) &
 *                             (status & 64 == 0))[0]             # <<<<<<<<<<<<<<
 * 
 *     property varIsFree:
 */
  __pyx_t_4 = PyNumber_And(__pyx_v_status, __pyx_int_64); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_And(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.notBasicOrFixedOrFlaggedVarInds.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":363
 *         The index set of variables that are *free*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 == 0)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9varIsFree___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9varIsFree___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 363);

  /* "CyLP/cy/CyClpSimplex.pyx":364
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 == 0)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":365
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 == 0)             # <<<<<<<<<<<<<<
 * 
 *     property varIsBasic:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsFree.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":371
 *         The index set of variables that are *basic*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 == 1)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsBasic___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsBasic___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 371);

  /* "CyLP/cy/CyClpSimplex.pyx":372
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 == 1)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":373
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 == 1)             # <<<<<<<<<<<<<<
 * 
 *     property varIsAtUpperBound:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsBasic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":379
 *         The index set of variables that are at their upper bound.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 == 2)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtUpperBound___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtUpperBound___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 379);

  /* "CyLP/cy/CyClpSimplex.pyx":380
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 == 2)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":381
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 == 2)             # <<<<<<<<<<<<<<
 * 
 *     property varIsAtLowerBound:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_2, Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsAtUpperBound.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":387
 *         The index set of variables that are at their lower bound.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 == 3)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtLowerBound___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtLowerBound___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 387);

  /* "CyLP/cy/CyClpSimplex.pyx":388
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 == 3)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":389
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 == 3)             # <<<<<<<<<<<<<<
 * 
 *     property varIsSuperBasic:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_3, Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsAtLowerBound.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":395
 *         The index set of variables that are *superbasic*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 == 4)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15varIsSuperBasic___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15varIsSuperBasic___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 395);

  /* "CyLP/cy/CyClpSimplex.pyx":396
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 == 4)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":397
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 == 4)             # <<<<<<<<<<<<<<
 * 
 *     property varIsFixed:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_4, Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsSuperBasic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":403
 *         The index set of variables that are *fixed*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 == 5)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsFixed___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsFixed___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 403);

  /* "CyLP/cy/CyClpSimplex.pyx":404
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 == 5)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":405
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 == 5)             # <<<<<<<<<<<<<<
 * 
 *     property varIsFlagged:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_5, Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsFixed.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":411
 *         The index set of variables that are *flagged*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 64 != 0)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12varIsFlagged___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12varIsFlagged___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 411);

  /* "CyLP/cy/CyClpSimplex.pyx":412
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 64 != 0)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":413
 *         def __get__(self):
 *             status = self.status
 *             return (status & 64 != 0)             # <<<<<<<<<<<<<<
 * 
 *     property varNotFree:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_NE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varIsFlagged.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":419
 *         The index set of variables that are NOT *free*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 != 0)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varNotFree___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varNotFree___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 419);

  /* "CyLP/cy/CyClpSimplex.pyx":420
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 != 0)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":421
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 != 0)             # <<<<<<<<<<<<<<
 * 
 *     property varNotBasic:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_NE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotFree.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":427
 *         The index set of variables that are NOT *basic*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 != 1)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotBasic___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotBasic___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 427);

  /* "CyLP/cy/CyClpSimplex.pyx":428
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 != 1)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":429
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 != 1)             # <<<<<<<<<<<<<<
 * 
 *     property varNotAtUpperBound:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_NE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotBasic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":435
 *         The index set of variables that are NOT at their upper bound.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 != 2)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtUpperBound___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtUpperBound___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 435);

  /* "CyLP/cy/CyClpSimplex.pyx":436
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 != 2)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":437
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 != 2)             # <<<<<<<<<<<<<<
 * 
 *     property varNotAtLowerBound:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_2, Py_NE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotAtUpperBound.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":443
 *         The index set of variables that are NOT at their lower bound.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 != 3)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtLowerBound___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtLowerBound___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 443);

  /* "CyLP/cy/CyClpSimplex.pyx":444
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 != 3)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":445
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 != 3)             # <<<<<<<<<<<<<<
 * 
 *     property varNotSuperBasic:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_3, Py_NE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotAtLowerBound.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":451
 *         The index set of variables that are NOT *superbasic*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 != 4)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16varNotSuperBasic___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16varNotSuperBasic___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 451);

  /* "CyLP/cy/CyClpSimplex.pyx":452
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 != 4)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":453
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 != 4)             # <<<<<<<<<<<<<<
 * 
 *     property varNotFixed:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_4, Py_NE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotSuperBasic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":459
 *         The index set of variables that are NOT *fixed*.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 7 != 5)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotFixed___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotFixed___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 459);

  /* "CyLP/cy/CyClpSimplex.pyx":460
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 7 != 5)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":461
 *         def __get__(self):
 *             status = self.status
 *             return (status & 7 != 5)             # <<<<<<<<<<<<<<
 * 
 *     property varNotFlagged:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_5, Py_NE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotFixed.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":467
 *         The index set of variables that are NOT flagged.
 *         '''
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             status = self.status
 *             return (status & 64 == 0)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13varNotFlagged___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13varNotFlagged___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_v_status = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 467);

  /* "CyLP/cy/CyClpSimplex.pyx":468
 *         '''
 *         def __get__(self):
 *             status = self.status             # <<<<<<<<<<<<<<
 *             return (status & 64 == 0)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__status); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":469
 *         def __get__(self):
 *             status = self.status
 *             return (status & 64 == 0)             # <<<<<<<<<<<<<<
 * 
 *     property Hessian:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_And(__pyx_v_status, __pyx_int_64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.varNotFlagged.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":472
 * 
 *     property Hessian:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.Hessian
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 472);

  /* "CyLP/cy/CyClpSimplex.pyx":473
 *     property Hessian:
 *         def __get__(self):
 *             return self.Hessian             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, mat):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->Hessian);
  __pyx_r = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->Hessian;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":475
 *             return self.Hessian
 * 
 *         def __set__(self, mat):             # <<<<<<<<<<<<<<
 *             m = None
 *             try:
 */

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_mat); /*proto*/
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_mat) {
  PyObject *__pyx_v_m = NULL;
  struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_coinMat = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_i = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__");
  __Pyx_TraceCall("__set__", __pyx_f[0], 475);

  /* "CyLP/cy/CyClpSimplex.pyx":476
 * 
 *         def __set__(self, mat):
 *             m = None             # <<<<<<<<<<<<<<
 *             try:
 *                 m = mat.tocoo()
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_m = Py_None;

  /* "CyLP/cy/CyClpSimplex.pyx":477
 *         def __set__(self, mat):
 *             m = None
 *             try:             # <<<<<<<<<<<<<<
 *                 m = mat.tocoo()
 *             except:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "CyLP/cy/CyClpSimplex.pyx":478
 *             m = None
 *             try:
 *                 m = mat.tocoo()             # <<<<<<<<<<<<<<
 *             except:
 *                 raise Exception('Hessian can be set to a matrix that ' \
 */
      __pyx_t_4 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__tocoo); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_v_m);
      __pyx_v_m = __pyx_t_5;
      __pyx_t_5 = 0;
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L12_try_end;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":479
 *             try:
 *                 m = mat.tocoo()
 *             except:             # <<<<<<<<<<<<<<
 *                 raise Exception('Hessian can be set to a matrix that ' \
 *                                             'implements *tocoo* method')
 */
    /*except:*/ {
      __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.Hessian.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);

      /* "CyLP/cy/CyClpSimplex.pyx":480
 *                 m = mat.tocoo()
 *             except:
 *                 raise Exception('Hessian can be set to a matrix that ' \             # <<<<<<<<<<<<<<
 *                                             'implements *tocoo* method')
 *             if m:
 */
      __pyx_t_7 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_9), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L7_except_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6_exception_handled;
    }
    __pyx_L7_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L6_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L12_try_end:;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":482
 *                 raise Exception('Hessian can be set to a matrix that ' \
 *                                             'implements *tocoo* method')
 *             if m:             # <<<<<<<<<<<<<<
 *                 coinMat = CyCoinPackedMatrix(True, m.row, m.col, m.data)
 *                 n = self.nVariables
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_m); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_8) {

    /* "CyLP/cy/CyClpSimplex.pyx":483
 *                                             'implements *tocoo* method')
 *             if m:
 *                 coinMat = CyCoinPackedMatrix(True, m.row, m.col, m.data)             # <<<<<<<<<<<<<<
 *                 n = self.nVariables
 *                 if coinMat.majorDim < n:
 */
    __pyx_t_6 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__row); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__col); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__data); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_9));
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_6 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix)), ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
    __pyx_v_coinMat = ((struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":484
 *             if m:
 *                 coinMat = CyCoinPackedMatrix(True, m.row, m.col, m.data)
 *                 n = self.nVariables             # <<<<<<<<<<<<<<
 *                 if coinMat.majorDim < n:
 *                     for i in xrange(n - coinMat.majorDim):
 */
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__nVariables); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_n = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":485
 *                 coinMat = CyCoinPackedMatrix(True, m.row, m.col, m.data)
 *                 n = self.nVariables
 *                 if coinMat.majorDim < n:             # <<<<<<<<<<<<<<
 *                     for i in xrange(n - coinMat.majorDim):
 *                         coinMat.appendCol()
 */
    __pyx_t_7 = PyObject_GetAttr(((PyObject *)__pyx_v_coinMat), __pyx_n_s__majorDim); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_7, __pyx_v_n, Py_LT); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_8) {

      /* "CyLP/cy/CyClpSimplex.pyx":486
 *                 n = self.nVariables
 *                 if coinMat.majorDim < n:
 *                     for i in xrange(n - coinMat.majorDim):             # <<<<<<<<<<<<<<
 *                         coinMat.appendCol()
 *                 if coinMat.minorDim < n:
 */
      __pyx_t_9 = PyObject_GetAttr(((PyObject *)__pyx_v_coinMat), __pyx_n_s__majorDim); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyNumber_Subtract(__pyx_v_n, __pyx_t_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_9));
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
      if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_9 = __pyx_t_7; __Pyx_INCREF(__pyx_t_9); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_11 = Py_TYPE(__pyx_t_9)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (PyList_CheckExact(__pyx_t_9)) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_9)) break;
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++;
        } else if (PyTuple_CheckExact(__pyx_t_9)) {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++;
        } else {
          __pyx_t_7 = __pyx_t_11(__pyx_t_9);
          if (unlikely(!__pyx_t_7)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":487
 *                 if coinMat.majorDim < n:
 *                     for i in xrange(n - coinMat.majorDim):
 *                         coinMat.appendCol()             # <<<<<<<<<<<<<<
 *                 if coinMat.minorDim < n:
 *                     for i in xrange(n - coinMat.majorDim):
 */
        __pyx_t_7 = PyObject_GetAttr(((PyObject *)__pyx_v_coinMat), __pyx_n_s__appendCol); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L16;
    }
    __pyx_L16:;

    /* "CyLP/cy/CyClpSimplex.pyx":488
 *                     for i in xrange(n - coinMat.majorDim):
 *                         coinMat.appendCol()
 *                 if coinMat.minorDim < n:             # <<<<<<<<<<<<<<
 *                     for i in xrange(n - coinMat.majorDim):
 *                         coinMat.appendRow()
 */
    __pyx_t_9 = PyObject_GetAttr(((PyObject *)__pyx_v_coinMat), __pyx_n_s__minorDim); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_9, __pyx_v_n, Py_LT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_8) {

      /* "CyLP/cy/CyClpSimplex.pyx":489
 *                         coinMat.appendCol()
 *                 if coinMat.minorDim < n:
 *                     for i in xrange(n - coinMat.majorDim):             # <<<<<<<<<<<<<<
 *                         coinMat.appendRow()
 *             self.loadQuadraticObjective(coinMat)
 */
      __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_coinMat), __pyx_n_s__majorDim); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = PyNumber_Subtract(__pyx_v_n, __pyx_t_5); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      if (PyList_CheckExact(__pyx_t_9) || PyTuple_CheckExact(__pyx_t_9)) {
        __pyx_t_5 = __pyx_t_9; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = Py_TYPE(__pyx_t_5)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      for (;;) {
        if (PyList_CheckExact(__pyx_t_5)) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_9); __pyx_t_10++;
        } else if (PyTuple_CheckExact(__pyx_t_5)) {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_9); __pyx_t_10++;
        } else {
          __pyx_t_9 = __pyx_t_11(__pyx_t_5);
          if (unlikely(!__pyx_t_9)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_9);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_9;
        __pyx_t_9 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":490
 *                 if coinMat.minorDim < n:
 *                     for i in xrange(n - coinMat.majorDim):
 *                         coinMat.appendRow()             # <<<<<<<<<<<<<<
 *             self.loadQuadraticObjective(coinMat)
 * 
 */
        __pyx_t_9 = PyObject_GetAttr(((PyObject *)__pyx_v_coinMat), __pyx_n_s__appendRow); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_7 = PyObject_Call(__pyx_t_9, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L19;
    }
    __pyx_L19:;
    goto __pyx_L15;
  }
  __pyx_L15:;

  /* "CyLP/cy/CyClpSimplex.pyx":491
 *                     for i in xrange(n - coinMat.majorDim):
 *                         coinMat.appendRow()
 *             self.loadQuadraticObjective(coinMat)             # <<<<<<<<<<<<<<
 * 
 *     property dualTolerance:
 */
  __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s_10); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(!__pyx_v_coinMat)) { __Pyx_RaiseUnboundLocalError("coinMat"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }__pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_7));
  __Pyx_INCREF(((PyObject *)__pyx_v_coinMat));
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_coinMat));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_coinMat));
  __pyx_t_9 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.Hessian.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF((PyObject *)__pyx_v_coinMat);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":494
 * 
 *     property dualTolerance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.dualTolerance()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 494);

  /* "CyLP/cy/CyClpSimplex.pyx":495
 *     property dualTolerance:
 *         def __get__(self):
 *             return self.CppSelf.dualTolerance()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->dualTolerance()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.dualTolerance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":497
 *             return self.CppSelf.dualTolerance()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *            self.CppSelf.setDualTolerance(value)
 * 
 */

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__");
  __Pyx_TraceCall("__set__", __pyx_f[0], 497);

  /* "CyLP/cy/CyClpSimplex.pyx":498
 * 
 *         def __set__(self, value):
 *            self.CppSelf.setDualTolerance(value)             # <<<<<<<<<<<<<<
 * 
 *     property primalTolerance:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setDualTolerance(__pyx_t_1);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.dualTolerance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":501
 * 
 *     property primalTolerance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.CppSelf.primalTolerance()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_TraceCall("__get__", __pyx_f[0], 501);

  /* "CyLP/cy/CyClpSimplex.pyx":502
 *     property primalTolerance:
 *         def __get__(self):
 *             return self.CppSelf.primalTolerance()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->primalTolerance()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.primalTolerance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":504
 *             return self.CppSelf.primalTolerance()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *            self.CppSelf.setPrimalTolerance(value)
 * 
 */

static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__set__");
  __Pyx_TraceCall("__set__", __pyx_f[0], 504);

  /* "CyLP/cy/CyClpSimplex.pyx":505
 * 
 *         def __set__(self, value):
 *            self.CppSelf.setPrimalTolerance(value)             # <<<<<<<<<<<<<<
 * 
 *     #############################################
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setPrimalTolerance(__pyx_t_1);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.primalTolerance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":511
 *     #############################################
 * 
 *     def getRightHandSide(self, np.ndarray[np.double_t, ndim=1] rhs):             # <<<<<<<<<<<<<<
 *         '''
 *         Take a spare array, ``rhs``, and store the current right-hand-side
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3getRightHandSide(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3getRightHandSide[] = "CyClpSimplex.getRightHandSide(self, ndarray rhs)\n\n        Take a spare array, ``rhs``, and store the current right-hand-side\n        in it.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3getRightHandSide(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  Py_buffer __pyx_bstruct_rhs;
  Py_ssize_t __pyx_bstride_0_rhs = 0;
  Py_ssize_t __pyx_bshape_0_rhs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getRightHandSide");
  __Pyx_TraceCall("getRightHandSide", __pyx_f[0], 511);
  __pyx_bstruct_rhs.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_5numpy_ndarray, 1, "rhs", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_rhs, (PyObject*)__pyx_v_rhs, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_rhs = __pyx_bstruct_rhs.strides[0];
  __pyx_bshape_0_rhs = __pyx_bstruct_rhs.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":516
 *         in it.
 *         '''
 *         self.CppSelf.getRightHandSide(<double*>rhs.data)             # <<<<<<<<<<<<<<
 * 
 *     def getStatusCode(self):
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getRightHandSide(((double *)((PyArrayObject *)__pyx_v_rhs)->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rhs);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getRightHandSide", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rhs);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":518
 *         self.CppSelf.getRightHandSide(<double*>rhs.data)
 * 
 *     def getStatusCode(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Get the probelm status as defined in CLP. Return value could be:
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4getStatusCode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4getStatusCode[] = "CyClpSimplex.getStatusCode(self)\n\n        Get the probelm status as defined in CLP. Return value could be:\n\n        * -1 - unknown e.g. before solve or if postSolve says not optimal\n        * 0 - optimal\n        * 1 - primal infeasible\n        * 2 - dual infeasible\n        * 3 - stopped on iterations or time\n        * 4 - stopped due to errors\n        * 5 - stopped by event handler (virtual int ClpEventHandler::event())\n\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4getStatusCode(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getStatusCode");
  __Pyx_TraceCall("getStatusCode", __pyx_f[0], 518);

  /* "CyLP/cy/CyClpSimplex.pyx":531
 * 
 *         '''
 *         return self.CppSelf.status()             # <<<<<<<<<<<<<<
 * 
 *     def getStatusString(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->status()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getStatusCode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":533
 *         return self.CppSelf.status()
 * 
 *     def getStatusString(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the problem status in string using the code from
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5getStatusString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5getStatusString[] = "CyClpSimplex.getStatusString(self)\n\n        Return the problem status in string using the code from\n        :func:`getStatusCode`\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5getStatusString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getStatusString");
  __Pyx_TraceCall("getStatusString", __pyx_f[0], 533);

  /* "CyLP/cy/CyClpSimplex.pyx":538
 *         :func:`getStatusCode`
 *         '''
 *         return problemStatus[self.getStatusCode()]             # <<<<<<<<<<<<<<
 * 
 *     def setColumnLower(self, ind, val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__problemStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__getStatusCode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getStatusString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":540
 *         return problemStatus[self.getStatusCode()]
 * 
 *     def setColumnLower(self, ind, val):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the lower bound of variable index ``ind`` to ``val``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6setColumnLower(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6setColumnLower[] = "CyClpSimplex.setColumnLower(self, ind, val)\n\n        Set the lower bound of variable index ``ind`` to ``val``.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6setColumnLower(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ind = 0;
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ind,&__pyx_n_s__val,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setColumnLower");
  __Pyx_TraceCall("setColumnLower", __pyx_f[0], 540);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ind);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setColumnLower", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setColumnLower") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ind = values[0];
    __pyx_v_val = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setColumnLower", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setColumnLower", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":544
 *         Set the lower bound of variable index ``ind`` to ``val``.
 *         '''
 *         self.CppSelf.setColumnLower(ind, val)             # <<<<<<<<<<<<<<
 * 
 *     def setColumnUpper(self, ind, val):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_ind); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_val); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setColumnLower(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setColumnLower", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":546
 *         self.CppSelf.setColumnLower(ind, val)
 * 
 *     def setColumnUpper(self, ind, val):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the upper bound of variable index ``ind`` to ``val``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7setColumnUpper(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7setColumnUpper[] = "CyClpSimplex.setColumnUpper(self, ind, val)\n\n        Set the upper bound of variable index ``ind`` to ``val``.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7setColumnUpper(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ind = 0;
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ind,&__pyx_n_s__val,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setColumnUpper");
  __Pyx_TraceCall("setColumnUpper", __pyx_f[0], 546);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ind);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setColumnUpper", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setColumnUpper") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ind = values[0];
    __pyx_v_val = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setColumnUpper", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setColumnUpper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":550
 *         Set the upper bound of variable index ``ind`` to ``val``.
 *         '''
 *         self.CppSelf.setColumnUpper(ind, val)             # <<<<<<<<<<<<<<
 * 
 *     def setRowLower(self, ind, val):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_ind); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_val); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setColumnUpper(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setColumnUpper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":552
 *         self.CppSelf.setColumnUpper(ind, val)
 * 
 *     def setRowLower(self, ind, val):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the lower bound of constraint index ``ind`` to ``val``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8setRowLower(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8setRowLower[] = "CyClpSimplex.setRowLower(self, ind, val)\n\n        Set the lower bound of constraint index ``ind`` to ``val``.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8setRowLower(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ind = 0;
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ind,&__pyx_n_s__val,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setRowLower");
  __Pyx_TraceCall("setRowLower", __pyx_f[0], 552);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ind);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setRowLower", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setRowLower") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ind = values[0];
    __pyx_v_val = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setRowLower", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setRowLower", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":556
 *         Set the lower bound of constraint index ``ind`` to ``val``.
 *         '''
 *         self.CppSelf.setRowLower(ind, val)             # <<<<<<<<<<<<<<
 * 
 *     def setRowUpper(self, ind, val):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_ind); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_val); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setRowLower(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setRowLower", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":558
 *         self.CppSelf.setRowLower(ind, val)
 * 
 *     def setRowUpper(self, ind, val):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the upper bound of constraint index ``ind`` to ``val``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9setRowUpper(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9setRowUpper[] = "CyClpSimplex.setRowUpper(self, ind, val)\n\n        Set the upper bound of constraint index ``ind`` to ``val``.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9setRowUpper(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ind = 0;
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ind,&__pyx_n_s__val,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setRowUpper");
  __Pyx_TraceCall("setRowUpper", __pyx_f[0], 558);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ind);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__val);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setRowUpper", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setRowUpper") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ind = values[0];
    __pyx_v_val = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setRowUpper", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setRowUpper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":562
 *         Set the upper bound of constraint index ``ind`` to ``val``.
 *         '''
 *         self.CppSelf.setRowUpper(ind, val)             # <<<<<<<<<<<<<<
 * 
 *     def useCustomPrimal(self, customPrimal):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_ind); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_val); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setRowUpper(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setRowUpper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":564
 *         self.CppSelf.setRowUpper(ind, val)
 * 
 *     def useCustomPrimal(self, customPrimal):             # <<<<<<<<<<<<<<
 *         '''
 *         Determines if
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10useCustomPrimal(PyObject *__pyx_v_self, PyObject *__pyx_v_customPrimal); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10useCustomPrimal[] = "CyClpSimplex.useCustomPrimal(self, customPrimal)\n\n        Determines if\n        :func:`CyLP.python.pivot.PivotPythonBase.isPivotAcceptable`\n        should be called just before each pivot is performed (right after the\n        entering and leaving variables are obtained.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10useCustomPrimal(PyObject *__pyx_v_self, PyObject *__pyx_v_customPrimal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("useCustomPrimal");
  __Pyx_TraceCall("useCustomPrimal", __pyx_f[0], 564);

  /* "CyLP/cy/CyClpSimplex.pyx":571
 *         entering and leaving variables are obtained.
 *         '''
 *         self.CppSelf.useCustomPrimal(customPrimal)             # <<<<<<<<<<<<<<
 * 
 *     def getUseCustomPrimal(self):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_customPrimal); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->useCustomPrimal(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.useCustomPrimal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":573
 *         self.CppSelf.useCustomPrimal(customPrimal)
 * 
 *     def getUseCustomPrimal(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the value of ``useCustomPrimal``. See :func:`useCustomPrimal`.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11getUseCustomPrimal(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11getUseCustomPrimal[] = "CyClpSimplex.getUseCustomPrimal(self)\n\n        Return the value of ``useCustomPrimal``. See :func:`useCustomPrimal`.\n\n        :rtype: int  :math:`\\in \\{0, 1\\}`\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11getUseCustomPrimal(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getUseCustomPrimal");
  __Pyx_TraceCall("getUseCustomPrimal", __pyx_f[0], 573);

  /* "CyLP/cy/CyClpSimplex.pyx":579
 *         :rtype: int  :math:`\in \{0, 1\}`
 *         '''
 *         return self.CppSelf.getUseCustomPrimal()             # <<<<<<<<<<<<<<
 * 
 *     def flagged(self, varInd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getUseCustomPrimal()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getUseCustomPrimal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":581
 *         return self.CppSelf.getUseCustomPrimal()
 * 
 *     def flagged(self, varInd):             # <<<<<<<<<<<<<<
 *         '''
 *         Returns ``1`` if variable index ``varInd`` is flagged.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12flagged(PyObject *__pyx_v_self, PyObject *__pyx_v_varInd); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12flagged[] = "CyClpSimplex.flagged(self, varInd)\n\n        Returns ``1`` if variable index ``varInd`` is flagged.\n\n        :rtype: int  :math:`\\in \\{0, 1\\}`\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12flagged(PyObject *__pyx_v_self, PyObject *__pyx_v_varInd) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("flagged");
  __Pyx_TraceCall("flagged", __pyx_f[0], 581);

  /* "CyLP/cy/CyClpSimplex.pyx":587
 *         :rtype: int  :math:`\in \{0, 1\}`
 *         '''
 *         return self.CppSelf.flagged(varInd)             # <<<<<<<<<<<<<<
 * 
 *     def setFlagged(self, varInd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_varInd); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->flagged(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.flagged", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":589
 *         return self.CppSelf.flagged(varInd)
 * 
 *     def setFlagged(self, varInd):             # <<<<<<<<<<<<<<
 *         '''
 *         Set variables index ``varInd`` flagged.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13setFlagged(PyObject *__pyx_v_self, PyObject *__pyx_v_varInd); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13setFlagged[] = "CyClpSimplex.setFlagged(self, varInd)\n\n        Set variables index ``varInd`` flagged.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13setFlagged(PyObject *__pyx_v_self, PyObject *__pyx_v_varInd) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setFlagged");
  __Pyx_TraceCall("setFlagged", __pyx_f[0], 589);

  /* "CyLP/cy/CyClpSimplex.pyx":593
 *         Set variables index ``varInd`` flagged.
 *         '''
 *         self.CppSelf.setFlagged(varInd)             # <<<<<<<<<<<<<<
 * 
 * ##    def currentDualTolerance(self):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_varInd); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setFlagged(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setFlagged", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":598
 * ##        return self.CppSelf.currentDualTolerance()
 * ##
 *     def largestDualError(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.largestDualError()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14largestDualError(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14largestDualError[] = "CyClpSimplex.largestDualError(self)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14largestDualError(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("largestDualError");
  __Pyx_TraceCall("largestDualError", __pyx_f[0], 598);

  /* "CyLP/cy/CyClpSimplex.pyx":599
 * ##
 *     def largestDualError(self):
 *         return self.CppSelf.largestDualError()             # <<<<<<<<<<<<<<
 * 
 *     def pivotRow(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->largestDualError()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.largestDualError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":601
 *         return self.CppSelf.largestDualError()
 * 
 *     def pivotRow(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the index of the constraint corresponding to the (basic) leaving
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15pivotRow(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15pivotRow[] = "CyClpSimplex.pivotRow(self)\n\n        Return the index of the constraint corresponding to the (basic) leaving\n        variable.\n\n        :rtype: int\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15pivotRow(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("pivotRow");
  __Pyx_TraceCall("pivotRow", __pyx_f[0], 601);

  /* "CyLP/cy/CyClpSimplex.pyx":608
 *         :rtype: int
 *         '''
 *         return self.CppSelf.pivotRow()             # <<<<<<<<<<<<<<
 * 
 *     def setPivotRow(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->pivotRow()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.pivotRow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":610
 *         return self.CppSelf.pivotRow()
 * 
 *     def setPivotRow(self, v):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the ``v``\ 'th variable of the basis as the leaving variable.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16setPivotRow(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16setPivotRow[] = "CyClpSimplex.setPivotRow(self, v)\n\n        Set the ``v``\\ 'th variable of the basis as the leaving variable.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16setPivotRow(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setPivotRow");
  __Pyx_TraceCall("setPivotRow", __pyx_f[0], 610);

  /* "CyLP/cy/CyClpSimplex.pyx":614
 *         Set the ``v``\ 'th variable of the basis as the leaving variable.
 *         '''
 *         self.CppSelf.setPivotRow(v)             # <<<<<<<<<<<<<<
 * 
 *     def sequenceIn(self):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_v); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setPivotRow(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setPivotRow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":616
 *         self.CppSelf.setPivotRow(v)
 * 
 *     def sequenceIn(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the index of the entering variable.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17sequenceIn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17sequenceIn[] = "CyClpSimplex.sequenceIn(self)\n\n        Return the index of the entering variable.\n\n        :rtype: int\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17sequenceIn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("sequenceIn");
  __Pyx_TraceCall("sequenceIn", __pyx_f[0], 616);

  /* "CyLP/cy/CyClpSimplex.pyx":622
 *         :rtype: int
 *         '''
 *         return self.CppSelf.sequenceIn()             # <<<<<<<<<<<<<<
 * 
 *     def setSequenceIn(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->sequenceIn()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.sequenceIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":624
 *         return self.CppSelf.sequenceIn()
 * 
 *     def setSequenceIn(self, v):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the variable index ``v`` as the entering variable.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18setSequenceIn(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18setSequenceIn[] = "CyClpSimplex.setSequenceIn(self, v)\n\n        Set the variable index ``v`` as the entering variable.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18setSequenceIn(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setSequenceIn");
  __Pyx_TraceCall("setSequenceIn", __pyx_f[0], 624);

  /* "CyLP/cy/CyClpSimplex.pyx":628
 *         Set the variable index ``v`` as the entering variable.
 *         '''
 *         self.CppSelf.setSequenceIn(v)             # <<<<<<<<<<<<<<
 * 
 * ##    def dualTolerance(self):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_v); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setSequenceIn(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setSequenceIn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":638
 * ##        return self.CppSelf.dualTolerance()
 * 
 *     cdef double* rowLower(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the lower bounds of the constraints as a double*.
 */

static double *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_rowLower(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("rowLower");
  __Pyx_TraceCall("rowLower", __pyx_f[0], 638);

  /* "CyLP/cy/CyClpSimplex.pyx":643
 *         This can be used only in Cython.
 *         '''
 *         return self.CppSelf.rowLower()             # <<<<<<<<<<<<<<
 * 
 *     cdef double* rowUpper(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->rowLower();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":645
 *         return self.CppSelf.rowLower()
 * 
 *     cdef double* rowUpper(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the upper bounds of the constraints as a double*.
 */

static double *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_rowUpper(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("rowUpper");
  __Pyx_TraceCall("rowUpper", __pyx_f[0], 645);

  /* "CyLP/cy/CyClpSimplex.pyx":650
 *         This can be used only in Cython.
 *         '''
 *         return self.CppSelf.rowUpper()             # <<<<<<<<<<<<<<
 * 
 *     def getVariableNames(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->rowUpper();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":652
 *         return self.CppSelf.rowUpper()
 * 
 *     def getVariableNames(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the variable name. (e.g. that was set in the mps file)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_19getVariableNames(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_19getVariableNames[] = "CyClpSimplex.getVariableNames(self)\n\n        Return the variable name. (e.g. that was set in the mps file)\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_19getVariableNames(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::vector<std::string> __pyx_v_names;
  PyObject *__pyx_v_ret = NULL;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getVariableNames");
  __Pyx_TraceCall("getVariableNames", __pyx_f[0], 652);

  /* "CyLP/cy/CyClpSimplex.pyx":656
 *         Return the variable name. (e.g. that was set in the mps file)
 *         '''
 *         cdef vector[string] names = self.CppSelf.getVariableNames()             # <<<<<<<<<<<<<<
 *         ret = []
 *         for i in range(names.size()):
 */
  __pyx_v_names = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getVariableNames();

  /* "CyLP/cy/CyClpSimplex.pyx":657
 *         '''
 *         cdef vector[string] names = self.CppSelf.getVariableNames()
 *         ret = []             # <<<<<<<<<<<<<<
 *         for i in range(names.size()):
 *             ret.append(names[i].c_str())
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":658
 *         cdef vector[string] names = self.CppSelf.getVariableNames()
 *         ret = []
 *         for i in range(names.size()):             # <<<<<<<<<<<<<<
 *             ret.append(names[i].c_str())
 *         return ret
 */
  __pyx_t_2 = __pyx_v_names.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "CyLP/cy/CyClpSimplex.pyx":659
 *         ret = []
 *         for i in range(names.size()):
 *             ret.append(names[i].c_str())             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    if (unlikely(((PyObject *)__pyx_v_ret) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = PyBytes_FromString((__pyx_v_names[__pyx_v_i]).c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_4 = PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":660
 *         for i in range(names.size()):
 *             ret.append(names[i].c_str())
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     cpdef setVariableName(self, varInd, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getVariableNames", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":662
 *         return ret
 * 
 *     cpdef setVariableName(self, varInd, name):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the name of variable index ``varInd`` to ``name``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20setVariableName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setVariableName(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_varInd, PyObject *__pyx_v_name, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setVariableName");
  __Pyx_TraceCall("setVariableName", __pyx_f[0], 662);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__setVariableName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20setVariableName)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_varInd);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_varInd);
      __Pyx_GIVEREF(__pyx_v_varInd);
      __Pyx_INCREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
      __Pyx_GIVEREF(__pyx_v_name);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":672
 * 
 *         '''
 *         self.CppSelf.setVariableName(varInd, name)             # <<<<<<<<<<<<<<
 * 
 *     cpdef setConstraintName(self, constInd, name):
 */
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_varInd); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = PyBytes_AsString(__pyx_v_name); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setVariableName(__pyx_t_4, __pyx_t_5);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setVariableName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":662
 *         return ret
 * 
 *     cpdef setVariableName(self, varInd, name):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the name of variable index ``varInd`` to ``name``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20setVariableName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20setVariableName[] = "CyClpSimplex.setVariableName(self, varInd, name)\n\n        Set the name of variable index ``varInd`` to ``name``.\n\n        :arg varInd: variable index\n        :type varInd: integer\n        :arg name: desired name for the variable\n        :type name: string\n\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20setVariableName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_varInd = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__varInd,&__pyx_n_s__name,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setVariableName");
  __Pyx_TraceCall("setVariableName", __pyx_f[0], 662);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__varInd);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setVariableName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setVariableName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_varInd = values[0];
    __pyx_v_name = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setVariableName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setVariableName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->setVariableName(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_varInd, __pyx_v_name, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setVariableName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":674
 *         self.CppSelf.setVariableName(varInd, name)
 * 
 *     cpdef setConstraintName(self, constInd, name):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the name of constraint index ``constInd`` to ``name``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_21setConstraintName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setConstraintName(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_constInd, PyObject *__pyx_v_name, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setConstraintName");
  __Pyx_TraceCall("setConstraintName", __pyx_f[0], 674);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__setConstraintName); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_21setConstraintName)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_constInd);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_constInd);
      __Pyx_GIVEREF(__pyx_v_constInd);
      __Pyx_INCREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
      __Pyx_GIVEREF(__pyx_v_name);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":684
 * 
 *         '''
 *         self.CppSelf.setConstraintName(constInd, name)             # <<<<<<<<<<<<<<
 * 
 *     cdef int* pivotVariable(self):
 */
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_constInd); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = PyBytes_AsString(__pyx_v_name); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->CppSelf->setConstraintName(__pyx_t_4, __pyx_t_5);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setConstraintName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":674
 *         self.CppSelf.setVariableName(varInd, name)
 * 
 *     cpdef setConstraintName(self, constInd, name):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the name of constraint index ``constInd`` to ``name``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_21setConstraintName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_21setConstraintName[] = "CyClpSimplex.setConstraintName(self, constInd, name)\n\n        Set the name of constraint index ``constInd`` to ``name``.\n\n        :arg constInd: constraint index\n        :type constInd: integer\n        :arg name: desired name for the constraint\n        :type name: string\n\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_21setConstraintName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_constInd = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__constInd,&__pyx_n_s__name,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setConstraintName");
  __Pyx_TraceCall("setConstraintName", __pyx_f[0], 674);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__constInd);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConstraintName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setConstraintName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_constInd = values[0];
    __pyx_v_name = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setConstraintName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setConstraintName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->setConstraintName(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_constInd, __pyx_v_name, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setConstraintName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":686
 *         self.CppSelf.setConstraintName(constInd, name)
 * 
 *     cdef int* pivotVariable(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the index set of the basic variables.
 */

static int *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_pivotVariable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("pivotVariable");
  __Pyx_TraceCall("pivotVariable", __pyx_f[0], 686);

  /* "CyLP/cy/CyClpSimplex.pyx":692
 *         :rtype: int*
 *         '''
 *         return self.CppSelf.pivotVariable()             # <<<<<<<<<<<<<<
 * 
 *     cpdef  getPivotVariable(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->pivotVariable();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":694
 *         return self.CppSelf.pivotVariable()
 * 
 *     cpdef  getPivotVariable(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the index set of the basic variables.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22getPivotVariable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getPivotVariable(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getPivotVariable");
  __Pyx_TraceCall("getPivotVariable", __pyx_f[0], 694);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getPivotVariable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22getPivotVariable)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":700
 *         :rtype: Numpy array
 *         '''
 *         return <object>self.CppSelf.getPivotVariable()             # <<<<<<<<<<<<<<
 * 
 *     cpdef getVarStatus(self, int sequence):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_v_self->CppSelf->getPivotVariable();
  __Pyx_INCREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getPivotVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":694
 *         return self.CppSelf.pivotVariable()
 * 
 *     cpdef  getPivotVariable(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Return the index set of the basic variables.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22getPivotVariable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22getPivotVariable[] = "CyClpSimplex.getPivotVariable(self)\n\n        Return the index set of the basic variables.\n\n        :rtype: Numpy array\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22getPivotVariable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getPivotVariable");
  __Pyx_TraceCall("getPivotVariable", __pyx_f[0], 694);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->getPivotVariable(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getPivotVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":702
 *         return <object>self.CppSelf.getPivotVariable()
 * 
 *     cpdef getVarStatus(self, int sequence):             # <<<<<<<<<<<<<<
 *         '''
 *         gets the status of a variable
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23getVarStatus(PyObject *__pyx_v_self, PyObject *__pyx_arg_sequence); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getVarStatus(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_v_sequence, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getVarStatus");
  __Pyx_TraceCall("getVarStatus", __pyx_f[0], 702);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getVarStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23getVarStatus)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_sequence); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":715
 *         :rtype: int
 *         '''
 *         return self.CppSelf.getStatus(sequence)             # <<<<<<<<<<<<<<
 * 
 *     def setColumnUpperArray(self, np.ndarray[np.double_t, ndim=1] columnUpper):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->CppSelf->getStatus(__pyx_v_sequence)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getVarStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":702
 *         return <object>self.CppSelf.getPivotVariable()
 * 
 *     cpdef getVarStatus(self, int sequence):             # <<<<<<<<<<<<<<
 *         '''
 *         gets the status of a variable
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23getVarStatus(PyObject *__pyx_v_self, PyObject *__pyx_arg_sequence); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23getVarStatus[] = "CyClpSimplex.getVarStatus(self, int sequence)\n\n        gets the status of a variable\n\n        * free : 0\n        * basic : 1\n        * atUpperBound : 2\n        * atLowerBound : 3\n        * superBasic : 4\n        * fixed : 5\n\n        :rtype: int\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23getVarStatus(PyObject *__pyx_v_self, PyObject *__pyx_arg_sequence) {
  int __pyx_v_sequence;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getVarStatus");
  __Pyx_TraceCall("getVarStatus", __pyx_f[0], 702);
  assert(__pyx_arg_sequence); {
    __pyx_v_sequence = __Pyx_PyInt_AsInt(__pyx_arg_sequence); if (unlikely((__pyx_v_sequence == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getVarStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->getVarStatus(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_sequence, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getVarStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":717
 *         return self.CppSelf.getStatus(sequence)
 * 
 *     def setColumnUpperArray(self, np.ndarray[np.double_t, ndim=1] columnUpper):             # <<<<<<<<<<<<<<
 *         self.CppSelf.setColumnUpperArray(<double*>columnUpper.data)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24setColumnUpperArray(PyObject *__pyx_v_self, PyObject *__pyx_v_columnUpper); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24setColumnUpperArray[] = "CyClpSimplex.setColumnUpperArray(self, ndarray columnUpper)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24setColumnUpperArray(PyObject *__pyx_v_self, PyObject *__pyx_v_columnUpper) {
  Py_buffer __pyx_bstruct_columnUpper;
  Py_ssize_t __pyx_bstride_0_columnUpper = 0;
  Py_ssize_t __pyx_bshape_0_columnUpper = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setColumnUpperArray");
  __Pyx_TraceCall("setColumnUpperArray", __pyx_f[0], 717);
  __pyx_bstruct_columnUpper.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columnUpper), __pyx_ptype_5numpy_ndarray, 1, "columnUpper", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_columnUpper, (PyObject*)__pyx_v_columnUpper, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_columnUpper = __pyx_bstruct_columnUpper.strides[0];
  __pyx_bshape_0_columnUpper = __pyx_bstruct_columnUpper.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":718
 * 
 *     def setColumnUpperArray(self, np.ndarray[np.double_t, ndim=1] columnUpper):
 *         self.CppSelf.setColumnUpperArray(<double*>columnUpper.data)             # <<<<<<<<<<<<<<
 * 
 *     def setColumnLowerArray(self, np.ndarray[np.double_t, ndim=1] columnLower):
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setColumnUpperArray(((double *)((PyArrayObject *)__pyx_v_columnUpper)->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columnUpper);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setColumnUpperArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columnUpper);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":720
 *         self.CppSelf.setColumnUpperArray(<double*>columnUpper.data)
 * 
 *     def setColumnLowerArray(self, np.ndarray[np.double_t, ndim=1] columnLower):             # <<<<<<<<<<<<<<
 *         self.CppSelf.setColumnLowerArray(<double*>columnLower.data)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25setColumnLowerArray(PyObject *__pyx_v_self, PyObject *__pyx_v_columnLower); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25setColumnLowerArray[] = "CyClpSimplex.setColumnLowerArray(self, ndarray columnLower)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25setColumnLowerArray(PyObject *__pyx_v_self, PyObject *__pyx_v_columnLower) {
  Py_buffer __pyx_bstruct_columnLower;
  Py_ssize_t __pyx_bstride_0_columnLower = 0;
  Py_ssize_t __pyx_bshape_0_columnLower = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setColumnLowerArray");
  __Pyx_TraceCall("setColumnLowerArray", __pyx_f[0], 720);
  __pyx_bstruct_columnLower.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columnLower), __pyx_ptype_5numpy_ndarray, 1, "columnLower", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_columnLower, (PyObject*)__pyx_v_columnLower, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_columnLower = __pyx_bstruct_columnLower.strides[0];
  __pyx_bshape_0_columnLower = __pyx_bstruct_columnLower.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":721
 * 
 *     def setColumnLowerArray(self, np.ndarray[np.double_t, ndim=1] columnLower):
 *         self.CppSelf.setColumnLowerArray(<double*>columnLower.data)             # <<<<<<<<<<<<<<
 * 
 *     def setRowUpperArray(self, np.ndarray[np.double_t, ndim=1] rowUpper):
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setColumnLowerArray(((double *)((PyArrayObject *)__pyx_v_columnLower)->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columnLower);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setColumnLowerArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columnLower);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":723
 *         self.CppSelf.setColumnLowerArray(<double*>columnLower.data)
 * 
 *     def setRowUpperArray(self, np.ndarray[np.double_t, ndim=1] rowUpper):             # <<<<<<<<<<<<<<
 *         self.CppSelf.setRowUpperArray(<double*>rowUpper.data)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_26setRowUpperArray(PyObject *__pyx_v_self, PyObject *__pyx_v_rowUpper); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_26setRowUpperArray[] = "CyClpSimplex.setRowUpperArray(self, ndarray rowUpper)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_26setRowUpperArray(PyObject *__pyx_v_self, PyObject *__pyx_v_rowUpper) {
  Py_buffer __pyx_bstruct_rowUpper;
  Py_ssize_t __pyx_bstride_0_rowUpper = 0;
  Py_ssize_t __pyx_bshape_0_rowUpper = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setRowUpperArray");
  __Pyx_TraceCall("setRowUpperArray", __pyx_f[0], 723);
  __pyx_bstruct_rowUpper.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowUpper), __pyx_ptype_5numpy_ndarray, 1, "rowUpper", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_rowUpper, (PyObject*)__pyx_v_rowUpper, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_rowUpper = __pyx_bstruct_rowUpper.strides[0];
  __pyx_bshape_0_rowUpper = __pyx_bstruct_rowUpper.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":724
 * 
 *     def setRowUpperArray(self, np.ndarray[np.double_t, ndim=1] rowUpper):
 *         self.CppSelf.setRowUpperArray(<double*>rowUpper.data)             # <<<<<<<<<<<<<<
 * 
 *     def setRowLowerArray(self, np.ndarray[np.double_t, ndim=1] rowLower):
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setRowUpperArray(((double *)((PyArrayObject *)__pyx_v_rowUpper)->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowUpper);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setRowUpperArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowUpper);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":726
 *         self.CppSelf.setRowUpperArray(<double*>rowUpper.data)
 * 
 *     def setRowLowerArray(self, np.ndarray[np.double_t, ndim=1] rowLower):             # <<<<<<<<<<<<<<
 *         self.CppSelf.setRowLowerArray(<double*>rowLower.data)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_27setRowLowerArray(PyObject *__pyx_v_self, PyObject *__pyx_v_rowLower); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_27setRowLowerArray[] = "CyClpSimplex.setRowLowerArray(self, ndarray rowLower)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_27setRowLowerArray(PyObject *__pyx_v_self, PyObject *__pyx_v_rowLower) {
  Py_buffer __pyx_bstruct_rowLower;
  Py_ssize_t __pyx_bstride_0_rowLower = 0;
  Py_ssize_t __pyx_bshape_0_rowLower = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setRowLowerArray");
  __Pyx_TraceCall("setRowLowerArray", __pyx_f[0], 726);
  __pyx_bstruct_rowLower.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowLower), __pyx_ptype_5numpy_ndarray, 1, "rowLower", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_rowLower, (PyObject*)__pyx_v_rowLower, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_rowLower = __pyx_bstruct_rowLower.strides[0];
  __pyx_bshape_0_rowLower = __pyx_bstruct_rowLower.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":727
 * 
 *     def setRowLowerArray(self, np.ndarray[np.double_t, ndim=1] rowLower):
 *         self.CppSelf.setRowLowerArray(<double*>rowLower.data)             # <<<<<<<<<<<<<<
 * 
 *     def setObjectiveArray(self, np.ndarray[np.double_t, ndim=1] objective):
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setRowLowerArray(((double *)((PyArrayObject *)__pyx_v_rowLower)->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowLower);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setRowLowerArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowLower);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":729
 *         self.CppSelf.setRowLowerArray(<double*>rowLower.data)
 * 
 *     def setObjectiveArray(self, np.ndarray[np.double_t, ndim=1] objective):             # <<<<<<<<<<<<<<
 *         self.CppSelf.setObjectiveArray(<double*>objective.data, len(objective))
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_28setObjectiveArray(PyObject *__pyx_v_self, PyObject *__pyx_v_objective); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_28setObjectiveArray[] = "CyClpSimplex.setObjectiveArray(self, ndarray objective)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_28setObjectiveArray(PyObject *__pyx_v_self, PyObject *__pyx_v_objective) {
  Py_buffer __pyx_bstruct_objective;
  Py_ssize_t __pyx_bstride_0_objective = 0;
  Py_ssize_t __pyx_bshape_0_objective = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setObjectiveArray");
  __Pyx_TraceCall("setObjectiveArray", __pyx_f[0], 729);
  __pyx_bstruct_objective.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_objective), __pyx_ptype_5numpy_ndarray, 1, "objective", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_objective, (PyObject*)__pyx_v_objective, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_objective = __pyx_bstruct_objective.strides[0];
  __pyx_bshape_0_objective = __pyx_bstruct_objective.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":730
 * 
 *     def setObjectiveArray(self, np.ndarray[np.double_t, ndim=1] objective):
 *         self.CppSelf.setObjectiveArray(<double*>objective.data, len(objective))             # <<<<<<<<<<<<<<
 * 
 *     cdef double* primalColumnSolution(self):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_objective); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setObjectiveArray(((double *)((PyArrayObject *)__pyx_v_objective)->data), __pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_objective);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setObjectiveArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_objective);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":732
 *         self.CppSelf.setObjectiveArray(<double*>objective.data, len(objective))
 * 
 *     cdef double* primalColumnSolution(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.primalColumnSolution()
 * 
 */

static double *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalColumnSolution(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("primalColumnSolution");
  __Pyx_TraceCall("primalColumnSolution", __pyx_f[0], 732);

  /* "CyLP/cy/CyClpSimplex.pyx":733
 * 
 *     cdef double* primalColumnSolution(self):
 *         return self.CppSelf.primalColumnSolution()             # <<<<<<<<<<<<<<
 * 
 *     cdef double* dualColumnSolution(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->primalColumnSolution();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":735
 *         return self.CppSelf.primalColumnSolution()
 * 
 *     cdef double* dualColumnSolution(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.dualColumnSolution()
 * 
 */

static double *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualColumnSolution(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("dualColumnSolution");
  __Pyx_TraceCall("dualColumnSolution", __pyx_f[0], 735);

  /* "CyLP/cy/CyClpSimplex.pyx":736
 * 
 *     cdef double* dualColumnSolution(self):
 *         return self.CppSelf.dualColumnSolution()             # <<<<<<<<<<<<<<
 * 
 *     cdef double* primalRowSolution(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->dualColumnSolution();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":738
 *         return self.CppSelf.dualColumnSolution()
 * 
 *     cdef double* primalRowSolution(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.primalRowSolution()
 * 
 */

static double *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalRowSolution(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("primalRowSolution");
  __Pyx_TraceCall("primalRowSolution", __pyx_f[0], 738);

  /* "CyLP/cy/CyClpSimplex.pyx":739
 * 
 *     cdef double* primalRowSolution(self):
 *         return self.CppSelf.primalRowSolution()             # <<<<<<<<<<<<<<
 * 
 *     cdef double* dualRowSolution(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->primalRowSolution();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":741
 *         return self.CppSelf.primalRowSolution()
 * 
 *     cdef double* dualRowSolution(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.dualRowSolution()
 * 
 */

static double *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualRowSolution(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("dualRowSolution");
  __Pyx_TraceCall("dualRowSolution", __pyx_f[0], 741);

  /* "CyLP/cy/CyClpSimplex.pyx":742
 * 
 *     cdef double* dualRowSolution(self):
 *         return self.CppSelf.dualRowSolution()             # <<<<<<<<<<<<<<
 * 
 *     #############################################
 */
  __pyx_r = __pyx_v_self->CppSelf->dualRowSolution();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":748
 *     #############################################
 * 
 *     def initialSolve(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Run CLP's initialSolve. It does a presolve and uses primal or dual
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_29initialSolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_29initialSolve[] = "CyClpSimplex.initialSolve(self)\n\n        Run CLP's initialSolve. It does a presolve and uses primal or dual\n        Simplex to solve a problem.\n\n        **Usage example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.initialSolve()\n        'optimal'\n        >>> round(s.objectiveValue, 4)\n        2520.5717\n\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_29initialSolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("initialSolve");
  __Pyx_TraceCall("initialSolve", __pyx_f[0], 748);

  /* "CyLP/cy/CyClpSimplex.pyx":766
 * 
 *         '''
 *         return problemStatus[self.CppSelf.initialSolve()]             # <<<<<<<<<<<<<<
 * 
 *     def initialPrimalSolve(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__problemStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->initialSolve();
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_2, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.initialSolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":768
 *         return problemStatus[self.CppSelf.initialSolve()]
 * 
 *     def initialPrimalSolve(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Run CLP's initalPrimalSolve. The same as :func:`initalSolve` but force
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_30initialPrimalSolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_30initialPrimalSolve[] = "CyClpSimplex.initialPrimalSolve(self)\n\n        Run CLP's initalPrimalSolve. The same as :func:`initalSolve` but force\n        the use of primal Simplex.\n\n        **Usage example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.initialPrimalSolve()\n        'optimal'\n        >>> round(s.objectiveValue, 4)\n        2520.5717\n\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_30initialPrimalSolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("initialPrimalSolve");
  __Pyx_TraceCall("initialPrimalSolve", __pyx_f[0], 768);

  /* "CyLP/cy/CyClpSimplex.pyx":786
 * 
 *         '''
 *         return problemStatus[self.CppSelf.initialPrimalSolve()]             # <<<<<<<<<<<<<<
 * 
 *     def initialDualSolve(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__problemStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->initialPrimalSolve();
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_2, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.initialPrimalSolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":788
 *         return problemStatus[self.CppSelf.initialPrimalSolve()]
 * 
 *     def initialDualSolve(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Run CLP's initalPrimalSolve. The same as :func:`initalSolve` but force
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31initialDualSolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31initialDualSolve[] = "CyClpSimplex.initialDualSolve(self)\n\n        Run CLP's initalPrimalSolve. The same as :func:`initalSolve` but force\n        the use of dual Simplex.\n\n        **Usage example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.initialDualSolve()\n        'optimal'\n        >>> round(s.objectiveValue, 4)\n        2520.5717\n\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31initialDualSolve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("initialDualSolve");
  __Pyx_TraceCall("initialDualSolve", __pyx_f[0], 788);

  /* "CyLP/cy/CyClpSimplex.pyx":806
 * 
 *         '''
 *         return problemStatus[self.CppSelf.initialDualSolve()]             # <<<<<<<<<<<<<<
 * 
 *     def __iadd__(self, cons):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__problemStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->initialDualSolve();
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_2, sizeof(int), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.initialDualSolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":808
 *         return problemStatus[self.CppSelf.initialDualSolve()]
 * 
 *     def __iadd__(self, cons):             # <<<<<<<<<<<<<<
 *         self.addConstraint(cons)
 *         return self
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_32__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_cons); /*proto*/
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_32__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_cons) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__iadd__");
  __Pyx_TraceCall("__iadd__", __pyx_f[0], 808);

  /* "CyLP/cy/CyClpSimplex.pyx":809
 * 
 *     def __iadd__(self, cons):
 *         self.addConstraint(cons)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__addConstraint); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_cons);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_cons);
  __Pyx_GIVEREF(__pyx_v_cons);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":810
 *     def __iadd__(self, cons):
 *         self.addConstraint(cons)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def addConstraint(self, cons, name=''):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.__iadd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":812
 *         return self
 * 
 *     def addConstraint(self, cons, name=''):             # <<<<<<<<<<<<<<
 *         '''
 *         Adds constraints ``cons``  to the problem. Example for the value
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_33addConstraint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_33addConstraint[] = "CyClpSimplex.addConstraint(self, cons, name='')\n\n        Adds constraints ``cons``  to the problem. Example for the value\n        of ``cons`` is ``0 <= A * x <= b`` where ``A`` is a Numpy matrix and\n        b is a :py:class:`CyLPArray`.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_33addConstraint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cons = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__cons,&__pyx_n_s__name,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("addConstraint");
  __Pyx_TraceCall("addConstraint", __pyx_f[0], 812);
  {
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_kp_s_11);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cons);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addConstraint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cons = values[0];
    __pyx_v_name = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addConstraint", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 812; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":818
 *         b is a :py:class:`CyLPArray`.
 *         '''
 *         if self.cyLPModel:             # <<<<<<<<<<<<<<
 *             self.cyLPModel.addConstraint(cons, name)
 *             self.loadFromCyLPModel(self.cyLPModel)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "CyLP/cy/CyClpSimplex.pyx":819
 *         '''
 *         if self.cyLPModel:
 *             self.cyLPModel.addConstraint(cons, name)             # <<<<<<<<<<<<<<
 *             self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 */
    __pyx_t_2 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel, __pyx_n_s__addConstraint); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_v_cons);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_cons);
    __Pyx_GIVEREF(__pyx_v_cons);
    __Pyx_INCREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":820
 *         if self.cyLPModel:
 *             self.cyLPModel.addConstraint(cons, name)
 *             self.loadFromCyLPModel(self.cyLPModel)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception('To add a constraint you must set ' \
 */
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__loadFromCyLPModel); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    __Pyx_GIVEREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":822
 *             self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 *             raise Exception('To add a constraint you must set ' \             # <<<<<<<<<<<<<<
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_13), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":825
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 *     def removeConstraint(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         Removes constraint named ``name`` from the problem.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_34removeConstraint(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_34removeConstraint[] = "CyClpSimplex.removeConstraint(self, name)\n\n        Removes constraint named ``name`` from the problem.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_34removeConstraint(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("removeConstraint");
  __Pyx_TraceCall("removeConstraint", __pyx_f[0], 825);

  /* "CyLP/cy/CyClpSimplex.pyx":829
 *         Removes constraint named ``name`` from the problem.
 *         '''
 *         if self.cyLPModel:             # <<<<<<<<<<<<<<
 *             self.cyLPModel.removeConstraint(name)
 *             self.loadFromCyLPModel(self.cyLPModel)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "CyLP/cy/CyClpSimplex.pyx":830
 *         '''
 *         if self.cyLPModel:
 *             self.cyLPModel.removeConstraint(name)             # <<<<<<<<<<<<<<
 *             self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 */
    __pyx_t_2 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel, __pyx_n_s__removeConstraint); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":831
 *         if self.cyLPModel:
 *             self.cyLPModel.removeConstraint(name)
 *             self.loadFromCyLPModel(self.cyLPModel)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception('To remove a constraint you must set ' \
 */
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__loadFromCyLPModel); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    __Pyx_GIVEREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":833
 *             self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 *             raise Exception('To remove a constraint you must set ' \             # <<<<<<<<<<<<<<
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_15), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.removeConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":836
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 *     def addVariable(self, varname, dim, isInt=False):             # <<<<<<<<<<<<<<
 *         '''
 *         Add variable ``var`` to the problem.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_35addVariable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_35addVariable[] = "CyClpSimplex.addVariable(self, varname, dim, isInt=False)\n\n        Add variable ``var`` to the problem.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_35addVariable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_varname = 0;
  PyObject *__pyx_v_dim = 0;
  PyObject *__pyx_v_isInt = 0;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__varname,&__pyx_n_s__dim,&__pyx_n_s__isInt,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("addVariable");
  __Pyx_TraceCall("addVariable", __pyx_f[0], 836);
  {
    PyObject* values[3] = {0,0,0};
    values[2] = __pyx_k_16;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__varname);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dim);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariable", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__isInt);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addVariable") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_varname = values[0];
    __pyx_v_dim = values[1];
    __pyx_v_isInt = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addVariable", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":840
 *         Add variable ``var`` to the problem.
 *         '''
 *         if not self.cyLPModel:             # <<<<<<<<<<<<<<
 *             self.cyLPModel = CyLPModel()
 *         var = self.cyLPModel.addVariable(varname, dim, isInt)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":841
 *         '''
 *         if not self.cyLPModel:
 *             self.cyLPModel = CyLPModel()             # <<<<<<<<<<<<<<
 *         var = self.cyLPModel.addVariable(varname, dim, isInt)
 *         self.loadFromCyLPModel(self.cyLPModel)
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPModel); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    __Pyx_DECREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "CyLP/cy/CyClpSimplex.pyx":842
 *         if not self.cyLPModel:
 *             self.cyLPModel = CyLPModel()
 *         var = self.cyLPModel.addVariable(varname, dim, isInt)             # <<<<<<<<<<<<<<
 *         self.loadFromCyLPModel(self.cyLPModel)
 *         return var
 */
  __pyx_t_4 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel, __pyx_n_s__addVariable); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_varname);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_varname);
  __Pyx_GIVEREF(__pyx_v_varname);
  __Pyx_INCREF(__pyx_v_dim);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_dim);
  __Pyx_GIVEREF(__pyx_v_dim);
  __Pyx_INCREF(__pyx_v_isInt);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_isInt);
  __Pyx_GIVEREF(__pyx_v_isInt);
  __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_var = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":843
 *             self.cyLPModel = CyLPModel()
 *         var = self.cyLPModel.addVariable(varname, dim, isInt)
 *         self.loadFromCyLPModel(self.cyLPModel)             # <<<<<<<<<<<<<<
 *         return var
 *         #else:
 */
  __pyx_t_5 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__loadFromCyLPModel); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
  __Pyx_GIVEREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
  __pyx_t_4 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":844
 *         var = self.cyLPModel.addVariable(varname, dim, isInt)
 *         self.loadFromCyLPModel(self.cyLPModel)
 *         return var             # <<<<<<<<<<<<<<
 *         #else:
 *         #    raise Exception('To add a variable you must set ' \
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_var);
  __pyx_r = __pyx_v_var;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":849
 *         #                    'CyLPSimplex.cyLPModel first.')
 * 
 *     def removeVariable(self, name):             # <<<<<<<<<<<<<<
 *         '''
 *         Removes variable named ``name`` from the problem.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_36removeVariable(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_36removeVariable[] = "CyClpSimplex.removeVariable(self, name)\n\n        Removes variable named ``name`` from the problem.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_36removeVariable(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("removeVariable");
  __Pyx_TraceCall("removeVariable", __pyx_f[0], 849);

  /* "CyLP/cy/CyClpSimplex.pyx":853
 *         Removes variable named ``name`` from the problem.
 *         '''
 *         if self.cyLPModel:             # <<<<<<<<<<<<<<
 *             self.cyLPModel.removeVariable(name)
 *             self.loadFromCyLPModel(self.cyLPModel)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "CyLP/cy/CyClpSimplex.pyx":854
 *         '''
 *         if self.cyLPModel:
 *             self.cyLPModel.removeVariable(name)             # <<<<<<<<<<<<<<
 *             self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 */
    __pyx_t_2 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel, __pyx_n_s__removeVariable); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":855
 *         if self.cyLPModel:
 *             self.cyLPModel.removeVariable(name)
 *             self.loadFromCyLPModel(self.cyLPModel)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception('To remove a variable you must set ' \
 */
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__loadFromCyLPModel); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    __Pyx_GIVEREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    __pyx_t_2 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":857
 *             self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 *             raise Exception('To remove a variable you must set ' \             # <<<<<<<<<<<<<<
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_18), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.removeVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":860
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 *     def getVarByName(self, name):             # <<<<<<<<<<<<<<
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_37getVarByName(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_37getVarByName[] = "CyClpSimplex.getVarByName(self, name)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_37getVarByName(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getVarByName");
  __Pyx_TraceCall("getVarByName", __pyx_f[0], 860);

  /* "CyLP/cy/CyClpSimplex.pyx":861
 * 
 *     def getVarByName(self, name):
 *         if not self.cyLPModel:             # <<<<<<<<<<<<<<
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')
 *         return self.cyLPModel.getVarByName(name)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":862
 *     def getVarByName(self, name):
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')             # <<<<<<<<<<<<<<
 *         return self.cyLPModel.getVarByName(name)
 * 
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_20), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "CyLP/cy/CyClpSimplex.pyx":863
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')
 *         return self.cyLPModel.getVarByName(name)             # <<<<<<<<<<<<<<
 * 
 *     def getVarNameByIndex(self, ind):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel, __pyx_n_s__getVarByName); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getVarByName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":865
 *         return self.cyLPModel.getVarByName(name)
 * 
 *     def getVarNameByIndex(self, ind):             # <<<<<<<<<<<<<<
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_38getVarNameByIndex(PyObject *__pyx_v_self, PyObject *__pyx_v_ind); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_38getVarNameByIndex[] = "CyClpSimplex.getVarNameByIndex(self, ind)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_38getVarNameByIndex(PyObject *__pyx_v_self, PyObject *__pyx_v_ind) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getVarNameByIndex");
  __Pyx_TraceCall("getVarNameByIndex", __pyx_f[0], 865);

  /* "CyLP/cy/CyClpSimplex.pyx":866
 * 
 *     def getVarNameByIndex(self, ind):
 *         if not self.cyLPModel:             # <<<<<<<<<<<<<<
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')
 *         return self.cyLPModel.inds.reverseVarSearch(ind)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":867
 *     def getVarNameByIndex(self, ind):
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')             # <<<<<<<<<<<<<<
 *         return self.cyLPModel.inds.reverseVarSearch(ind)
 * 
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_21), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "CyLP/cy/CyClpSimplex.pyx":868
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')
 *         return self.cyLPModel.inds.reverseVarSearch(ind)             # <<<<<<<<<<<<<<
 * 
 *     def CLP_addConstraint(self, numberInRow,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel, __pyx_n_s__inds); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__reverseVarSearch); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_ind);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_ind);
  __Pyx_GIVEREF(__pyx_v_ind);
  __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getVarNameByIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":870
 *         return self.cyLPModel.inds.reverseVarSearch(ind)
 * 
 *     def CLP_addConstraint(self, numberInRow,             # <<<<<<<<<<<<<<
 *                     np.ndarray[np.int32_t, ndim=1] columns,
 *                     np.ndarray[np.double_t, ndim=1] elements,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_39CLP_addConstraint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_39CLP_addConstraint[] = "CyClpSimplex.CLP_addConstraint(self, numberInRow, ndarray columns, ndarray elements, rowLower, rowUpper)\n\n        Add a constraint to the problem, CLP style. See CLP documentation.\n        Not commonly used in CyLP.\n        For CyLP modeling tool see :mod:`CyLP.python.modeling.CyLPModel`.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_39CLP_addConstraint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_numberInRow = 0;
  PyArrayObject *__pyx_v_columns = 0;
  PyArrayObject *__pyx_v_elements = 0;
  PyObject *__pyx_v_rowLower = 0;
  PyObject *__pyx_v_rowUpper = 0;
  PyObject *__pyx_v_c = NULL;
  Py_buffer __pyx_bstruct_elements;
  Py_ssize_t __pyx_bstride_0_elements = 0;
  Py_ssize_t __pyx_bshape_0_elements = 0;
  Py_buffer __pyx_bstruct_columns;
  Py_ssize_t __pyx_bstride_0_columns = 0;
  Py_ssize_t __pyx_bshape_0_columns = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__numberInRow,&__pyx_n_s__columns,&__pyx_n_s__elements,&__pyx_n_s__rowLower,&__pyx_n_s__rowUpper,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("CLP_addConstraint");
  __Pyx_TraceCall("CLP_addConstraint", __pyx_f[0], 870);
  {
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__numberInRow);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columns);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addConstraint", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__elements);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addConstraint", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowLower);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addConstraint", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowUpper);
        if (likely(values[4])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addConstraint", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "CLP_addConstraint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_numberInRow = values[0];
    __pyx_v_columns = ((PyArrayObject *)values[1]);
    __pyx_v_elements = ((PyArrayObject *)values[2]);
    __pyx_v_rowLower = values[3];
    __pyx_v_rowUpper = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CLP_addConstraint", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_addConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_bstruct_columns.buf = NULL;
  __pyx_bstruct_elements.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columns), __pyx_ptype_5numpy_ndarray, 1, "columns", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elements), __pyx_ptype_5numpy_ndarray, 1, "elements", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_columns, (PyObject*)__pyx_v_columns, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_columns = __pyx_bstruct_columns.strides[0];
  __pyx_bshape_0_columns = __pyx_bstruct_columns.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_elements, (PyObject*)__pyx_v_elements, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_elements = __pyx_bstruct_elements.strides[0];
  __pyx_bshape_0_elements = __pyx_bstruct_elements.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":882
 *         # TODO: This makes adding a row real slower,
 *         # but it is better than a COIN EXCEPTION!
 *         for c in columns:             # <<<<<<<<<<<<<<
 *             if c >= self.getNumCols():
 *                 raise Exception('CyClpSimplex.pyx:addConstraint: Column ' \
 */
  if (PyList_CheckExact(((PyObject *)__pyx_v_columns)) || PyTuple_CheckExact(((PyObject *)__pyx_v_columns))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_columns); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_columns)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else if (PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF(__pyx_v_c);
    __pyx_v_c = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":883
 *         # but it is better than a COIN EXCEPTION!
 *         for c in columns:
 *             if c >= self.getNumCols():             # <<<<<<<<<<<<<<
 *                 raise Exception('CyClpSimplex.pyx:addConstraint: Column ' \
 *                                 'number %d should be less than column ' \
 */
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__getNumCols); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_c, __pyx_t_5, Py_GE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_6) {

      /* "CyLP/cy/CyClpSimplex.pyx":886
 *                 raise Exception('CyClpSimplex.pyx:addConstraint: Column ' \
 *                                 'number %d should be less than column ' \
 *                                 'size %d' % (c, self.getNumCols()))             # <<<<<<<<<<<<<<
 *         self.CppSelf.addRow(numberInRow, <int*>columns.data,
 *                             <double*>elements.data, rowLower, rowUpper)
 */
      __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__getNumCols); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      __Pyx_INCREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_c);
      __Pyx_GIVEREF(__pyx_v_c);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_22), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_5));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
      __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }
    __pyx_L8:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":887
 *                                 'number %d should be less than column ' \
 *                                 'size %d' % (c, self.getNumCols()))
 *         self.CppSelf.addRow(numberInRow, <int*>columns.data,             # <<<<<<<<<<<<<<
 *                             <double*>elements.data, rowLower, rowUpper)
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_v_numberInRow); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":888
 *                                 'size %d' % (c, self.getNumCols()))
 *         self.CppSelf.addRow(numberInRow, <int*>columns.data,
 *                             <double*>elements.data, rowLower, rowUpper)             # <<<<<<<<<<<<<<
 * 
 *     def CLP_addVariable(self, numberInColumn,
 */
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_rowLower); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_rowUpper); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->addRow(__pyx_t_7, ((int *)__pyx_v_columns->data), ((double *)__pyx_v_elements->data), __pyx_t_8, __pyx_t_9);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_elements);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columns);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_addConstraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_elements);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columns);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":890
 *                             <double*>elements.data, rowLower, rowUpper)
 * 
 *     def CLP_addVariable(self, numberInColumn,             # <<<<<<<<<<<<<<
 *                         np.ndarray[np.int32_t, ndim=1] rows,
 *                         np.ndarray[np.double_t, ndim=1] elements,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_40CLP_addVariable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_40CLP_addVariable[] = "CyClpSimplex.CLP_addVariable(self, numberInColumn, ndarray rows, ndarray elements, columnLower, columnUpper, objective)\n\n        Add a variable to the problem, CLP style. See CLP documentation.\n        For CyLP modeling tool see :mod:`CyLP.python.modeling.CyLPModel`.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_40CLP_addVariable(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_numberInColumn = 0;
  PyArrayObject *__pyx_v_rows = 0;
  PyArrayObject *__pyx_v_elements = 0;
  PyObject *__pyx_v_columnLower = 0;
  PyObject *__pyx_v_columnUpper = 0;
  PyObject *__pyx_v_objective = 0;
  PyObject *__pyx_v_r = NULL;
  Py_buffer __pyx_bstruct_rows;
  Py_ssize_t __pyx_bstride_0_rows = 0;
  Py_ssize_t __pyx_bshape_0_rows = 0;
  Py_buffer __pyx_bstruct_elements;
  Py_ssize_t __pyx_bstride_0_elements = 0;
  Py_ssize_t __pyx_bshape_0_elements = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__numberInColumn,&__pyx_n_s__rows,&__pyx_n_s__elements,&__pyx_n_s__columnLower,&__pyx_n_s__columnUpper,&__pyx_n_s__objective,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("CLP_addVariable");
  __Pyx_TraceCall("CLP_addVariable", __pyx_f[0], 890);
  {
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__numberInColumn);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rows);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addVariable", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__elements);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addVariable", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columnLower);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addVariable", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columnUpper);
        if (likely(values[4])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addVariable", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__objective);
        if (likely(values[5])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("CLP_addVariable", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "CLP_addVariable") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_numberInColumn = values[0];
    __pyx_v_rows = ((PyArrayObject *)values[1]);
    __pyx_v_elements = ((PyArrayObject *)values[2]);
    __pyx_v_columnLower = values[3];
    __pyx_v_columnUpper = values[4];
    __pyx_v_objective = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("CLP_addVariable", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_addVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_bstruct_rows.buf = NULL;
  __pyx_bstruct_elements.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rows), __pyx_ptype_5numpy_ndarray, 1, "rows", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elements), __pyx_ptype_5numpy_ndarray, 1, "elements", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_rows, (PyObject*)__pyx_v_rows, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_rows = __pyx_bstruct_rows.strides[0];
  __pyx_bshape_0_rows = __pyx_bstruct_rows.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_elements, (PyObject*)__pyx_v_elements, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_elements = __pyx_bstruct_elements.strides[0];
  __pyx_bshape_0_elements = __pyx_bstruct_elements.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":902
 *         # TODO: This makes adding a column real slower,
 *         # but it is better than a COIN EXCEPTION!
 *         for r in rows:             # <<<<<<<<<<<<<<
 *             if r >= self.getNumRows():
 *                 raise Exception('CyClpSimplex.pyx:addColumn: Row '\
 */
  if (PyList_CheckExact(((PyObject *)__pyx_v_rows)) || PyTuple_CheckExact(((PyObject *)__pyx_v_rows))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_rows); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_rows)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else if (PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF(__pyx_v_r);
    __pyx_v_r = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":903
 *         # but it is better than a COIN EXCEPTION!
 *         for r in rows:
 *             if r >= self.getNumRows():             # <<<<<<<<<<<<<<
 *                 raise Exception('CyClpSimplex.pyx:addColumn: Row '\
 *                         'number %d should be less than row size ' \
 */
    __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__getNumRows); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_r, __pyx_t_5, Py_GE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_6) {

      /* "CyLP/cy/CyClpSimplex.pyx":906
 *                 raise Exception('CyClpSimplex.pyx:addColumn: Row '\
 *                         'number %d should be less than row size ' \
 *                         '%d' % (r, self.getNumRows()))             # <<<<<<<<<<<<<<
 *         self.CppSelf.addColumn(numberInColumn, <int*>rows.data,
 *                 <double*> elements.data, columnLower,
 */
      __pyx_t_4 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__getNumRows); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      __Pyx_INCREF(__pyx_v_r);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_r);
      __Pyx_GIVEREF(__pyx_v_r);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_23), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_5));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
      __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }
    __pyx_L8:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":907
 *                         'number %d should be less than row size ' \
 *                         '%d' % (r, self.getNumRows()))
 *         self.CppSelf.addColumn(numberInColumn, <int*>rows.data,             # <<<<<<<<<<<<<<
 *                 <double*> elements.data, columnLower,
 *                                columnUpper, objective)
 */
  __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_v_numberInColumn); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":908
 *                         '%d' % (r, self.getNumRows()))
 *         self.CppSelf.addColumn(numberInColumn, <int*>rows.data,
 *                 <double*> elements.data, columnLower,             # <<<<<<<<<<<<<<
 *                                columnUpper, objective)
 * 
 */
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_columnLower); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":909
 *         self.CppSelf.addColumn(numberInColumn, <int*>rows.data,
 *                 <double*> elements.data, columnLower,
 *                                columnUpper, objective)             # <<<<<<<<<<<<<<
 * 
 *     def addVariables(self, number,
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_columnUpper); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_objective); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->addColumn(__pyx_t_7, ((int *)__pyx_v_rows->data), ((double *)__pyx_v_elements->data), __pyx_t_8, __pyx_t_9, __pyx_t_10);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rows);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_elements);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.CLP_addVariable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rows);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_elements);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":911
 *                                columnUpper, objective)
 * 
 *     def addVariables(self, number,             # <<<<<<<<<<<<<<
 *                         np.ndarray[np.double_t, ndim=1] columnLower,
 *                         np.ndarray[np.double_t, ndim=1] columnUpper,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_41addVariables(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_41addVariables[] = "CyClpSimplex.addVariables(self, number, ndarray columnLower, ndarray columnUpper, ndarray objective, ndarray columnStarts, ndarray rows, ndarray elements)\n\n        Add ``number`` variables at once, CLP style.\n        For CyLP modeling tool see :mod:`CyLP.python.modeling.CyLPModel`.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_41addVariables(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_number = 0;
  PyArrayObject *__pyx_v_columnLower = 0;
  PyArrayObject *__pyx_v_columnUpper = 0;
  PyArrayObject *__pyx_v_objective = 0;
  PyArrayObject *__pyx_v_columnStarts = 0;
  PyArrayObject *__pyx_v_rows = 0;
  PyArrayObject *__pyx_v_elements = 0;
  Py_buffer __pyx_bstruct_rows;
  Py_ssize_t __pyx_bstride_0_rows = 0;
  Py_ssize_t __pyx_bshape_0_rows = 0;
  Py_buffer __pyx_bstruct_columnStarts;
  Py_ssize_t __pyx_bstride_0_columnStarts = 0;
  Py_ssize_t __pyx_bshape_0_columnStarts = 0;
  Py_buffer __pyx_bstruct_elements;
  Py_ssize_t __pyx_bstride_0_elements = 0;
  Py_ssize_t __pyx_bshape_0_elements = 0;
  Py_buffer __pyx_bstruct_columnLower;
  Py_ssize_t __pyx_bstride_0_columnLower = 0;
  Py_ssize_t __pyx_bshape_0_columnLower = 0;
  Py_buffer __pyx_bstruct_objective;
  Py_ssize_t __pyx_bstride_0_objective = 0;
  Py_ssize_t __pyx_bshape_0_objective = 0;
  Py_buffer __pyx_bstruct_columnUpper;
  Py_ssize_t __pyx_bstride_0_columnUpper = 0;
  Py_ssize_t __pyx_bshape_0_columnUpper = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__number,&__pyx_n_s__columnLower,&__pyx_n_s__columnUpper,&__pyx_n_s__objective,&__pyx_n_s__columnStarts,&__pyx_n_s__rows,&__pyx_n_s__elements,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("addVariables");
  __Pyx_TraceCall("addVariables", __pyx_f[0], 911);
  {
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__number);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columnLower);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columnUpper);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__objective);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columnStarts);
        if (likely(values[4])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rows);
        if (likely(values[5])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__elements);
        if (likely(values[6])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addVariables") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_number = values[0];
    __pyx_v_columnLower = ((PyArrayObject *)values[1]);
    __pyx_v_columnUpper = ((PyArrayObject *)values[2]);
    __pyx_v_objective = ((PyArrayObject *)values[3]);
    __pyx_v_columnStarts = ((PyArrayObject *)values[4]);
    __pyx_v_rows = ((PyArrayObject *)values[5]);
    __pyx_v_elements = ((PyArrayObject *)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addVariables", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addVariables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_bstruct_columnLower.buf = NULL;
  __pyx_bstruct_columnUpper.buf = NULL;
  __pyx_bstruct_objective.buf = NULL;
  __pyx_bstruct_columnStarts.buf = NULL;
  __pyx_bstruct_rows.buf = NULL;
  __pyx_bstruct_elements.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columnLower), __pyx_ptype_5numpy_ndarray, 1, "columnLower", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columnUpper), __pyx_ptype_5numpy_ndarray, 1, "columnUpper", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_objective), __pyx_ptype_5numpy_ndarray, 1, "objective", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columnStarts), __pyx_ptype_5numpy_ndarray, 1, "columnStarts", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rows), __pyx_ptype_5numpy_ndarray, 1, "rows", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elements), __pyx_ptype_5numpy_ndarray, 1, "elements", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_columnLower, (PyObject*)__pyx_v_columnLower, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_columnLower = __pyx_bstruct_columnLower.strides[0];
  __pyx_bshape_0_columnLower = __pyx_bstruct_columnLower.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_columnUpper, (PyObject*)__pyx_v_columnUpper, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_columnUpper = __pyx_bstruct_columnUpper.strides[0];
  __pyx_bshape_0_columnUpper = __pyx_bstruct_columnUpper.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_objective, (PyObject*)__pyx_v_objective, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_objective = __pyx_bstruct_objective.strides[0];
  __pyx_bshape_0_objective = __pyx_bstruct_objective.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_columnStarts, (PyObject*)__pyx_v_columnStarts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_columnStarts = __pyx_bstruct_columnStarts.strides[0];
  __pyx_bshape_0_columnStarts = __pyx_bstruct_columnStarts.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_rows, (PyObject*)__pyx_v_rows, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_rows = __pyx_bstruct_rows.strides[0];
  __pyx_bshape_0_rows = __pyx_bstruct_rows.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_elements, (PyObject*)__pyx_v_elements, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_elements = __pyx_bstruct_elements.strides[0];
  __pyx_bshape_0_elements = __pyx_bstruct_elements.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":922
 *         For CyLP modeling tool see :mod:`CyLP.python.modeling.CyLPModel`.
 *         '''
 *         self.CppSelf.addColumns(number, <double*>columnLower.data,             # <<<<<<<<<<<<<<
 *                                         <double*>columnUpper.data,
 *                                         <double*>objective.data,
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_number); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":927
 *                                         <int*>columnStarts.data,
 *                                         <int*>rows.data,
 *                                         <double*>elements.data)             # <<<<<<<<<<<<<<
 * 
 *     def addConstraints(self, number,
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->addColumns(__pyx_t_1, ((double *)__pyx_v_columnLower->data), ((double *)__pyx_v_columnUpper->data), ((double *)__pyx_v_objective->data), ((int *)__pyx_v_columnStarts->data), ((int *)__pyx_v_rows->data), ((double *)__pyx_v_elements->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rows);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columnStarts);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_elements);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columnLower);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_objective);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columnUpper);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addVariables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rows);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columnStarts);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_elements);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columnLower);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_objective);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columnUpper);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":929
 *                                         <double*>elements.data)
 * 
 *     def addConstraints(self, number,             # <<<<<<<<<<<<<<
 *                         np.ndarray[np.double_t, ndim=1] rowLower,
 *                         np.ndarray[np.double_t, ndim=1] rowUpper,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_42addConstraints(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_42addConstraints[] = "CyClpSimplex.addConstraints(self, number, ndarray rowLower, ndarray rowUpper, ndarray rowStarts, ndarray columns, ndarray elements)\n\n        Add ``number`` constraints at once, CLP style.\n        For CyLP modeling tool see :mod:`CyLP.python.modeling.CyLPModel`.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_42addConstraints(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_number = 0;
  PyArrayObject *__pyx_v_rowLower = 0;
  PyArrayObject *__pyx_v_rowUpper = 0;
  PyArrayObject *__pyx_v_rowStarts = 0;
  PyArrayObject *__pyx_v_columns = 0;
  PyArrayObject *__pyx_v_elements = 0;
  Py_buffer __pyx_bstruct_rowUpper;
  Py_ssize_t __pyx_bstride_0_rowUpper = 0;
  Py_ssize_t __pyx_bshape_0_rowUpper = 0;
  Py_buffer __pyx_bstruct_rowStarts;
  Py_ssize_t __pyx_bstride_0_rowStarts = 0;
  Py_ssize_t __pyx_bshape_0_rowStarts = 0;
  Py_buffer __pyx_bstruct_elements;
  Py_ssize_t __pyx_bstride_0_elements = 0;
  Py_ssize_t __pyx_bshape_0_elements = 0;
  Py_buffer __pyx_bstruct_rowLower;
  Py_ssize_t __pyx_bstride_0_rowLower = 0;
  Py_ssize_t __pyx_bshape_0_rowLower = 0;
  Py_buffer __pyx_bstruct_columns;
  Py_ssize_t __pyx_bstride_0_columns = 0;
  Py_ssize_t __pyx_bshape_0_columns = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__number,&__pyx_n_s__rowLower,&__pyx_n_s__rowUpper,&__pyx_n_s__rowStarts,&__pyx_n_s__columns,&__pyx_n_s__elements,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("addConstraints");
  __Pyx_TraceCall("addConstraints", __pyx_f[0], 929);
  {
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__number);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowLower);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addConstraints", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowUpper);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addConstraints", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowStarts);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addConstraints", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__columns);
        if (likely(values[4])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addConstraints", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__elements);
        if (likely(values[5])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addConstraints", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addConstraints") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_number = values[0];
    __pyx_v_rowLower = ((PyArrayObject *)values[1]);
    __pyx_v_rowUpper = ((PyArrayObject *)values[2]);
    __pyx_v_rowStarts = ((PyArrayObject *)values[3]);
    __pyx_v_columns = ((PyArrayObject *)values[4]);
    __pyx_v_elements = ((PyArrayObject *)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addConstraints", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addConstraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_bstruct_rowLower.buf = NULL;
  __pyx_bstruct_rowUpper.buf = NULL;
  __pyx_bstruct_rowStarts.buf = NULL;
  __pyx_bstruct_columns.buf = NULL;
  __pyx_bstruct_elements.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowLower), __pyx_ptype_5numpy_ndarray, 1, "rowLower", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowUpper), __pyx_ptype_5numpy_ndarray, 1, "rowUpper", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowStarts), __pyx_ptype_5numpy_ndarray, 1, "rowStarts", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_columns), __pyx_ptype_5numpy_ndarray, 1, "columns", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_elements), __pyx_ptype_5numpy_ndarray, 1, "elements", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_rowLower, (PyObject*)__pyx_v_rowLower, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_rowLower = __pyx_bstruct_rowLower.strides[0];
  __pyx_bshape_0_rowLower = __pyx_bstruct_rowLower.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_rowUpper, (PyObject*)__pyx_v_rowUpper, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_rowUpper = __pyx_bstruct_rowUpper.strides[0];
  __pyx_bshape_0_rowUpper = __pyx_bstruct_rowUpper.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_rowStarts, (PyObject*)__pyx_v_rowStarts, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_rowStarts = __pyx_bstruct_rowStarts.strides[0];
  __pyx_bshape_0_rowStarts = __pyx_bstruct_rowStarts.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_columns, (PyObject*)__pyx_v_columns, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_columns = __pyx_bstruct_columns.strides[0];
  __pyx_bshape_0_columns = __pyx_bstruct_columns.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_elements, (PyObject*)__pyx_v_elements, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_elements = __pyx_bstruct_elements.strides[0];
  __pyx_bshape_0_elements = __pyx_bstruct_elements.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":939
 *         For CyLP modeling tool see :mod:`CyLP.python.modeling.CyLPModel`.
 *         '''
 *         self.CppSelf.addRows(number, <double*>rowLower.data,             # <<<<<<<<<<<<<<
 *                                     <double*>rowUpper.data,
 *                                     <int*>rowStarts.data,
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_number); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":943
 *                                     <int*>rowStarts.data,
 *                                     <int*>columns.data,
 *                                     <double*>elements.data)             # <<<<<<<<<<<<<<
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->addRows(__pyx_t_1, ((double *)__pyx_v_rowLower->data), ((double *)__pyx_v_rowUpper->data), ((int *)__pyx_v_rowStarts->data), ((int *)__pyx_v_columns->data), ((double *)__pyx_v_elements->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowUpper);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowStarts);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_elements);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowLower);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columns);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.addConstraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowUpper);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowStarts);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_elements);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowLower);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_columns);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":945
 *                                     <double*>elements.data)
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,             # <<<<<<<<<<<<<<
 *             int ignoreErrors=False) except *:
 *         '''
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_43readMps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, char *__pyx_v_filename, int __pyx_skip_dispatch, struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps *__pyx_optional_args) {
  int __pyx_v_keepNames = ((int)0);

  /* "CyLP/cy/CyClpSimplex.pyx":946
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,
 *             int ignoreErrors=False) except *:             # <<<<<<<<<<<<<<
 *         '''
 *         Read an mps file. See this :ref:`modeling example <modeling-usage>`.
 */
  int __pyx_v_ignoreErrors = ((int)0);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("readMps");
  __Pyx_TraceCall("readMps", __pyx_f[0], 945);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_keepNames = __pyx_optional_args->keepNames;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_ignoreErrors = __pyx_optional_args->ignoreErrors;
      }
    }
  }

  /* "CyLP/cy/CyClpSimplex.pyx":945
 *                                     <double*>elements.data)
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,             # <<<<<<<<<<<<<<
 *             int ignoreErrors=False) except *:
 *         '''
 */
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__readMps); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_43readMps)) {
      __pyx_t_2 = PyBytes_FromString(__pyx_v_filename); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __pyx_t_3 = PyInt_FromLong(__pyx_v_keepNames); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_ignoreErrors); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":956
 * 
 *         #if ext == '.mps':
 *         return self.CppSelf.readMps(filename, keepNames, ignoreErrors)             # <<<<<<<<<<<<<<
 *         #else:
 *         #    return self.CppSelf.readMps(filename, keepNames, ignoreErrors)
 */
  __pyx_r = __pyx_v_self->CppSelf->readMps(__pyx_v_filename, __pyx_v_keepNames, __pyx_v_ignoreErrors);
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("CyLP.cy.CyClpSimplex.CyClpSimplex.readMps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":945
 *                                     <double*>elements.data)
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,             # <<<<<<<<<<<<<<
 *             int ignoreErrors=False) except *:
 *         '''
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_43readMps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_43readMps[] = "CyClpSimplex.readMps(self, char *filename, int keepNames=False, int ignoreErrors=False) -> int\n\n        Read an mps file. See this :ref:`modeling example <modeling-usage>`.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_43readMps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  int __pyx_v_keepNames;
  int __pyx_v_ignoreErrors;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__keepNames,&__pyx_n_s__ignoreErrors,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("readMps");
  __Pyx_TraceCall("readMps", __pyx_f[0], 945);
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__keepNames);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ignoreErrors);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "readMps") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_keepNames = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_keepNames == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_keepNames = ((int)0);
    }
    if (values[2]) {
      __pyx_v_ignoreErrors = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_ignoreErrors == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "CyLP/cy/CyClpSimplex.pyx":946
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,
 *             int ignoreErrors=False) except *:             # <<<<<<<<<<<<<<
 *         '''
 *         Read an mps file. See this :ref:`modeling example <modeling-usage>`.
 */
      __pyx_v_ignoreErrors = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readMps", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.readMps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":945
 *                                     <double*>elements.data)
 * 
 *     cpdef int readMps(self, char* filename, int keepNames=False,             # <<<<<<<<<<<<<<
 *             int ignoreErrors=False) except *:
 *         '''
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.keepNames = __pyx_v_keepNames;
  __pyx_t_2.ignoreErrors = __pyx_v_ignoreErrors;
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->readMps(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_filename, 1, &__pyx_t_2); 
  __pyx_t_3 = PyInt_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.readMps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":967
 *             #return ret
 * 
 *     def extractCyLPModel(self, fileName, keepNames=False, ignoreErrors=False):             # <<<<<<<<<<<<<<
 *         if self.readMps(fileName, keepNames, ignoreErrors) != 0:
 *             return None
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_44extractCyLPModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_44extractCyLPModel[] = "CyClpSimplex.extractCyLPModel(self, fileName, keepNames=False, ignoreErrors=False)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_44extractCyLPModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fileName = 0;
  PyObject *__pyx_v_keepNames = 0;
  PyObject *__pyx_v_ignoreErrors = 0;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_c_up = NULL;
  PyObject *__pyx_v_c_low = NULL;
  PyObject *__pyx_v_mat = NULL;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_v_x_up = NULL;
  PyObject *__pyx_v_x_low = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__fileName,&__pyx_n_s__keepNames,&__pyx_n_s__ignoreErrors,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("extractCyLPModel");
  __Pyx_TraceCall("extractCyLPModel", __pyx_f[0], 967);
  {
    PyObject* values[3] = {0,0,0};
    values[1] = __pyx_k_24;
    values[2] = __pyx_k_25;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fileName);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__keepNames);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ignoreErrors);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "extractCyLPModel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fileName = values[0];
    __pyx_v_keepNames = values[1];
    __pyx_v_ignoreErrors = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extractCyLPModel", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.extractCyLPModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":968
 * 
 *     def extractCyLPModel(self, fileName, keepNames=False, ignoreErrors=False):
 *         if self.readMps(fileName, keepNames, ignoreErrors) != 0:             # <<<<<<<<<<<<<<
 *             return None
 *         m = CyLPModel()
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_fileName); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v_keepNames); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_ignoreErrors); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5.__pyx_n = 2;
  __pyx_t_5.keepNames = __pyx_t_2;
  __pyx_t_5.ignoreErrors = __pyx_t_3;
  __pyx_t_4 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->readMps(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_t_1, 0, &__pyx_t_5); 
  __pyx_t_6 = (__pyx_t_4 != 0);
  if (__pyx_t_6) {

    /* "CyLP/cy/CyClpSimplex.pyx":969
 *     def extractCyLPModel(self, fileName, keepNames=False, ignoreErrors=False):
 *         if self.readMps(fileName, keepNames, ignoreErrors) != 0:
 *             return None             # <<<<<<<<<<<<<<
 *         m = CyLPModel()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "CyLP/cy/CyClpSimplex.pyx":970
 *         if self.readMps(fileName, keepNames, ignoreErrors) != 0:
 *             return None
 *         m = CyLPModel()             # <<<<<<<<<<<<<<
 * 
 *         x = m.addVariable('x', self.nVariables)
 */
  __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPModel); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_m = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":972
 *         m = CyLPModel()
 * 
 *         x = m.addVariable('x', self.nVariables)             # <<<<<<<<<<<<<<
 * 
 *         # Copy is crucial. Memory space should be different than
 */
  __pyx_t_8 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__addVariable); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__nVariables); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_9));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__x));
  PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)__pyx_n_s__x));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__x));
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
  __pyx_v_x = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":976
 *         # Copy is crucial. Memory space should be different than
 *         # that of Clp. Else, a resize will ruin these.
 *         c_up = CyLPArray(self.constraintsUpper).copy()             # <<<<<<<<<<<<<<
 *         c_low = CyLPArray(self.constraintsLower).copy()
 * 
 */
  __pyx_t_7 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPArray); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__constraintsUpper); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_8));
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_GetAttr(__pyx_t_9, __pyx_n_s__copy); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_Call(__pyx_t_8, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_c_up = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":977
 *         # that of Clp. Else, a resize will ruin these.
 *         c_up = CyLPArray(self.constraintsUpper).copy()
 *         c_low = CyLPArray(self.constraintsLower).copy()             # <<<<<<<<<<<<<<
 * 
 *         mat = self.matrix
 */
  __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPArray); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__constraintsLower); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_7));
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_Call(__pyx_t_9, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_GetAttr(__pyx_t_8, __pyx_n_s__copy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_c_low = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":979
 *         c_low = CyLPArray(self.constraintsLower).copy()
 * 
 *         mat = self.matrix             # <<<<<<<<<<<<<<
 *         C = csc_matrixPlus((mat.elements, mat.indices, mat.vectorStarts),
 *                              shape=(self.nConstraints, self.nVariables))
 */
  __pyx_t_8 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__matrix); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_mat = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":980
 * 
 *         mat = self.matrix
 *         C = csc_matrixPlus((mat.elements, mat.indices, mat.vectorStarts),             # <<<<<<<<<<<<<<
 *                              shape=(self.nConstraints, self.nVariables))
 * 
 */
  __pyx_t_8 = __Pyx_GetName(__pyx_m, __pyx_n_s__csc_matrixPlus); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__elements); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__indices); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__vectorStarts); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_11));
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_7 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_10));
  PyTuple_SET_ITEM(__pyx_t_10, 0, ((PyObject *)__pyx_t_11));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_11));
  __pyx_t_11 = 0;
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_11));

  /* "CyLP/cy/CyClpSimplex.pyx":981
 *         mat = self.matrix
 *         C = csc_matrixPlus((mat.elements, mat.indices, mat.vectorStarts),
 *                              shape=(self.nConstraints, self.nVariables))             # <<<<<<<<<<<<<<
 * 
 *         m += c_low <= C * x <= c_up
 */
  __pyx_t_9 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__nConstraints); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__nVariables); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_12));
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_9 = 0;
  __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_11, ((PyObject *)__pyx_n_s__shape), ((PyObject *)__pyx_t_12)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_12)); __pyx_t_12 = 0;
  __pyx_t_12 = PyEval_CallObjectWithKeywords(__pyx_t_8, ((PyObject *)__pyx_t_10), ((PyObject *)__pyx_t_11)); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_11)); __pyx_t_11 = 0;
  __pyx_v_C = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":983
 *                              shape=(self.nConstraints, self.nVariables))
 * 
 *         m += c_low <= C * x <= c_up             # <<<<<<<<<<<<<<
 * 
 *         x_up = CyLPArray(self.variablesUpper).copy()
 */
  __pyx_t_12 = PyNumber_Multiply(__pyx_v_C, __pyx_v_x); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_11 = PyObject_RichCompare(__pyx_v_c_low, __pyx_t_12, Py_LE); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  if (__Pyx_PyObject_IsTrue(__pyx_t_11)) {
    __Pyx_DECREF(__pyx_t_11);
    __pyx_t_11 = PyObject_RichCompare(__pyx_t_12, __pyx_v_c_up, Py_LE); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyNumber_InPlaceAdd(__pyx_v_m, __pyx_t_11); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_v_m);
  __pyx_v_m = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":985
 *         m += c_low <= C * x <= c_up
 * 
 *         x_up = CyLPArray(self.variablesUpper).copy()             # <<<<<<<<<<<<<<
 *         x_low = CyLPArray(self.variablesLower).copy()
 * 
 */
  __pyx_t_12 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPArray); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_11 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__variablesUpper); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_10));
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_t_11 = 0;
  __pyx_t_11 = PyObject_Call(__pyx_t_12, ((PyObject *)__pyx_t_10), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
  __pyx_t_10 = PyObject_GetAttr(__pyx_t_11, __pyx_n_s__copy); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyObject_Call(__pyx_t_10, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_x_up = __pyx_t_11;
  __pyx_t_11 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":986
 * 
 *         x_up = CyLPArray(self.variablesUpper).copy()
 *         x_low = CyLPArray(self.variablesLower).copy()             # <<<<<<<<<<<<<<
 * 
 *         m += x_low <= x <= x_up
 */
  __pyx_t_11 = __Pyx_GetName(__pyx_m, __pyx_n_s__CyLPArray); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_10 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__variablesLower); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_12));
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = PyObject_Call(__pyx_t_11, ((PyObject *)__pyx_t_12), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_12)); __pyx_t_12 = 0;
  __pyx_t_12 = PyObject_GetAttr(__pyx_t_10, __pyx_n_s__copy); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyObject_Call(__pyx_t_12, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_v_x_low = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":988
 *         x_low = CyLPArray(self.variablesLower).copy()
 * 
 *         m += x_low <= x <= x_up             # <<<<<<<<<<<<<<
 * 
 *         m.objective = self.objective
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_x_low, __pyx_v_x, Py_LE); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  if (__Pyx_PyObject_IsTrue(__pyx_t_10)) {
    __Pyx_DECREF(__pyx_t_10);
    __pyx_t_10 = PyObject_RichCompare(__pyx_v_x, __pyx_v_x_up, Py_LE); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
  }
  __pyx_t_12 = PyNumber_InPlaceAdd(__pyx_v_m, __pyx_t_10); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_v_m);
  __pyx_v_m = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":990
 *         m += x_low <= x <= x_up
 * 
 *         m.objective = self.objective             # <<<<<<<<<<<<<<
 * 
 *         self.cyLPModel = m
 */
  __pyx_t_12 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__objective); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  if (PyObject_SetAttr(__pyx_v_m, __pyx_n_s__objective, __pyx_t_12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":992
 *         m.objective = self.objective
 * 
 *         self.cyLPModel = m             # <<<<<<<<<<<<<<
 *         return m
 * 
 */
  __Pyx_INCREF(__pyx_v_m);
  __Pyx_GIVEREF(__pyx_v_m);
  __Pyx_GOTREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
  __Pyx_DECREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel = __pyx_v_m;

  /* "CyLP/cy/CyClpSimplex.pyx":993
 * 
 *         self.cyLPModel = m
 *         return m             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_m);
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.extractCyLPModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_c_up);
  __Pyx_XDECREF(__pyx_v_c_low);
  __Pyx_XDECREF(__pyx_v_mat);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_x_up);
  __Pyx_XDECREF(__pyx_v_x_low);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":997
 * 
 * 
 *     def primal(self, ifValuesPass=0, startFinishOptions=0):             # <<<<<<<<<<<<<<
 *         '''
 *         Solve the problem using the primal simplex algorithm.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_45primal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_45primal[] = "CyClpSimplex.primal(self, ifValuesPass=0, startFinishOptions=0)\n\n        Solve the problem using the primal simplex algorithm.\n        See this :ref:`usage example <simple-run>`.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_45primal(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ifValuesPass = 0;
  PyObject *__pyx_v_startFinishOptions = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ifValuesPass,&__pyx_n_s__startFinishOptions,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("primal");
  __Pyx_TraceCall("primal", __pyx_f[0], 997);
  {
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ifValuesPass);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__startFinishOptions);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "primal") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ifValuesPass = values[0];
    __pyx_v_startFinishOptions = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("primal", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.primal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":1002
 *         See this :ref:`usage example <simple-run>`.
 *         '''
 *         return problemStatus[self.CppSelf.primal(             # <<<<<<<<<<<<<<
 *                              ifValuesPass, startFinishOptions)]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__problemStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "CyLP/cy/CyClpSimplex.pyx":1003
 *         '''
 *         return problemStatus[self.CppSelf.primal(
 *                              ifValuesPass, startFinishOptions)]             # <<<<<<<<<<<<<<
 * 
 *     def dual(self, ifValuesPass=0, startFinishOptions=0):
 */
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v_ifValuesPass); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_startFinishOptions); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->primal(__pyx_t_2, __pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_4, sizeof(int), PyInt_FromLong); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1002; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.primal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1005
 *                              ifValuesPass, startFinishOptions)]
 * 
 *     def dual(self, ifValuesPass=0, startFinishOptions=0):             # <<<<<<<<<<<<<<
 *         '''
 *         Runs CLP dual simplex.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_46dual(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_46dual[] = "CyClpSimplex.dual(self, ifValuesPass=0, startFinishOptions=0)\n\n        Runs CLP dual simplex.\n\n        **Usage Example**\n\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n        >>> s = CyClpSimplex()\n        >>> f = getMpsExample()\n        >>> s.readMps(f)\n        0\n        >>> s.dual()\n        'optimal'\n\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_46dual(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ifValuesPass = 0;
  PyObject *__pyx_v_startFinishOptions = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ifValuesPass,&__pyx_n_s__startFinishOptions,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("dual");
  __Pyx_TraceCall("dual", __pyx_f[0], 1005);
  {
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ifValuesPass);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__startFinishOptions);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "dual") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ifValuesPass = values[0];
    __pyx_v_startFinishOptions = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dual", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.dual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":1020
 * 
 *         '''
 *         return problemStatus[self.CppSelf.dual(             # <<<<<<<<<<<<<<
 *                             ifValuesPass, startFinishOptions)]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__problemStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "CyLP/cy/CyClpSimplex.pyx":1021
 *         '''
 *         return problemStatus[self.CppSelf.dual(
 *                             ifValuesPass, startFinishOptions)]             # <<<<<<<<<<<<<<
 * 
 *     def setPerturbation(self, value):
 */
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v_ifValuesPass); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_startFinishOptions); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->dual(__pyx_t_2, __pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_4, sizeof(int), PyInt_FromLong); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.dual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1023
 *                             ifValuesPass, startFinishOptions)]
 * 
 *     def setPerturbation(self, value):             # <<<<<<<<<<<<<<
 *         '''
 *         Perturb the problem by ``value``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_47setPerturbation(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_47setPerturbation[] = "CyClpSimplex.setPerturbation(self, value)\n\n        Perturb the problem by ``value``.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_47setPerturbation(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setPerturbation");
  __Pyx_TraceCall("setPerturbation", __pyx_f[0], 1023);

  /* "CyLP/cy/CyClpSimplex.pyx":1027
 *         Perturb the problem by ``value``.
 *         '''
 *         self.CppSelf.setPerturbation(value)             # <<<<<<<<<<<<<<
 * 
 *     cdef setPrimalColumnPivotAlgorithm(self, void* choice):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1027; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setPerturbation(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setPerturbation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1029
 *         self.CppSelf.setPerturbation(value)
 * 
 *     cdef setPrimalColumnPivotAlgorithm(self, void* choice):             # <<<<<<<<<<<<<<
 *         '''
 *         Set primal simplex's pivot rule to ``choice``
 */

static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setPrimalColumnPivotAlgorithm(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, void *__pyx_v_choice) {
  ClpPrimalColumnPivot *__pyx_v_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setPrimalColumnPivotAlgorithm");
  __Pyx_TraceCall("setPrimalColumnPivotAlgorithm", __pyx_f[0], 1029);

  /* "CyLP/cy/CyClpSimplex.pyx":1034
 *         This is used when setting a pivot rule in Cython
 *         '''
 *         cdef CppClpPrimalColumnPivot* c = <CppClpPrimalColumnPivot*> choice             # <<<<<<<<<<<<<<
 *         self.CppSelf.setPrimalColumnPivotAlgorithm(c)
 * 
 */
  __pyx_v_c = ((ClpPrimalColumnPivot *)__pyx_v_choice);

  /* "CyLP/cy/CyClpSimplex.pyx":1035
 *         '''
 *         cdef CppClpPrimalColumnPivot* c = <CppClpPrimalColumnPivot*> choice
 *         self.CppSelf.setPrimalColumnPivotAlgorithm(c)             # <<<<<<<<<<<<<<
 * 
 *     def resize(self, newNumberRows, newNumberColumns):
 */
  __pyx_v_self->CppSelf->setPrimalColumnPivotAlgorithm(__pyx_v_c);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1037
 *         self.CppSelf.setPrimalColumnPivotAlgorithm(c)
 * 
 *     def resize(self, newNumberRows, newNumberColumns):             # <<<<<<<<<<<<<<
 *         '''
 *         Resize the problem. After a call to ``resize`` the problem will have
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_48resize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_48resize[] = "CyClpSimplex.resize(self, newNumberRows, newNumberColumns)\n\n        Resize the problem. After a call to ``resize`` the problem will have\n        ``newNumberRows`` constraints and ``newNumberColumns`` variables.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_48resize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_newNumberRows = 0;
  PyObject *__pyx_v_newNumberColumns = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__newNumberRows,&__pyx_n_s__newNumberColumns,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("resize");
  __Pyx_TraceCall("resize", __pyx_f[0], 1037);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__newNumberRows);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__newNumberColumns);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("resize", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1037; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "resize") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1037; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_newNumberRows = values[0];
    __pyx_v_newNumberColumns = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("resize", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1037; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":1042
 *         ``newNumberRows`` constraints and ``newNumberColumns`` variables.
 *         '''
 *         self.CppSelf.resize(newNumberRows, newNumberColumns)             # <<<<<<<<<<<<<<
 * 
 *     def getBInvACol(self, col, np.ndarray[np.double_t, ndim=1] cl):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_newNumberRows); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v_newNumberColumns); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->resize(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1044
 *         self.CppSelf.resize(newNumberRows, newNumberColumns)
 * 
 *     def getBInvACol(self, col, np.ndarray[np.double_t, ndim=1] cl):             # <<<<<<<<<<<<<<
 *         '''
 *         Compute :math:`A_B^{-1}A_{col}` and store the result in ``cl``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_49getBInvACol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_49getBInvACol[] = "CyClpSimplex.getBInvACol(self, col, ndarray cl)\n\n        Compute :math:`A_B^{-1}A_{col}` and store the result in ``cl``.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_49getBInvACol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_col = 0;
  PyArrayObject *__pyx_v_cl = 0;
  Py_buffer __pyx_bstruct_cl;
  Py_ssize_t __pyx_bstride_0_cl = 0;
  Py_ssize_t __pyx_bshape_0_cl = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__col,&__pyx_n_s__cl,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getBInvACol");
  __Pyx_TraceCall("getBInvACol", __pyx_f[0], 1044);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__col);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cl);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getBInvACol", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1044; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getBInvACol") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1044; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_col = values[0];
    __pyx_v_cl = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getBInvACol", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1044; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getBInvACol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_bstruct_cl.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cl), __pyx_ptype_5numpy_ndarray, 1, "cl", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_cl, (PyObject*)__pyx_v_cl, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_cl = __pyx_bstruct_cl.strides[0];
  __pyx_bshape_0_cl = __pyx_bstruct_cl.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1048
 *         Compute :math:`A_B^{-1}A_{col}` and store the result in ``cl``.
 *         '''
 *         self.CppSelf.getBInvACol(col, <double*>cl.data)             # <<<<<<<<<<<<<<
 * 
 *     def transposeTimesSubset(self, number,
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_col); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getBInvACol(__pyx_t_1, ((double *)__pyx_v_cl->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_cl);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getBInvACol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_cl);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1050
 *         self.CppSelf.getBInvACol(col, <double*>cl.data)
 * 
 *     def transposeTimesSubset(self, number,             # <<<<<<<<<<<<<<
 *                              np.ndarray[np.int64_t, ndim=1] which,
 *                              np.ndarray[np.double_t, ndim=1] pi,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_50transposeTimesSubset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_50transposeTimesSubset[] = "CyClpSimplex.transposeTimesSubset(self, number, ndarray which, ndarray pi, ndarray y)\n\n        Compute :math:`y_{which} - pi^{T}A_{which}` where ``which`` is a\n        variable index set. Store the result in ``y``.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_50transposeTimesSubset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_number = 0;
  PyArrayObject *__pyx_v_which = 0;
  PyArrayObject *__pyx_v_pi = 0;
  PyArrayObject *__pyx_v_y = 0;
  Py_buffer __pyx_bstruct_y;
  Py_ssize_t __pyx_bstride_0_y = 0;
  Py_ssize_t __pyx_bshape_0_y = 0;
  Py_buffer __pyx_bstruct_pi;
  Py_ssize_t __pyx_bstride_0_pi = 0;
  Py_ssize_t __pyx_bshape_0_pi = 0;
  Py_buffer __pyx_bstruct_which;
  Py_ssize_t __pyx_bstride_0_which = 0;
  Py_ssize_t __pyx_bshape_0_which = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__number,&__pyx_n_s__which,&__pyx_n_s__pi,&__pyx_n_s__y,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("transposeTimesSubset");
  __Pyx_TraceCall("transposeTimesSubset", __pyx_f[0], 1050);
  {
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__number);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__which);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transposeTimesSubset", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pi);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transposeTimesSubset", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transposeTimesSubset", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "transposeTimesSubset") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_number = values[0];
    __pyx_v_which = ((PyArrayObject *)values[1]);
    __pyx_v_pi = ((PyArrayObject *)values[2]);
    __pyx_v_y = ((PyArrayObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transposeTimesSubset", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.transposeTimesSubset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_bstruct_which.buf = NULL;
  __pyx_bstruct_pi.buf = NULL;
  __pyx_bstruct_y.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_which), __pyx_ptype_5numpy_ndarray, 1, "which", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pi), __pyx_ptype_5numpy_ndarray, 1, "pi", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_which, (PyObject*)__pyx_v_which, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_which = __pyx_bstruct_which.strides[0];
  __pyx_bshape_0_which = __pyx_bstruct_which.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_pi, (PyObject*)__pyx_v_pi, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_pi = __pyx_bstruct_pi.strides[0];
  __pyx_bshape_0_pi = __pyx_bstruct_pi.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_y, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_y = __pyx_bstruct_y.strides[0];
  __pyx_bshape_0_y = __pyx_bstruct_y.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1058
 *         variable index set. Store the result in ``y``.
 *         '''
 *         self.CppSelf.transposeTimesSubset(number, <int*>which.data,             # <<<<<<<<<<<<<<
 *                                           <double*>pi.data, <double*>y.data)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_number); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1059
 *         '''
 *         self.CppSelf.transposeTimesSubset(number, <int*>which.data,
 *                                           <double*>pi.data, <double*>y.data)             # <<<<<<<<<<<<<<
 * 
 *     def transposeTimesSubsetAll(self,
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->transposeTimesSubset(__pyx_t_1, ((int *)__pyx_v_which->data), ((double *)__pyx_v_pi->data), ((double *)__pyx_v_y->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_y);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_pi);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_which);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.transposeTimesSubset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_y);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_pi);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_which);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1061
 *                                           <double*>pi.data, <double*>y.data)
 * 
 *     def transposeTimesSubsetAll(self,             # <<<<<<<<<<<<<<
 *                              np.ndarray[np.int64_t, ndim=1] which,
 *                              np.ndarray[np.double_t, ndim=1] pi,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_51transposeTimesSubsetAll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_51transposeTimesSubsetAll[] = "CyClpSimplex.transposeTimesSubsetAll(self, ndarray which, ndarray pi, ndarray y)\n\n        Same as :func:`transposeTimesSubset` but here ``which``\n        can also address slack variables.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_51transposeTimesSubsetAll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_which = 0;
  PyArrayObject *__pyx_v_pi = 0;
  PyArrayObject *__pyx_v_y = 0;
  Py_buffer __pyx_bstruct_y;
  Py_ssize_t __pyx_bstride_0_y = 0;
  Py_ssize_t __pyx_bshape_0_y = 0;
  Py_buffer __pyx_bstruct_pi;
  Py_ssize_t __pyx_bstride_0_pi = 0;
  Py_ssize_t __pyx_bshape_0_pi = 0;
  Py_buffer __pyx_bstruct_which;
  Py_ssize_t __pyx_bstride_0_which = 0;
  Py_ssize_t __pyx_bshape_0_which = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__which,&__pyx_n_s__pi,&__pyx_n_s__y,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("transposeTimesSubsetAll");
  __Pyx_TraceCall("transposeTimesSubsetAll", __pyx_f[0], 1061);
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__which);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pi);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transposeTimesSubsetAll", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transposeTimesSubsetAll", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "transposeTimesSubsetAll") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_which = ((PyArrayObject *)values[0]);
    __pyx_v_pi = ((PyArrayObject *)values[1]);
    __pyx_v_y = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transposeTimesSubsetAll", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.transposeTimesSubsetAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_bstruct_which.buf = NULL;
  __pyx_bstruct_pi.buf = NULL;
  __pyx_bstruct_y.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_which), __pyx_ptype_5numpy_ndarray, 1, "which", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1062; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pi), __pyx_ptype_5numpy_ndarray, 1, "pi", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_which, (PyObject*)__pyx_v_which, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_which = __pyx_bstruct_which.strides[0];
  __pyx_bshape_0_which = __pyx_bstruct_which.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_pi, (PyObject*)__pyx_v_pi, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_pi = __pyx_bstruct_pi.strides[0];
  __pyx_bshape_0_pi = __pyx_bstruct_pi.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_y, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_y = __pyx_bstruct_y.strides[0];
  __pyx_bshape_0_y = __pyx_bstruct_y.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1069
 *         can also address slack variables.
 *         '''
 *         self.CppSelf.transposeTimesSubsetAll(len(which),             # <<<<<<<<<<<<<<
 *                                             <long long int*>which.data,
 *                                             <double*>pi.data,
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_which)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1069; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1072
 *                                             <long long int*>which.data,
 *                                             <double*>pi.data,
 *                                             <double*>y.data)             # <<<<<<<<<<<<<<
 * 
 *     def setInteger(self, arg):
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->transposeTimesSubsetAll(__pyx_t_1, ((PY_LONG_LONG *)__pyx_v_which->data), ((double *)__pyx_v_pi->data), ((double *)__pyx_v_y->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_y);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_pi);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_which);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.transposeTimesSubsetAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_y);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_pi);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_which);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1074
 *                                             <double*>y.data)
 * 
 *     def setInteger(self, arg):             # <<<<<<<<<<<<<<
 *         '''
 *         if ``arg`` is an integer: mark variable index ``arg`` as integer.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_52setInteger(PyObject *__pyx_v_self, PyObject *__pyx_v_arg); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_52setInteger[] = "CyClpSimplex.setInteger(self, arg)\n\n        if ``arg`` is an integer: mark variable index ``arg`` as integer.\n        if ``arg`` is a :class:`CyLPVar` object: mark variable\n        ``arg`` as integer. Here is an example of the latter:\n\n        >>> import numpy as np\n        >>> from CyLP.cy import CyClpSimplex\n        >>> from CyLP.py.modeling.CyLPModel import CyLPModel, CyLPArray\n        >>> model = CyLPModel()\n        >>>\n        >>> x = model.addVariable('x', 3)\n        >>> y = model.addVariable('y', 2)\n        >>>\n        >>> A = np.matrix([[1., 2., 0],[1., 0, 1.]])\n        >>> B = np.matrix([[1., 0, 0], [0, 0, 1.]])\n        >>> D = np.matrix([[1., 2.],[0, 1]])\n        >>> a = CyLPArray([5, 2.5])\n        >>> b = CyLPArray([4.2, 3])\n        >>> x_u= CyLPArray([2., 3.5])\n        >>>\n        >>> model += A*x <= a\n        >>> model += 2 <= B * x + D * y <= b\n        >>> model += y >= 0\n        >>> model += 1.1 <= x[1:3] <= x_u\n        >>>\n        >>> c = CyLPArray([1., -2., 3.])\n        >>> model.objective = c * x + 2 * y.sum()\n        >>>\n        >>>\n        >>> s = CyClpSimplex(model)\n        >>> s.setInteger(x[1:3])\n        >>>\n        >>> cbcModel = s.getCbcModel()\n        >>> cbcModel.branchAndBound()\n        >>>\n        >>> sol_x = cbcModel.primalVariableSolution['x']\n        >>> (abs(sol_x -\n        ...     np.array([0.5, 2, 2]) ) <= 10**-6).all()\n        True\n        >>> sol_y = cbcModel.primalVariableSolution['y']\n        >>> (abs(sol_y -\n        ...     np.array([0, 0.75]) ) <= 10**-6).all()\n        True\n\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_52setInteger(PyObject *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_v_model = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_varName = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setInteger");
  __Pyx_TraceCall("setInteger", __pyx_f[0], 1074);

  /* "CyLP/cy/CyClpSimplex.pyx":1121
 *         '''
 * 
 *         if isinstance(arg, (int, long)):             # <<<<<<<<<<<<<<
 *             self.CppSelf.setInteger(arg)
 *         elif True:  # isinstance(arg, CyLPVar):
 */
  __Pyx_INCREF(__pyx_v_arg);
  __pyx_t_1 = __pyx_v_arg;
  __pyx_t_2 = PyInt_Check(__pyx_t_1); 
  if (!__pyx_t_2) {
    __pyx_t_3 = PyLong_Check(__pyx_t_1); 
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "CyLP/cy/CyClpSimplex.pyx":1122
 * 
 *         if isinstance(arg, (int, long)):
 *             self.CppSelf.setInteger(arg)             # <<<<<<<<<<<<<<
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 */
    __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_v_arg); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setInteger(__pyx_t_5);
    goto __pyx_L5;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":1124
 *             self.CppSelf.setInteger(arg)
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:             # <<<<<<<<<<<<<<
 *                 raise Exception('The argument of setInteger can be ' \
 *                                 'a CyLPVar only if the object is built ' \
 */
    __pyx_t_1 = PyObject_RichCompare(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel, Py_None, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "CyLP/cy/CyClpSimplex.pyx":1125
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setInteger can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
      __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_27), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "CyLP/cy/CyClpSimplex.pyx":1128
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 *             var = arg             # <<<<<<<<<<<<<<
 *             model = self.cyLPModel
 *             inds = model.inds
 */
    __Pyx_INCREF(__pyx_v_arg);
    __pyx_v_var = __pyx_v_arg;

    /* "CyLP/cy/CyClpSimplex.pyx":1129
 *                                 'using a CyLPModel.')
 *             var = arg
 *             model = self.cyLPModel             # <<<<<<<<<<<<<<
 *             inds = model.inds
 *             varName = var.name
 */
    __Pyx_INCREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    __pyx_v_model = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel;

    /* "CyLP/cy/CyClpSimplex.pyx":1130
 *             var = arg
 *             model = self.cyLPModel
 *             inds = model.inds             # <<<<<<<<<<<<<<
 *             varName = var.name
 *             if not inds.hasVar(varName):
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_model, __pyx_n_s__inds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_inds = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1131
 *             model = self.cyLPModel
 *             inds = model.inds
 *             varName = var.name             # <<<<<<<<<<<<<<
 *             if not inds.hasVar(varName):
 *                 raise Exception('No such variable: %s' % varName)
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_varName = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1132
 *             inds = model.inds
 *             varName = var.name
 *             if not inds.hasVar(varName):             # <<<<<<<<<<<<<<
 *                 raise Exception('No such variable: %s' % varName)
 *             x = inds.varIndex[varName]
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__hasVar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    __Pyx_INCREF(__pyx_v_varName);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_varName);
    __Pyx_GIVEREF(__pyx_v_varName);
    __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = (!__pyx_t_4);
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":1133
 *             varName = var.name
 *             if not inds.hasVar(varName):
 *                 raise Exception('No such variable: %s' % varName)             # <<<<<<<<<<<<<<
 *             x = inds.varIndex[varName]
 *             if var.parent:
 */
      __pyx_t_7 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_28), __pyx_v_varName); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
      PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_t_7));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_7));
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "CyLP/cy/CyClpSimplex.pyx":1134
 *             if not inds.hasVar(varName):
 *                 raise Exception('No such variable: %s' % varName)
 *             x = inds.varIndex[varName]             # <<<<<<<<<<<<<<
 *             if var.parent:
 *                 for i in var.indices:
 */
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyObject_GetItem(__pyx_t_7, __pyx_v_varName); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_x = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1135
 *                 raise Exception('No such variable: %s' % varName)
 *             x = inds.varIndex[varName]
 *             if var.parent:             # <<<<<<<<<<<<<<
 *                 for i in var.indices:
 *                     self.CppSelf.setInteger(x[i])
 */
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__parent); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":1136
 *             x = inds.varIndex[varName]
 *             if var.parent:
 *                 for i in var.indices:             # <<<<<<<<<<<<<<
 *                     self.CppSelf.setInteger(x[i])
 *             else:
 */
      __pyx_t_6 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__indices); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (PyList_CheckExact(__pyx_t_6) || PyTuple_CheckExact(__pyx_t_6)) {
        __pyx_t_7 = __pyx_t_6; __Pyx_INCREF(__pyx_t_7); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      for (;;) {
        if (PyList_CheckExact(__pyx_t_7)) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_7)) break;
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++;
        } else if (PyTuple_CheckExact(__pyx_t_7)) {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++;
        } else {
          __pyx_t_6 = __pyx_t_9(__pyx_t_7);
          if (unlikely(!__pyx_t_6)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_6;
        __pyx_t_6 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1137
 *             if var.parent:
 *                 for i in var.indices:
 *                     self.CppSelf.setInteger(x[i])             # <<<<<<<<<<<<<<
 *             else:
 *                 for i in xrange(var.dim):
 */
        __pyx_t_6 = PyObject_GetItem(__pyx_v_x, __pyx_v_i); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_6); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setInteger(__pyx_t_5);
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L8;
    }
    /*else*/ {

      /* "CyLP/cy/CyClpSimplex.pyx":1139
 *                     self.CppSelf.setInteger(x[i])
 *             else:
 *                 for i in xrange(var.dim):             # <<<<<<<<<<<<<<
 *                     self.CppSelf.setInteger(x[i])
 * 
 */
      __pyx_t_7 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dim); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_6 = __pyx_t_7; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (PyList_CheckExact(__pyx_t_6)) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++;
        } else if (PyTuple_CheckExact(__pyx_t_6)) {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++;
        } else {
          __pyx_t_7 = __pyx_t_9(__pyx_t_6);
          if (unlikely(!__pyx_t_7)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1140
 *             else:
 *                 for i in xrange(var.dim):
 *                     self.CppSelf.setInteger(x[i])             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_7 = PyObject_GetItem(__pyx_v_x, __pyx_v_i); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_7); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setInteger(__pyx_t_5);
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_L8:;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setInteger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_varName);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1143
 * 
 * 
 *     def copyInIntegerInformation(self, np.ndarray[np.uint8_t, ndim=1] colType):             # <<<<<<<<<<<<<<
 *         '''
 *         Take in a character array containing 0-1 specifying whether or not
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_53copyInIntegerInformation(PyObject *__pyx_v_self, PyObject *__pyx_v_colType); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_53copyInIntegerInformation[] = "CyClpSimplex.copyInIntegerInformation(self, ndarray colType)\n\n        Take in a character array containing 0-1 specifying whether or not\n        a variable is integer\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_53copyInIntegerInformation(PyObject *__pyx_v_self, PyObject *__pyx_v_colType) {
  Py_buffer __pyx_bstruct_colType;
  Py_ssize_t __pyx_bstride_0_colType = 0;
  Py_ssize_t __pyx_bshape_0_colType = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("copyInIntegerInformation");
  __Pyx_TraceCall("copyInIntegerInformation", __pyx_f[0], 1143);
  __pyx_bstruct_colType.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_colType), __pyx_ptype_5numpy_ndarray, 1, "colType", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_colType, (PyObject*)__pyx_v_colType, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_colType = __pyx_bstruct_colType.strides[0];
  __pyx_bshape_0_colType = __pyx_bstruct_colType.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1148
 *         a variable is integer
 *         '''
 *         self.CppSelf.copyInIntegerInformation(<char*>colType.data)             # <<<<<<<<<<<<<<
 * 
 *     def replaceMatrix(self, CyCoinPackedMatrix matrix, deleteCurrent=False):
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->copyInIntegerInformation(((char *)((PyArrayObject *)__pyx_v_colType)->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_colType);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.copyInIntegerInformation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_colType);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1150
 *         self.CppSelf.copyInIntegerInformation(<char*>colType.data)
 * 
 *     def replaceMatrix(self, CyCoinPackedMatrix matrix, deleteCurrent=False):             # <<<<<<<<<<<<<<
 *         self.CppSelf.replaceMatrix(matrix.CppSelf, deleteCurrent)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_54replaceMatrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_54replaceMatrix[] = "CyClpSimplex.replaceMatrix(self, CyCoinPackedMatrix matrix, deleteCurrent=False)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_54replaceMatrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_matrix = 0;
  PyObject *__pyx_v_deleteCurrent = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__matrix,&__pyx_n_s__deleteCurrent,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("replaceMatrix");
  __Pyx_TraceCall("replaceMatrix", __pyx_f[0], 1150);
  {
    PyObject* values[2] = {0,0};
    values[1] = __pyx_k_29;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__matrix);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__deleteCurrent);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "replaceMatrix") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_matrix = ((struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *)values[0]);
    __pyx_v_deleteCurrent = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("replaceMatrix", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.replaceMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_matrix), __pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix, 1, "matrix", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1151
 * 
 *     def replaceMatrix(self, CyCoinPackedMatrix matrix, deleteCurrent=False):
 *         self.CppSelf.replaceMatrix(matrix.CppSelf, deleteCurrent)             # <<<<<<<<<<<<<<
 * 
 *     def loadQuadraticObjective(self, CyCoinPackedMatrix matrix):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_deleteCurrent); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->replaceMatrix(__pyx_v_matrix->CppSelf, __pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.replaceMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1153
 *         self.CppSelf.replaceMatrix(matrix.CppSelf, deleteCurrent)
 * 
 *     def loadQuadraticObjective(self, CyCoinPackedMatrix matrix):             # <<<<<<<<<<<<<<
 *         self.CppSelf.loadQuadraticObjective(matrix.CppSelf)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_55loadQuadraticObjective(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_55loadQuadraticObjective[] = "CyClpSimplex.loadQuadraticObjective(self, CyCoinPackedMatrix matrix)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_55loadQuadraticObjective(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("loadQuadraticObjective");
  __Pyx_TraceCall("loadQuadraticObjective", __pyx_f[0], 1153);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_matrix), __pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix, 1, "matrix", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1154
 * 
 *     def loadQuadraticObjective(self, CyCoinPackedMatrix matrix):
 *         self.CppSelf.loadQuadraticObjective(matrix.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     def preSolve(self, feasibilityTolerance=0.0,
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->loadQuadraticObjective(((struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *)__pyx_v_matrix)->CppSelf);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.loadQuadraticObjective", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1156
 *         self.CppSelf.loadQuadraticObjective(matrix.CppSelf)
 * 
 *     def preSolve(self, feasibilityTolerance=0.0,             # <<<<<<<<<<<<<<
 *                  keepIntegers=0, numberPasses=5,
 *                  dropNames=0, doRowObjective=0):
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_56preSolve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_56preSolve[] = "CyClpSimplex.preSolve(self, feasibilityTolerance=0.0, keepIntegers=0, numberPasses=5, dropNames=0, doRowObjective=0)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_56preSolve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_feasibilityTolerance = 0;
  PyObject *__pyx_v_keepIntegers = 0;
  PyObject *__pyx_v_numberPasses = 0;
  PyObject *__pyx_v_dropNames = 0;
  PyObject *__pyx_v_doRowObjective = 0;
  IClpSimplex *__pyx_v_model;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_30,&__pyx_n_s__keepIntegers,&__pyx_n_s__numberPasses,&__pyx_n_s__dropNames,&__pyx_n_s__doRowObjective,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("preSolve");
  __Pyx_TraceCall("preSolve", __pyx_f[0], 1156);
  {
    PyObject* values[5] = {0,0,0,0,0};
    values[0] = __pyx_k_31;
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_5);
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_30);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__keepIntegers);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__numberPasses);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dropNames);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__doRowObjective);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "preSolve") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_feasibilityTolerance = values[0];
    __pyx_v_keepIntegers = values[1];
    __pyx_v_numberPasses = values[2];
    __pyx_v_dropNames = values[3];
    __pyx_v_doRowObjective = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("preSolve", 0, 0, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.preSolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":1160
 *                  dropNames=0, doRowObjective=0):
 *         cdef CppIClpSimplex* model = self.CppSelf.preSolve(self.CppSelf,
 *                                 feasibilityTolerance, keepIntegers,             # <<<<<<<<<<<<<<
 *                                 numberPasses, dropNames, doRowObjective)
 *         if model == NULL:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_feasibilityTolerance); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_keepIntegers); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1161
 *         cdef CppIClpSimplex* model = self.CppSelf.preSolve(self.CppSelf,
 *                                 feasibilityTolerance, keepIntegers,
 *                                 numberPasses, dropNames, doRowObjective)             # <<<<<<<<<<<<<<
 *         if model == NULL:
 *             print "Presolve says problem infeasible."
 */
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_numberPasses); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_dropNames); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_doRowObjective); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_model = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->preSolve(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf, __pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_t_5);

  /* "CyLP/cy/CyClpSimplex.pyx":1162
 *                                 feasibilityTolerance, keepIntegers,
 *                                 numberPasses, dropNames, doRowObjective)
 *         if model == NULL:             # <<<<<<<<<<<<<<
 *             print "Presolve says problem infeasible."
 *             return
 */
  __pyx_t_5 = (__pyx_v_model == NULL);
  if (__pyx_t_5) {

    /* "CyLP/cy/CyClpSimplex.pyx":1163
 *                                 numberPasses, dropNames, doRowObjective)
 *         if model == NULL:
 *             print "Presolve says problem infeasible."             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_32)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "CyLP/cy/CyClpSimplex.pyx":1164
 *         if model == NULL:
 *             print "Presolve says problem infeasible."
 *             return             # <<<<<<<<<<<<<<
 * 
 *         self.setCppSelf(model)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "CyLP/cy/CyClpSimplex.pyx":1166
 *             return
 * 
 *         self.setCppSelf(model)             # <<<<<<<<<<<<<<
 * 
 *     def writeMps(self, filename, formatType=0, numberAcross=2, objSense=0):
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->setCppSelf(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_model); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.preSolve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1168
 *         self.setCppSelf(model)
 * 
 *     def writeMps(self, filename, formatType=0, numberAcross=2, objSense=0):             # <<<<<<<<<<<<<<
 *         try:
 *             f = open(filename, 'w')
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_57writeMps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_57writeMps[] = "CyClpSimplex.writeMps(self, filename, formatType=0, numberAcross=2, objSense=0)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_57writeMps(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_formatType = 0;
  PyObject *__pyx_v_numberAcross = 0;
  PyObject *__pyx_v_objSense = 0;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_v_varinds = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_con = NULL;
  PyObject *__pyx_v_coninds = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  char *__pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  double __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__formatType,&__pyx_n_s__numberAcross,&__pyx_n_s__objSense,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("writeMps");
  __Pyx_TraceCall("writeMps", __pyx_f[0], 1168);
  {
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_2);
    values[3] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__formatType);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__numberAcross);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__objSense);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "writeMps") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_formatType = values[1];
    __pyx_v_numberAcross = values[2];
    __pyx_v_objSense = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeMps", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.writeMps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":1169
 * 
 *     def writeMps(self, filename, formatType=0, numberAcross=2, objSense=0):
 *         try:             # <<<<<<<<<<<<<<
 *             f = open(filename, 'w')
 *             f.close()
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "CyLP/cy/CyClpSimplex.pyx":1170
 *     def writeMps(self, filename, formatType=0, numberAcross=2, objSense=0):
 *         try:
 *             f = open(filename, 'w')             # <<<<<<<<<<<<<<
 *             f.close()
 *         except:
 */
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1170; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      __Pyx_INCREF(__pyx_v_filename);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_filename);
      __Pyx_GIVEREF(__pyx_v_filename);
      __Pyx_INCREF(((PyObject *)__pyx_n_s__w));
      PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_n_s__w));
      __Pyx_GIVEREF(((PyObject *)__pyx_n_s__w));
      __pyx_t_5 = PyObject_Call(__pyx_builtin_open, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1170; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __pyx_v_f = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1171
 *         try:
 *             f = open(filename, 'w')
 *             f.close()             # <<<<<<<<<<<<<<
 *         except:
 *             raise Exception('No write access for %s or an intermediate \
 */
      __pyx_t_5 = PyObject_GetAttr(__pyx_v_f, __pyx_n_s__close); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1171; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L13_try_end;
    __pyx_L6_error:;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1172
 *             f = open(filename, 'w')
 *             f.close()
 *         except:             # <<<<<<<<<<<<<<
 *             raise Exception('No write access for %s or an intermediate \
 *                             directory does not exist.' % filename)
 */
    /*except:*/ {
      __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.writeMps", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);

      /* "CyLP/cy/CyClpSimplex.pyx":1174
 *         except:
 *             raise Exception('No write access for %s or an intermediate \
 *                             directory does not exist.' % filename)             # <<<<<<<<<<<<<<
 * 
 *         m = self.cyLPModel
 */
      __pyx_t_7 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_33), __pyx_v_filename); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1174; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_8));
      PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_t_7));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_7));
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L7_exception_handled;
    }
    __pyx_L8_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L13_try_end:;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1176
 *                             directory does not exist.' % filename)
 * 
 *         m = self.cyLPModel             # <<<<<<<<<<<<<<
 *         if m:
 *             inds = m.inds
 */
  __Pyx_INCREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
  __pyx_v_m = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel;

  /* "CyLP/cy/CyClpSimplex.pyx":1177
 * 
 *         m = self.cyLPModel
 *         if m:             # <<<<<<<<<<<<<<
 *             inds = m.inds
 *             for var in m.variables:
 */
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_m); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_9) {

    /* "CyLP/cy/CyClpSimplex.pyx":1178
 *         m = self.cyLPModel
 *         if m:
 *             inds = m.inds             # <<<<<<<<<<<<<<
 *             for var in m.variables:
 *                 varinds = inds.varIndex[var.name]
 */
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__inds); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_inds = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1179
 *         if m:
 *             inds = m.inds
 *             for var in m.variables:             # <<<<<<<<<<<<<<
 *                 varinds = inds.varIndex[var.name]
 *                 for i in xrange(var.dim):
 */
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__variables); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    if (PyList_CheckExact(__pyx_t_6) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = Py_TYPE(__pyx_t_5)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (PyList_CheckExact(__pyx_t_5)) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++;
      } else if (PyTuple_CheckExact(__pyx_t_5)) {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++;
      } else {
        __pyx_t_6 = __pyx_t_11(__pyx_t_5);
        if (unlikely(!__pyx_t_6)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF(__pyx_v_var);
      __pyx_v_var = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1180
 *             inds = m.inds
 *             for var in m.variables:
 *                 varinds = inds.varIndex[var.name]             # <<<<<<<<<<<<<<
 *                 for i in xrange(var.dim):
 *                     self.setVariableName(varinds[i], var.mpsNames[i])
 */
      __pyx_t_6 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__name); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyObject_GetItem(__pyx_t_6, __pyx_t_4); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_v_varinds);
      __pyx_v_varinds = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1181
 *             for var in m.variables:
 *                 varinds = inds.varIndex[var.name]
 *                 for i in xrange(var.dim):             # <<<<<<<<<<<<<<
 *                     self.setVariableName(varinds[i], var.mpsNames[i])
 * 
 */
      __pyx_t_7 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dim); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_4 = __pyx_t_7; __Pyx_INCREF(__pyx_t_4); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (PyList_CheckExact(__pyx_t_4)) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_4)) break;
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++;
        } else if (PyTuple_CheckExact(__pyx_t_4)) {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_12); __Pyx_INCREF(__pyx_t_7); __pyx_t_12++;
        } else {
          __pyx_t_7 = __pyx_t_13(__pyx_t_4);
          if (unlikely(!__pyx_t_7)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1182
 *                 varinds = inds.varIndex[var.name]
 *                 for i in xrange(var.dim):
 *                     self.setVariableName(varinds[i], var.mpsNames[i])             # <<<<<<<<<<<<<<
 * 
 *             for con in m.constraints:
 */
        __pyx_t_7 = PyObject_GetItem(__pyx_v_varinds, __pyx_v_i); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__mpsNames); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = PyObject_GetItem(__pyx_t_6, __pyx_v_i); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->setVariableName(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_t_7, __pyx_t_8, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1184
 *                     self.setVariableName(varinds[i], var.mpsNames[i])
 * 
 *             for con in m.constraints:             # <<<<<<<<<<<<<<
 *                 coninds = inds.constIndex[con.name]
 *                 for i in xrange(con.nRows):
 */
    __pyx_t_5 = PyObject_GetAttr(__pyx_v_m, __pyx_n_s__constraints); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyList_CheckExact(__pyx_t_5) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = Py_TYPE(__pyx_t_4)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (PyList_CheckExact(__pyx_t_4)) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_4)) break;
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++;
      } else if (PyTuple_CheckExact(__pyx_t_4)) {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++;
      } else {
        __pyx_t_5 = __pyx_t_11(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF(__pyx_v_con);
      __pyx_v_con = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1185
 * 
 *             for con in m.constraints:
 *                 coninds = inds.constIndex[con.name]             # <<<<<<<<<<<<<<
 *                 for i in xrange(con.nRows):
 *                     self.setConstraintName(coninds[i], con.mpsNames[i])
 */
      __pyx_t_5 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__constIndex); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyObject_GetAttr(__pyx_v_con, __pyx_n_s__name); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = PyObject_GetItem(__pyx_t_5, __pyx_t_6); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_v_coninds);
      __pyx_v_coninds = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1186
 *             for con in m.constraints:
 *                 coninds = inds.constIndex[con.name]
 *                 for i in xrange(con.nRows):             # <<<<<<<<<<<<<<
 *                     self.setConstraintName(coninds[i], con.mpsNames[i])
 * 
 */
      __pyx_t_8 = PyObject_GetAttr(__pyx_v_con, __pyx_n_s__nRows); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
      if (PyList_CheckExact(__pyx_t_8) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_6 = __pyx_t_8; __Pyx_INCREF(__pyx_t_6); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (PyList_CheckExact(__pyx_t_6)) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_6)) break;
          __pyx_t_8 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++;
        } else if (PyTuple_CheckExact(__pyx_t_6)) {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++;
        } else {
          __pyx_t_8 = __pyx_t_13(__pyx_t_6);
          if (unlikely(!__pyx_t_8)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_8;
        __pyx_t_8 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1187
 *                 coninds = inds.constIndex[con.name]
 *                 for i in xrange(con.nRows):
 *                     self.setConstraintName(coninds[i], con.mpsNames[i])             # <<<<<<<<<<<<<<
 * 
 *         return self.CppSelf.writeMps(filename, formatType, numberAcross,
 */
        __pyx_t_8 = PyObject_GetItem(__pyx_v_coninds, __pyx_v_i); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = PyObject_GetAttr(__pyx_v_con, __pyx_n_s__mpsNames); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = PyObject_GetItem(__pyx_t_5, __pyx_v_i); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->setConstraintName(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_t_8, __pyx_t_7, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L16;
  }
  __pyx_L16:;

  /* "CyLP/cy/CyClpSimplex.pyx":1189
 *                     self.setConstraintName(coninds[i], con.mpsNames[i])
 * 
 *         return self.CppSelf.writeMps(filename, formatType, numberAcross,             # <<<<<<<<<<<<<<
 *                                      objSense)
 *     #############################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_14 = PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_15 = __Pyx_PyInt_AsInt(__pyx_v_formatType); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_16 = __Pyx_PyInt_AsInt(__pyx_v_numberAcross); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1190
 * 
 *         return self.CppSelf.writeMps(filename, formatType, numberAcross,
 *                                      objSense)             # <<<<<<<<<<<<<<
 *     #############################################
 *     # Modeling
 */
  __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_v_objSense); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = PyInt_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->writeMps(__pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.writeMps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_varinds);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_con);
  __Pyx_XDECREF(__pyx_v_coninds);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1195
 *     #############################################
 * 
 *     def loadFromCyLPModel(self, cyLPModel):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the coefficient matrix, constraint bounds, and variable
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_58loadFromCyLPModel(PyObject *__pyx_v_self, PyObject *__pyx_v_cyLPModel); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_58loadFromCyLPModel[] = "CyClpSimplex.loadFromCyLPModel(self, cyLPModel)\n\n        Set the coefficient matrix, constraint bounds, and variable\n        bounds based on the data in *cyLPModel* which should be and object\n        of *CyLPModel* class.\n\n        This method is usually called from CyClpSimplex's constructor.\n        But in a case that the CyClpSimplex instance is created before\n        we have the CyLPModel we use this method to load the LP,\n        for example:\n\n        >>> import numpy as np\n        >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getModelExample\n        >>>\n        >>> s = CyClpSimplex()\n        >>> model = getModelExample()\n        >>> s.loadFromCyLPModel(model)\n        >>>\n        >>> s.primal()\n        'optimal'\n        >>> sol_x = s.primalVariableSolution['x']\n        >>> (abs(sol_x -\n        ...     np.array([0.2, 2, 1.1]) ) <= 10**-6).all()\n        True\n\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_58loadFromCyLPModel(PyObject *__pyx_v_self, PyObject *__pyx_v_cyLPModel) {
  PyObject *__pyx_v_mat = NULL;
  PyObject *__pyx_v_constraintLower = NULL;
  PyObject *__pyx_v_constraintUpper = NULL;
  PyObject *__pyx_v_variableLower = NULL;
  PyObject *__pyx_v_variableUpper = NULL;
  Py_ssize_t __pyx_v_n;
  Py_ssize_t __pyx_v_m;
  struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_coinMat = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_variables = NULL;
  PyObject *__pyx_v_curVarInd = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("loadFromCyLPModel");
  __Pyx_TraceCall("loadFromCyLPModel", __pyx_f[0], 1195);

  /* "CyLP/cy/CyClpSimplex.pyx":1221
 * 
 *         '''
 *         self.cyLPModel = cyLPModel             # <<<<<<<<<<<<<<
 *         (mat, constraintLower, constraintUpper,
 *                     variableLower, variableUpper) = cyLPModel.makeMatrices()
 */
  __Pyx_INCREF(__pyx_v_cyLPModel);
  __Pyx_GIVEREF(__pyx_v_cyLPModel);
  __Pyx_GOTREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
  __Pyx_DECREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel = __pyx_v_cyLPModel;

  /* "CyLP/cy/CyClpSimplex.pyx":1223
 *         self.cyLPModel = cyLPModel
 *         (mat, constraintLower, constraintUpper,
 *                     variableLower, variableUpper) = cyLPModel.makeMatrices()             # <<<<<<<<<<<<<<
 * 
 *         n = len(variableLower)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_cyLPModel, __pyx_n_s__makeMatrices); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    if (likely(PyTuple_CheckExact(sequence))) {
      if (unlikely(PyTuple_GET_SIZE(sequence) != 5)) {
        if (PyTuple_GET_SIZE(sequence) > 5) __Pyx_RaiseTooManyValuesError(5);
        else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 4); 
    } else {
      if (unlikely(PyList_GET_SIZE(sequence) != 5)) {
        if (PyList_GET_SIZE(sequence) > 5) __Pyx_RaiseTooManyValuesError(5);
        else __Pyx_RaiseNeedMoreValuesError(PyList_GET_SIZE(sequence));
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 4); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 3; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    index = 4; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_6);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_StopIteration)) PyErr_Clear();
    if (!PyErr_Occurred()) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L6_unpacking_done:;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1222
 *         '''
 *         self.cyLPModel = cyLPModel
 *         (mat, constraintLower, constraintUpper,             # <<<<<<<<<<<<<<
 *                     variableLower, variableUpper) = cyLPModel.makeMatrices()
 * 
 */
  __pyx_v_mat = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_constraintLower = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_constraintUpper = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_variableLower = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_variableUpper = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1225
 *                     variableLower, variableUpper) = cyLPModel.makeMatrices()
 * 
 *         n = len(variableLower)             # <<<<<<<<<<<<<<
 *         m = len(constraintLower)
 *         if n == 0 or m == 0:
 */
  __pyx_t_9 = PyObject_Length(__pyx_v_variableLower); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_n = __pyx_t_9;

  /* "CyLP/cy/CyClpSimplex.pyx":1226
 * 
 *         n = len(variableLower)
 *         m = len(constraintLower)             # <<<<<<<<<<<<<<
 *         if n == 0 or m == 0:
 *             return
 */
  __pyx_t_9 = PyObject_Length(__pyx_v_constraintLower); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_m = __pyx_t_9;

  /* "CyLP/cy/CyClpSimplex.pyx":1227
 *         n = len(variableLower)
 *         m = len(constraintLower)
 *         if n == 0 or m == 0:             # <<<<<<<<<<<<<<
 *             return
 * #        print 'm'
 */
  __pyx_t_10 = (__pyx_v_n == 0);
  if (!__pyx_t_10) {
    __pyx_t_11 = (__pyx_v_m == 0);
    __pyx_t_12 = __pyx_t_11;
  } else {
    __pyx_t_12 = __pyx_t_10;
  }
  if (__pyx_t_12) {

    /* "CyLP/cy/CyClpSimplex.pyx":1228
 *         m = len(constraintLower)
 *         if n == 0 or m == 0:
 *             return             # <<<<<<<<<<<<<<
 * #        print 'm'
 * #        mmm = mat.todense()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "CyLP/cy/CyClpSimplex.pyx":1254
 * 
 * 
 *         if not isinstance(mat, sparse.coo_matrix):             # <<<<<<<<<<<<<<
 *             mat = mat.tocoo()
 * 
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__sparse); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__coo_matrix); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_12 = PyObject_IsInstance(__pyx_v_mat, __pyx_t_6); if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_10 = (!__pyx_t_12);
  if (__pyx_t_10) {

    /* "CyLP/cy/CyClpSimplex.pyx":1255
 * 
 *         if not isinstance(mat, sparse.coo_matrix):
 *             mat = mat.tocoo()             # <<<<<<<<<<<<<<
 * 
 *         coinMat = CyCoinPackedMatrix(True, np.array(mat.row, np.int32),
 */
    __pyx_t_6 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__tocoo); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_v_mat);
    __pyx_v_mat = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "CyLP/cy/CyClpSimplex.pyx":1257
 *             mat = mat.tocoo()
 * 
 *         coinMat = CyCoinPackedMatrix(True, np.array(mat.row, np.int32),             # <<<<<<<<<<<<<<
 *                                         np.array(mat.col, np.int32),
 *                                         np.array(mat.data, np.double))
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__array); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__row); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__int32); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_6 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1258
 * 
 *         coinMat = CyCoinPackedMatrix(True, np.array(mat.row, np.int32),
 *                                         np.array(mat.col, np.int32),             # <<<<<<<<<<<<<<
 *                                         np.array(mat.data, np.double))
 * 
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__array); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__col); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__int32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_6));
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1259
 *         coinMat = CyCoinPackedMatrix(True, np.array(mat.row, np.int32),
 *                                         np.array(mat.col, np.int32),
 *                                         np.array(mat.data, np.double))             # <<<<<<<<<<<<<<
 * 
 *         #row = np.array(mat.row, np.int32) + m * np.ones(len(mat.row), dtype=np.int32)
 */
  __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__array); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_GetAttr(__pyx_v_mat, __pyx_n_s__data); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__double); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix)), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_v_coinMat = ((struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1272
 * 
 *         #start adding the arrays and the matrix to the problem
 *         self.resize(m, n)             # <<<<<<<<<<<<<<
 * 
 *         for i in xrange(n):
 */
  __pyx_t_7 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__resize); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_m); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_n); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1274
 *         self.resize(m, n)
 * 
 *         for i in xrange(n):             # <<<<<<<<<<<<<<
 *             self.setColumnLower(i, variableLower[i])
 *             self.setColumnUpper(i, variableUpper[i])
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_n); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_13 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++;
    } else if (PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++;
    } else {
      __pyx_t_1 = __pyx_t_13(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1275
 * 
 *         for i in xrange(n):
 *             self.setColumnLower(i, variableLower[i])             # <<<<<<<<<<<<<<
 *             self.setColumnUpper(i, variableUpper[i])
 * 
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__setColumnLower); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyObject_GetItem(__pyx_v_variableLower, __pyx_v_i); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1276
 *         for i in xrange(n):
 *             self.setColumnLower(i, variableLower[i])
 *             self.setColumnUpper(i, variableUpper[i])             # <<<<<<<<<<<<<<
 * 
 *         for i in xrange(m):
 */
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__setColumnUpper); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PyObject_GetItem(__pyx_v_variableUpper, __pyx_v_i); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1278
 *             self.setColumnUpper(i, variableUpper[i])
 * 
 *         for i in xrange(m):             # <<<<<<<<<<<<<<
 *             self.setRowLower(i, constraintLower[i])
 *             self.setRowUpper(i, constraintUpper[i])
 */
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_m); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_9 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++;
    } else if (PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++;
    } else {
      __pyx_t_3 = __pyx_t_13(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1279
 * 
 *         for i in xrange(m):
 *             self.setRowLower(i, constraintLower[i])             # <<<<<<<<<<<<<<
 *             self.setRowUpper(i, constraintUpper[i])
 * 
 */
    __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__setRowLower); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_GetItem(__pyx_v_constraintLower, __pyx_v_i); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_7));
    __Pyx_INCREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1280
 *         for i in xrange(m):
 *             self.setRowLower(i, constraintLower[i])
 *             self.setRowUpper(i, constraintUpper[i])             # <<<<<<<<<<<<<<
 * 
 *         #setting integer informations
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__setRowUpper); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyObject_GetItem(__pyx_v_constraintUpper, __pyx_v_i); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1283
 * 
 *         #setting integer informations
 *         variables = cyLPModel.variables             # <<<<<<<<<<<<<<
 *         curVarInd = 0
 *         for var in variables:
 */
  __pyx_t_4 = PyObject_GetAttr(__pyx_v_cyLPModel, __pyx_n_s__variables); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_variables = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1284
 *         #setting integer informations
 *         variables = cyLPModel.variables
 *         curVarInd = 0             # <<<<<<<<<<<<<<
 *         for var in variables:
 *             if var.isInt:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_curVarInd = __pyx_int_0;

  /* "CyLP/cy/CyClpSimplex.pyx":1285
 *         variables = cyLPModel.variables
 *         curVarInd = 0
 *         for var in variables:             # <<<<<<<<<<<<<<
 *             if var.isInt:
 *                 for i in xrange(curVarInd, curVarInd + var.dim):
 */
  if (PyList_CheckExact(__pyx_v_variables) || PyTuple_CheckExact(__pyx_v_variables)) {
    __pyx_t_4 = __pyx_v_variables; __Pyx_INCREF(__pyx_t_4); __pyx_t_9 = 0;
    __pyx_t_13 = NULL;
  } else {
    __pyx_t_9 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_variables); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  for (;;) {
    if (PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++;
    } else if (PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++;
    } else {
      __pyx_t_7 = __pyx_t_13(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF(__pyx_v_var);
    __pyx_v_var = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1286
 *         curVarInd = 0
 *         for var in variables:
 *             if var.isInt:             # <<<<<<<<<<<<<<
 *                 for i in xrange(curVarInd, curVarInd + var.dim):
 *                     self.setInteger(i)
 */
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__isInt); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_10) {

      /* "CyLP/cy/CyClpSimplex.pyx":1287
 *         for var in variables:
 *             if var.isInt:
 *                 for i in xrange(curVarInd, curVarInd + var.dim):             # <<<<<<<<<<<<<<
 *                     self.setInteger(i)
 *             curVarInd += var.dim
 */
      __pyx_t_7 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dim); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = PyNumber_Add(__pyx_v_curVarInd, __pyx_t_7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_7));
      __Pyx_INCREF(__pyx_v_curVarInd);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_curVarInd);
      __Pyx_GIVEREF(__pyx_v_curVarInd);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
      if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_7 = __pyx_t_3; __Pyx_INCREF(__pyx_t_7); __pyx_t_14 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_15 = Py_TYPE(__pyx_t_7)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (PyList_CheckExact(__pyx_t_7)) {
          if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_7)) break;
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_14); __Pyx_INCREF(__pyx_t_3); __pyx_t_14++;
        } else if (PyTuple_CheckExact(__pyx_t_7)) {
          if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_14); __Pyx_INCREF(__pyx_t_3); __pyx_t_14++;
        } else {
          __pyx_t_3 = __pyx_t_15(__pyx_t_7);
          if (unlikely(!__pyx_t_3)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF(__pyx_v_i);
        __pyx_v_i = __pyx_t_3;
        __pyx_t_3 = 0;

        /* "CyLP/cy/CyClpSimplex.pyx":1288
 *             if var.isInt:
 *                 for i in xrange(curVarInd, curVarInd + var.dim):
 *                     self.setInteger(i)             # <<<<<<<<<<<<<<
 *             curVarInd += var.dim
 * 
 */
        __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__setInteger); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));
        __Pyx_INCREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L15;
    }
    __pyx_L15:;

    /* "CyLP/cy/CyClpSimplex.pyx":1289
 *                 for i in xrange(curVarInd, curVarInd + var.dim):
 *                     self.setInteger(i)
 *             curVarInd += var.dim             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_7 = PyObject_GetAttr(__pyx_v_var, __pyx_n_s__dim); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_curVarInd, __pyx_t_7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_v_curVarInd);
    __pyx_v_curVarInd = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1292
 * 
 * 
 *         if cyLPModel.objective != None:             # <<<<<<<<<<<<<<
 *             self.objective = cyLPModel.objective
 * #            if isinstance(cyLPModel.objective, np.ndarray):
 */
  __pyx_t_4 = PyObject_GetAttr(__pyx_v_cyLPModel, __pyx_n_s__objective); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, Py_None, Py_NE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {

    /* "CyLP/cy/CyClpSimplex.pyx":1293
 * 
 *         if cyLPModel.objective != None:
 *             self.objective = cyLPModel.objective             # <<<<<<<<<<<<<<
 * #            if isinstance(cyLPModel.objective, np.ndarray):
 * #                self.setObjectiveArray(cyLPModel.objective.astype(np.double))
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_cyLPModel, __pyx_n_s__objective); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s__objective, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L18;
  }
  __pyx_L18:;

  /* "CyLP/cy/CyClpSimplex.pyx":1309
 * 
 * 
 *         self.replaceMatrix(coinMat, True)             # <<<<<<<<<<<<<<
 * 
 *     #############################################
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__replaceMatrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_7));
  __Pyx_INCREF(((PyObject *)__pyx_v_coinMat));
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_coinMat));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_coinMat));
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.loadFromCyLPModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_mat);
  __Pyx_XDECREF(__pyx_v_constraintLower);
  __Pyx_XDECREF(__pyx_v_constraintUpper);
  __Pyx_XDECREF(__pyx_v_variableLower);
  __Pyx_XDECREF(__pyx_v_variableUpper);
  __Pyx_XDECREF((PyObject *)__pyx_v_coinMat);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_variables);
  __Pyx_XDECREF(__pyx_v_curVarInd);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1315
 *     #############################################
 * 
 *     def getCbcModel(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Run initialSolve, return a :class:`CyCbcModel` object that can be
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_59getCbcModel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_59getCbcModel[] = "CyClpSimplex.getCbcModel(self)\n\n        Run initialSolve, return a :class:`CyCbcModel` object that can be\n        used to add cuts, run B&B and ...\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_59getCbcModel(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  ICbcModel *__pyx_v_model;
  struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel *__pyx_v_cm = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getCbcModel");
  __Pyx_TraceCall("getCbcModel", __pyx_f[0], 1315);

  /* "CyLP/cy/CyClpSimplex.pyx":1320
 *         used to add cuts, run B&B and ...
 *         '''
 *         cdef CppICbcModel* model = self.CppSelf.getICbcModel()             # <<<<<<<<<<<<<<
 *         cm =  CyCbcModel()
 *         cm.setCppSelf(model)
 */
  __pyx_v_model = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getICbcModel();

  /* "CyLP/cy/CyClpSimplex.pyx":1321
 *         '''
 *         cdef CppICbcModel* model = self.CppSelf.getICbcModel()
 *         cm =  CyCbcModel()             # <<<<<<<<<<<<<<
 *         cm.setCppSelf(model)
 *         cm.setClpModel(self)
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_10CyCbcModel_CyCbcModel)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cm = ((struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1322
 *         cdef CppICbcModel* model = self.CppSelf.getICbcModel()
 *         cm =  CyCbcModel()
 *         cm.setCppSelf(model)             # <<<<<<<<<<<<<<
 *         cm.setClpModel(self)
 *         if self.cyLPModel:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_10CyCbcModel_CyCbcModel *)__pyx_v_cm->__pyx_vtab)->setCppSelf(__pyx_v_cm, __pyx_v_model); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1323
 *         cm =  CyCbcModel()
 *         cm.setCppSelf(model)
 *         cm.setClpModel(self)             # <<<<<<<<<<<<<<
 *         if self.cyLPModel:
 *             cm.cyLPModel = self.cyLPModel
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_10CyCbcModel_CyCbcModel *)__pyx_v_cm->__pyx_vtab)->setClpModel(__pyx_v_cm, __pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1324
 *         cm.setCppSelf(model)
 *         cm.setClpModel(self)
 *         if self.cyLPModel:             # <<<<<<<<<<<<<<
 *             cm.cyLPModel = self.cyLPModel
 *         return cm
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":1325
 *         cm.setClpModel(self)
 *         if self.cyLPModel:
 *             cm.cyLPModel = self.cyLPModel             # <<<<<<<<<<<<<<
 *         return cm
 * 
 */
    __Pyx_INCREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    __Pyx_GIVEREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    __Pyx_GOTREF(__pyx_v_cm->cyLPModel);
    __Pyx_DECREF(__pyx_v_cm->cyLPModel);
    __pyx_v_cm->cyLPModel = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "CyLP/cy/CyClpSimplex.pyx":1326
 *         if self.cyLPModel:
 *             cm.cyLPModel = self.cyLPModel
 *         return cm             # <<<<<<<<<<<<<<
 * 
 *     #############################################
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_cm));
  __pyx_r = ((PyObject *)__pyx_v_cm);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getCbcModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cm);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1332
 *     #############################################
 * 
 *     def isPivotAcceptable(self):             # <<<<<<<<<<<<<<
 *         return (<CyPivotPythonBase>
 *                 self.cyPivot).pivotMethodObject.isPivotAcceptable()
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_60isPivotAcceptable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_60isPivotAcceptable[] = "CyClpSimplex.isPivotAcceptable(self)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_60isPivotAcceptable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("isPivotAcceptable");
  __Pyx_TraceCall("isPivotAcceptable", __pyx_f[0], 1332);

  /* "CyLP/cy/CyClpSimplex.pyx":1333
 * 
 *     def isPivotAcceptable(self):
 *         return (<CyPivotPythonBase>             # <<<<<<<<<<<<<<
 *                 self.cyPivot).pivotMethodObject.isPivotAcceptable()
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "CyLP/cy/CyClpSimplex.pyx":1334
 *     def isPivotAcceptable(self):
 *         return (<CyPivotPythonBase>
 *                 self.cyPivot).pivotMethodObject.isPivotAcceptable()             # <<<<<<<<<<<<<<
 * 
 *     def checkVar(self, i):
 */
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyPivot)->pivotMethodObject, __pyx_n_s__isPivotAcceptable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.isPivotAcceptable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1336
 *                 self.cyPivot).pivotMethodObject.isPivotAcceptable()
 * 
 *     def checkVar(self, i):             # <<<<<<<<<<<<<<
 *         (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)
 *         return (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_61checkVar(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_61checkVar[] = "CyClpSimplex.checkVar(self, i)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_61checkVar(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("checkVar");
  __Pyx_TraceCall("checkVar", __pyx_f[0], 1336);

  /* "CyLP/cy/CyClpSimplex.pyx":1337
 * 
 *     def checkVar(self, i):
 *         (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)             # <<<<<<<<<<<<<<
 *         return (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyPivot)->pivotMethodObject, __pyx_n_s__checkVar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_i);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_i);
  __Pyx_GIVEREF(__pyx_v_i);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1338
 *     def checkVar(self, i):
 *         (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)
 *         return (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)             # <<<<<<<<<<<<<<
 * 
 *     def setPrimalColumnPivotAlgorithmToWolfe(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyObject_GetAttr(((struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyPivot)->pivotMethodObject, __pyx_n_s__checkVar); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_i);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_i);
  __Pyx_GIVEREF(__pyx_v_i);
  __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.checkVar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1340
 *         return (<CyPivotPythonBase>self.cyPivot).pivotMethodObject.checkVar(i)
 * 
 *     def setPrimalColumnPivotAlgorithmToWolfe(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Set primal simplex's pivot rule to the Cython implementation of
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_62setPrimalColumnPivotAlgorithmToWolfe(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_62setPrimalColumnPivotAlgorithmToWolfe[] = "CyClpSimplex.setPrimalColumnPivotAlgorithmToWolfe(self)\n\n        Set primal simplex's pivot rule to the Cython implementation of\n        Wolfe's rule used to solve QPs.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_62setPrimalColumnPivotAlgorithmToWolfe(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_4CyLP_2cy_12CyWolfePivot_CyWolfePivot *__pyx_v_wp = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setPrimalColumnPivotAlgorithmToWolfe");
  __Pyx_TraceCall("setPrimalColumnPivotAlgorithmToWolfe", __pyx_f[0], 1340);

  /* "CyLP/cy/CyClpSimplex.pyx":1345
 *         Wolfe's rule used to solve QPs.
 *         '''
 *         cdef CyWolfePivot wp = CyWolfePivot()             # <<<<<<<<<<<<<<
 *         self.setPrimalColumnPivotAlgorithm(wp.CppSelf)
 * 
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_12CyWolfePivot_CyWolfePivot)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_wp = ((struct __pyx_obj_4CyLP_2cy_12CyWolfePivot_CyWolfePivot *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1346
 *         '''
 *         cdef CyWolfePivot wp = CyWolfePivot()
 *         self.setPrimalColumnPivotAlgorithm(wp.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     def setPrimalColumnPivotAlgorithmToPE(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->setPrimalColumnPivotAlgorithm(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_wp->__pyx_base.CppSelf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setPrimalColumnPivotAlgorithmToWolfe", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1348
 *         self.setPrimalColumnPivotAlgorithm(wp.CppSelf)
 * 
 *     def setPrimalColumnPivotAlgorithmToPE(self):             # <<<<<<<<<<<<<<
 *         '''
 *         Set primal simplex's pivot rule to the Cython
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_63setPrimalColumnPivotAlgorithmToPE(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_63setPrimalColumnPivotAlgorithmToPE[] = "CyClpSimplex.setPrimalColumnPivotAlgorithmToPE(self)\n\n        Set primal simplex's pivot rule to the Cython\n        implementation of *positive edge*\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_63setPrimalColumnPivotAlgorithmToPE(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct __pyx_obj_4CyLP_2cy_9CyPEPivot_CyPEPivot *__pyx_v_pe = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setPrimalColumnPivotAlgorithmToPE");
  __Pyx_TraceCall("setPrimalColumnPivotAlgorithmToPE", __pyx_f[0], 1348);

  /* "CyLP/cy/CyClpSimplex.pyx":1353
 *         implementation of *positive edge*
 *         '''
 *         cdef CyPEPivot pe = CyPEPivot()             # <<<<<<<<<<<<<<
 *         self.setPrimalColumnPivotAlgorithm(pe.CppSelf)
 * 
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_9CyPEPivot_CyPEPivot)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pe = ((struct __pyx_obj_4CyLP_2cy_9CyPEPivot_CyPEPivot *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1354
 *         '''
 *         cdef CyPEPivot pe = CyPEPivot()
 *         self.setPrimalColumnPivotAlgorithm(pe.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     def setPivotMethod(self, pivotMethodObject):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->setPrimalColumnPivotAlgorithm(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_pe->__pyx_base.CppSelf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setPrimalColumnPivotAlgorithmToPE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pe);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1356
 *         self.setPrimalColumnPivotAlgorithm(pe.CppSelf)
 * 
 *     def setPivotMethod(self, pivotMethodObject):             # <<<<<<<<<<<<<<
 *         '''
 *         Takes a python object and sets it as the primal
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_64setPivotMethod(PyObject *__pyx_v_self, PyObject *__pyx_v_pivotMethodObject); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_64setPivotMethod[] = "CyClpSimplex.setPivotMethod(self, pivotMethodObject)\n\n        Takes a python object and sets it as the primal\n        simplex pivot rule. ``pivotObjectMethod`` should\n        implement :py:class:`PivotPythonBase`.\n        See :ref:`how to use custom Python pivots\n        to solve LPs <custom-pivot-usage>`.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_64setPivotMethod(PyObject *__pyx_v_self, PyObject *__pyx_v_pivotMethodObject) {
  struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setPivotMethod");
  __Pyx_TraceCall("setPivotMethod", __pyx_f[0], 1356);

  /* "CyLP/cy/CyClpSimplex.pyx":1364
 *         to solve LPs <custom-pivot-usage>`.
 *         '''
 *         if not issubclass(pivotMethodObject.__class__, PivotPythonBase):             # <<<<<<<<<<<<<<
 *             raise TypeError('pivotMethodObject should be of a \
 *                             class derived from PivotPythonBase')
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_pivotMethodObject, __pyx_n_s____class__); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PivotPythonBase); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_IsSubclass(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (!__pyx_t_3);
  if (__pyx_t_4) {

    /* "CyLP/cy/CyClpSimplex.pyx":1365
 *         '''
 *         if not issubclass(pivotMethodObject.__class__, PivotPythonBase):
 *             raise TypeError('pivotMethodObject should be of a \             # <<<<<<<<<<<<<<
 *                             class derived from PivotPythonBase')
 * 
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__TypeError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_35), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "CyLP/cy/CyClpSimplex.pyx":1368
 *                             class derived from PivotPythonBase')
 * 
 *         cdef CyPivotPythonBase p = CyPivotPythonBase(pivotMethodObject)             # <<<<<<<<<<<<<<
 *         self.cyPivot = p
 *         p.cyModel = self
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_pivotMethodObject);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_pivotMethodObject);
  __Pyx_GIVEREF(__pyx_v_pivotMethodObject);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_p = ((struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1369
 * 
 *         cdef CyPivotPythonBase p = CyPivotPythonBase(pivotMethodObject)
 *         self.cyPivot = p             # <<<<<<<<<<<<<<
 *         p.cyModel = self
 *         self.setPrimalColumnPivotAlgorithm(p.CppSelf)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_p));
  __Pyx_GOTREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyPivot);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyPivot));
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyPivot = ((struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *)__pyx_v_p);

  /* "CyLP/cy/CyClpSimplex.pyx":1370
 *         cdef CyPivotPythonBase p = CyPivotPythonBase(pivotMethodObject)
 *         self.cyPivot = p
 *         p.cyModel = self             # <<<<<<<<<<<<<<
 *         self.setPrimalColumnPivotAlgorithm(p.CppSelf)
 * 
 */
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __Pyx_GOTREF(__pyx_v_p->__pyx_base.cyModel);
  __Pyx_DECREF(((PyObject *)__pyx_v_p->__pyx_base.cyModel));
  __pyx_v_p->__pyx_base.cyModel = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self);

  /* "CyLP/cy/CyClpSimplex.pyx":1371
 *         self.cyPivot = p
 *         p.cyModel = self
 *         self.setPrimalColumnPivotAlgorithm(p.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     cpdef filterVars(self,  inds):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->setPrimalColumnPivotAlgorithm(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_p->__pyx_base.CppSelf); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setPivotMethod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1373
 *         self.setPrimalColumnPivotAlgorithm(p.CppSelf)
 * 
 *     cpdef filterVars(self,  inds):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.filterVars(<PyObject*>inds)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_65filterVars(PyObject *__pyx_v_self, PyObject *__pyx_v_inds); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_filterVars(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, PyObject *__pyx_v_inds, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("filterVars");
  __Pyx_TraceCall("filterVars", __pyx_f[0], 1373);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__filterVars); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_65filterVars)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_inds);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_inds);
      __Pyx_GIVEREF(__pyx_v_inds);
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1374
 * 
 *     cpdef filterVars(self,  inds):
 *         return <object>self.CppSelf.filterVars(<PyObject*>inds)             # <<<<<<<<<<<<<<
 * 
 *     def setObjectiveCoefficient(self, elementIndex, elementValue):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_v_self->CppSelf->filterVars(((PyObject *)__pyx_v_inds));
  __Pyx_INCREF(((PyObject *)__pyx_t_4));
  __pyx_r = ((PyObject *)__pyx_t_4);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.filterVars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1373
 *         self.setPrimalColumnPivotAlgorithm(p.CppSelf)
 * 
 *     cpdef filterVars(self,  inds):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.filterVars(<PyObject*>inds)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_65filterVars(PyObject *__pyx_v_self, PyObject *__pyx_v_inds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_65filterVars[] = "CyClpSimplex.filterVars(self, inds)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_65filterVars(PyObject *__pyx_v_self, PyObject *__pyx_v_inds) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("filterVars");
  __Pyx_TraceCall("filterVars", __pyx_f[0], 1373);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->filterVars(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_inds, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.filterVars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1376
 *         return <object>self.CppSelf.filterVars(<PyObject*>inds)
 * 
 *     def setObjectiveCoefficient(self, elementIndex, elementValue):             # <<<<<<<<<<<<<<
 *         '''
 *         Set the objective coefficients using sparse vector elements
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_66setObjectiveCoefficient(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_66setObjectiveCoefficient[] = "CyClpSimplex.setObjectiveCoefficient(self, elementIndex, elementValue)\n\n        Set the objective coefficients using sparse vector elements\n        ``elementIndex`` and ``elementValue``.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_66setObjectiveCoefficient(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_elementIndex = 0;
  PyObject *__pyx_v_elementValue = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__elementIndex,&__pyx_n_s__elementValue,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setObjectiveCoefficient");
  __Pyx_TraceCall("setObjectiveCoefficient", __pyx_f[0], 1376);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__elementIndex);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__elementValue);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setObjectiveCoefficient", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1376; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setObjectiveCoefficient") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1376; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_elementIndex = values[0];
    __pyx_v_elementValue = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setObjectiveCoefficient", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1376; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setObjectiveCoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":1381
 *         ``elementIndex`` and ``elementValue``.
 *         '''
 *         self.CppSelf.setObjectiveCoefficient(elementIndex, elementValue)             # <<<<<<<<<<<<<<
 * 
 *     def partialPricing(self, start, end,
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_elementIndex); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_elementValue); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setObjectiveCoefficient(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setObjectiveCoefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1383
 *         self.CppSelf.setObjectiveCoefficient(elementIndex, elementValue)
 * 
 *     def partialPricing(self, start, end,             # <<<<<<<<<<<<<<
 *                       np.ndarray[np.int32_t, ndim=1] numberWanted):
 *         '''
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_67partialPricing(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_67partialPricing[] = "CyClpSimplex.partialPricing(self, start, end, ndarray numberWanted)\n\n        Perform partial pricing from variable ``start`` to variable ``end``.\n        Stop when ``numberWanted`` variables good variable checked.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_67partialPricing(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_end = 0;
  PyArrayObject *__pyx_v_numberWanted = 0;
  Py_buffer __pyx_bstruct_numberWanted;
  Py_ssize_t __pyx_bstride_0_numberWanted = 0;
  Py_ssize_t __pyx_bshape_0_numberWanted = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__start,&__pyx_n_s__end,&__pyx_n_s__numberWanted,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("partialPricing");
  __Pyx_TraceCall("partialPricing", __pyx_f[0], 1383);
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__start);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("partialPricing", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__numberWanted);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("partialPricing", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "partialPricing") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_start = values[0];
    __pyx_v_end = values[1];
    __pyx_v_numberWanted = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("partialPricing", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.partialPricing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_bstruct_numberWanted.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_numberWanted), __pyx_ptype_5numpy_ndarray, 1, "numberWanted", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_numberWanted, (PyObject*)__pyx_v_numberWanted, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_numberWanted = __pyx_bstruct_numberWanted.strides[0];
  __pyx_bshape_0_numberWanted = __pyx_bstruct_numberWanted.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1389
 *         Stop when ``numberWanted`` variables good variable checked.
 *         '''
 *         return self.CppSelf.partialPrice(start, end, <int*>numberWanted.data)             # <<<<<<<<<<<<<<
 * 
 *     def setComplementarityList(self, np.ndarray[np.int32_t, ndim=1] cl):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_start); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v_end); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->partialPrice(__pyx_t_1, __pyx_t_2, ((int *)__pyx_v_numberWanted->data))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_numberWanted);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.partialPricing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_numberWanted);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1391
 *         return self.CppSelf.partialPrice(start, end, <int*>numberWanted.data)
 * 
 *     def setComplementarityList(self, np.ndarray[np.int32_t, ndim=1] cl):             # <<<<<<<<<<<<<<
 *         self.CppSelf.setComplementarityList(<int*>cl.data)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_68setComplementarityList(PyObject *__pyx_v_self, PyObject *__pyx_v_cl); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_68setComplementarityList[] = "CyClpSimplex.setComplementarityList(self, ndarray cl)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_68setComplementarityList(PyObject *__pyx_v_self, PyObject *__pyx_v_cl) {
  Py_buffer __pyx_bstruct_cl;
  Py_ssize_t __pyx_bstride_0_cl = 0;
  Py_ssize_t __pyx_bshape_0_cl = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setComplementarityList");
  __Pyx_TraceCall("setComplementarityList", __pyx_f[0], 1391);
  __pyx_bstruct_cl.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cl), __pyx_ptype_5numpy_ndarray, 1, "cl", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_cl, (PyObject*)__pyx_v_cl, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_cl = __pyx_bstruct_cl.strides[0];
  __pyx_bshape_0_cl = __pyx_bstruct_cl.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1392
 * 
 *     def setComplementarityList(self, np.ndarray[np.int32_t, ndim=1] cl):
 *         self.CppSelf.setComplementarityList(<int*>cl.data)             # <<<<<<<<<<<<<<
 * 
 *     cpdef getACol(self, int ncol, CyCoinIndexedVector colArray):
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setComplementarityList(((int *)((PyArrayObject *)__pyx_v_cl)->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_cl);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setComplementarityList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_cl);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1394
 *         self.CppSelf.setComplementarityList(<int*>cl.data)
 * 
 *     cpdef getACol(self, int ncol, CyCoinIndexedVector colArray):             # <<<<<<<<<<<<<<
 *         '''
 *         Gets column ``ncol`` of ``A`` and store it in ``colArray``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_69getACol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getACol(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_v_ncol, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_colArray, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getACol");
  __Pyx_TraceCall("getACol", __pyx_f[0], 1394);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__getACol); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_69getACol)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(__pyx_v_ncol); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_colArray));
      PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_colArray));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_colArray));
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1398
 *         Gets column ``ncol`` of ``A`` and store it in ``colArray``.
 *         '''
 *         self.CppSelf.getACol(ncol, colArray.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     cpdef vectorTimesB_1(self, CyCoinIndexedVector vec):
 */
  __pyx_v_self->CppSelf->getACol(__pyx_v_ncol, __pyx_v_colArray->CppSelf);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getACol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1394
 *         self.CppSelf.setComplementarityList(<int*>cl.data)
 * 
 *     cpdef getACol(self, int ncol, CyCoinIndexedVector colArray):             # <<<<<<<<<<<<<<
 *         '''
 *         Gets column ``ncol`` of ``A`` and store it in ``colArray``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_69getACol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_69getACol[] = "CyClpSimplex.getACol(self, int ncol, CyCoinIndexedVector colArray)\n\n        Gets column ``ncol`` of ``A`` and store it in ``colArray``.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_69getACol(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ncol;
  struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_colArray = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ncol,&__pyx_n_s__colArray,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getACol");
  __Pyx_TraceCall("getACol", __pyx_f[0], 1394);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ncol);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__colArray);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getACol", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getACol") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ncol = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_ncol == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_colArray = ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getACol", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getACol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_colArray), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "colArray", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->getACol(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), __pyx_v_ncol, __pyx_v_colArray, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getACol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1400
 *         self.CppSelf.getACol(ncol, colArray.CppSelf)
 * 
 *     cpdef vectorTimesB_1(self, CyCoinIndexedVector vec):             # <<<<<<<<<<<<<<
 *         '''
 *         Compute :math:`vec A_B^{-1}` and store it in ``vec``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_70vectorTimesB_1(PyObject *__pyx_v_self, PyObject *__pyx_v_vec); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_vectorTimesB_1(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_vec, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("vectorTimesB_1");
  __Pyx_TraceCall("vectorTimesB_1", __pyx_f[0], 1400);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__vectorTimesB_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_70vectorTimesB_1)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(((PyObject *)__pyx_v_vec));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_vec));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_vec));
      __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1404
 *         Compute :math:`vec A_B^{-1}` and store it in ``vec``.
 *         '''
 *         self.CppSelf.vectorTimesB_1(vec.CppSelf)             # <<<<<<<<<<<<<<
 * 
 *     cdef primalRow(self, CppCoinIndexedVector * rowArray,
 */
  __pyx_v_self->CppSelf->vectorTimesB_1(__pyx_v_vec->CppSelf);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.vectorTimesB_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1400
 *         self.CppSelf.getACol(ncol, colArray.CppSelf)
 * 
 *     cpdef vectorTimesB_1(self, CyCoinIndexedVector vec):             # <<<<<<<<<<<<<<
 *         '''
 *         Compute :math:`vec A_B^{-1}` and store it in ``vec``.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_70vectorTimesB_1(PyObject *__pyx_v_self, PyObject *__pyx_v_vec); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_70vectorTimesB_1[] = "CyClpSimplex.vectorTimesB_1(self, CyCoinIndexedVector vec)\n\n        Compute :math:`vec A_B^{-1}` and store it in ``vec``.\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_70vectorTimesB_1(PyObject *__pyx_v_self, PyObject *__pyx_v_vec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("vectorTimesB_1");
  __Pyx_TraceCall("vectorTimesB_1", __pyx_f[0], 1400);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vec), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "vec", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->vectorTimesB_1(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)__pyx_v_vec), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.vectorTimesB_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1406
 *         self.CppSelf.vectorTimesB_1(vec.CppSelf)
 * 
 *     cdef primalRow(self, CppCoinIndexedVector * rowArray,             # <<<<<<<<<<<<<<
 *                                        CppCoinIndexedVector * rhsArray,
 *                                        CppCoinIndexedVector * spareArray,
 */

static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalRow(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, ICoinIndexedVector *__pyx_v_rowArray, ICoinIndexedVector *__pyx_v_rhsArray, ICoinIndexedVector *__pyx_v_spareArray, ICoinIndexedVector *__pyx_v_spareArray2, int __pyx_v_valuesPass) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("primalRow");
  __Pyx_TraceCall("primalRow", __pyx_f[0], 1406);

  /* "CyLP/cy/CyClpSimplex.pyx":1411
 *                                        CppCoinIndexedVector * spareArray2,
 *                                        int valuesPass):
 *         raise Exception('CyClpPrimalColumnPivotBase.pyx: pivot column ' \             # <<<<<<<<<<<<<<
 *                         'should be implemented.')
 * 
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_37), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.primalRow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1414
 *                         'should be implemented.')
 * 
 *     def argWeightedMax(self, arr, arr_ind, w, w_ind):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.argWeightedMax(<PyObject*>arr, <PyObject*>arr_ind,
 *                                             <PyObject*>w, <PyObject*>w_ind)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_71argWeightedMax(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_71argWeightedMax[] = "CyClpSimplex.argWeightedMax(self, arr, arr_ind, w, w_ind)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_71argWeightedMax(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arr = 0;
  PyObject *__pyx_v_arr_ind = 0;
  PyObject *__pyx_v_w = 0;
  PyObject *__pyx_v_w_ind = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arr,&__pyx_n_s__arr_ind,&__pyx_n_s__w,&__pyx_n_s__w_ind,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("argWeightedMax");
  __Pyx_TraceCall("argWeightedMax", __pyx_f[0], 1414);
  {
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arr);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arr_ind);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("argWeightedMax", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__w);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("argWeightedMax", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__w_ind);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("argWeightedMax", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "argWeightedMax") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_arr = values[0];
    __pyx_v_arr_ind = values[1];
    __pyx_v_w = values[2];
    __pyx_v_w_ind = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("argWeightedMax", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.argWeightedMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":1415
 * 
 *     def argWeightedMax(self, arr, arr_ind, w, w_ind):
 *         return self.CppSelf.argWeightedMax(<PyObject*>arr, <PyObject*>arr_ind,             # <<<<<<<<<<<<<<
 *                                             <PyObject*>w, <PyObject*>w_ind)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "CyLP/cy/CyClpSimplex.pyx":1416
 *     def argWeightedMax(self, arr, arr_ind, w, w_ind):
 *         return self.CppSelf.argWeightedMax(<PyObject*>arr, <PyObject*>arr_ind,
 *                                             <PyObject*>w, <PyObject*>w_ind)             # <<<<<<<<<<<<<<
 * 
 * #    def getnff(self):
 */
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->argWeightedMax(((PyObject *)__pyx_v_arr), ((PyObject *)__pyx_v_arr_ind), ((PyObject *)__pyx_v_w), ((PyObject *)__pyx_v_w_ind))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.argWeightedMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1426
 * #        return np.where((status & 7 == 4) | (status & 7 == 0))[0]
 * 
 *     cdef int* ComplementarityList(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.ComplementarityList()
 * 
 */

static int *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_ComplementarityList(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self) {
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("ComplementarityList");
  __Pyx_TraceCall("ComplementarityList", __pyx_f[0], 1426);

  /* "CyLP/cy/CyClpSimplex.pyx":1427
 * 
 *     cdef int* ComplementarityList(self):
 *         return self.CppSelf.ComplementarityList()             # <<<<<<<<<<<<<<
 * 
 *     cpdef getComplementarityList(self):
 */
  __pyx_r = __pyx_v_self->CppSelf->ComplementarityList();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1429
 *         return self.CppSelf.ComplementarityList()
 * 
 *     cpdef getComplementarityList(self):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.getComplementarityList()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_72getComplementarityList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getComplementarityList(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getComplementarityList");
  __Pyx_TraceCall("getComplementarityList", __pyx_f[0], 1429);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overriden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s_38); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (void *)&__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_72getComplementarityList)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "CyLP/cy/CyClpSimplex.pyx":1430
 * 
 *     cpdef getComplementarityList(self):
 *         return <object>self.CppSelf.getComplementarityList()             # <<<<<<<<<<<<<<
 * 
 *     def setComplement(self, var1, var2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_v_self->CppSelf->getComplementarityList();
  __Pyx_INCREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getComplementarityList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1429
 *         return self.CppSelf.ComplementarityList()
 * 
 *     cpdef getComplementarityList(self):             # <<<<<<<<<<<<<<
 *         return <object>self.CppSelf.getComplementarityList()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_72getComplementarityList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_72getComplementarityList[] = "CyClpSimplex.getComplementarityList(self)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_72getComplementarityList(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getComplementarityList");
  __Pyx_TraceCall("getComplementarityList", __pyx_f[0], 1429);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->__pyx_vtab)->getComplementarityList(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self), 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getComplementarityList", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1432
 *         return <object>self.CppSelf.getComplementarityList()
 * 
 *     def setComplement(self, var1, var2):             # <<<<<<<<<<<<<<
 *         '''
 *         if ``arg`` is an integer: mark variable index ``arg`` as integer.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_73setComplement(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_73setComplement[] = "CyClpSimplex.setComplement(self, var1, var2)\n\n        if ``arg`` is an integer: mark variable index ``arg`` as integer.\n        if ``arg`` is a :class:`CyLPVar` object: mark variable\n        ``arg`` as integer. Here is an example of the latter:\n\n        ";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_73setComplement(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_var1 = 0;
  PyObject *__pyx_v_var2 = 0;
  PyObject *__pyx_v_model = NULL;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_vn1 = NULL;
  PyObject *__pyx_v_vn2 = NULL;
  PyObject *__pyx_v_x1 = NULL;
  PyObject *__pyx_v_x2 = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var1,&__pyx_n_s__var2,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("setComplement");
  __Pyx_TraceCall("setComplement", __pyx_f[0], 1432);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var1);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var2);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setComplement", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1432; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setComplement") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1432; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_var1 = values[0];
    __pyx_v_var2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setComplement", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1432; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setComplement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "CyLP/cy/CyClpSimplex.pyx":1440
 *         '''
 * 
 *         if isinstance(var1, (int, long)) and isinstance(var2, (int, long)) :             # <<<<<<<<<<<<<<
 *            self.CppSelf.setComplement(var1, var2)
 *         elif True:  # isinstance(arg, CyLPVar):
 */
  __Pyx_INCREF(__pyx_v_var1);
  __pyx_t_1 = __pyx_v_var1;
  __pyx_t_2 = PyInt_Check(__pyx_t_1); 
  if (!__pyx_t_2) {
    __pyx_t_3 = PyLong_Check(__pyx_t_1); 
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {
    __Pyx_INCREF(__pyx_v_var2);
    __pyx_t_1 = __pyx_v_var2;
    __pyx_t_2 = PyInt_Check(__pyx_t_1); 
    if (!__pyx_t_2) {
      __pyx_t_3 = PyLong_Check(__pyx_t_1); 
      __pyx_t_5 = __pyx_t_3;
    } else {
      __pyx_t_5 = __pyx_t_2;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_5;
  } else {
    __pyx_t_2 = __pyx_t_4;
  }
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":1441
 * 
 *         if isinstance(var1, (int, long)) and isinstance(var2, (int, long)) :
 *            self.CppSelf.setComplement(var1, var2)             # <<<<<<<<<<<<<<
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 */
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_v_var1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_v_var2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setComplement(__pyx_t_6, __pyx_t_7);
    goto __pyx_L6;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":1443
 *            self.CppSelf.setComplement(var1, var2)
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:             # <<<<<<<<<<<<<<
 *                 raise Exception('The argument of setInteger can be ' \
 *                                 'a CyLPVar only if the object is built ' \
 */
    __pyx_t_1 = PyObject_RichCompare(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel, Py_None, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":1444
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setInteger can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
      __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_39), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "CyLP/cy/CyClpSimplex.pyx":1447
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 *             if var1.dim != var2.dim:             # <<<<<<<<<<<<<<
 *                 raise Exception('Variables should have the same  ' \
 *                                 'dimensions to be complements.' \
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_var1, __pyx_n_s__dim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyObject_GetAttr(__pyx_v_var2, __pyx_n_s__dim); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_1, __pyx_t_8, Py_NE); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":1451
 *                                 'dimensions to be complements.' \
 *                                 ' Got %s: %g and %s: %g' %
 *                                 (var1.name, var1.dim, var2.name, var2.dim))             # <<<<<<<<<<<<<<
 * 
 *             model = self.cyLPModel
 */
      __pyx_t_9 = PyObject_GetAttr(__pyx_v_var1, __pyx_n_s__name); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = PyObject_GetAttr(__pyx_v_var1, __pyx_n_s__dim); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = PyObject_GetAttr(__pyx_v_var2, __pyx_n_s__name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = PyObject_GetAttr(__pyx_v_var2, __pyx_n_s__dim); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyTuple_New(4); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_11));
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      __pyx_t_9 = 0;
      __pyx_t_8 = 0;
      __pyx_t_1 = 0;
      __pyx_t_10 = 0;
      __pyx_t_10 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_40), ((PyObject *)__pyx_t_11)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_10));
      __Pyx_DECREF(((PyObject *)__pyx_t_11)); __pyx_t_11 = 0;
      __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_11));
      PyTuple_SET_ITEM(__pyx_t_11, 0, ((PyObject *)__pyx_t_10));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_10));
      __pyx_t_10 = 0;
      __pyx_t_10 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_11), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(((PyObject *)__pyx_t_11)); __pyx_t_11 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "CyLP/cy/CyClpSimplex.pyx":1453
 *                                 (var1.name, var1.dim, var2.name, var2.dim))
 * 
 *             model = self.cyLPModel             # <<<<<<<<<<<<<<
 *             inds = model.inds
 *             vn1 = var1.name
 */
    __Pyx_INCREF(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel);
    __pyx_v_model = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->cyLPModel;

    /* "CyLP/cy/CyClpSimplex.pyx":1454
 * 
 *             model = self.cyLPModel
 *             inds = model.inds             # <<<<<<<<<<<<<<
 *             vn1 = var1.name
 *             vn2 = var2.name
 */
    __pyx_t_10 = PyObject_GetAttr(__pyx_v_model, __pyx_n_s__inds); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_v_inds = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1455
 *             model = self.cyLPModel
 *             inds = model.inds
 *             vn1 = var1.name             # <<<<<<<<<<<<<<
 *             vn2 = var2.name
 * 
 */
    __pyx_t_10 = PyObject_GetAttr(__pyx_v_var1, __pyx_n_s__name); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_v_vn1 = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1456
 *             inds = model.inds
 *             vn1 = var1.name
 *             vn2 = var2.name             # <<<<<<<<<<<<<<
 * 
 *             if not inds.hasVar(vn1):
 */
    __pyx_t_10 = PyObject_GetAttr(__pyx_v_var2, __pyx_n_s__name); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_v_vn2 = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1458
 *             vn2 = var2.name
 * 
 *             if not inds.hasVar(vn1):             # <<<<<<<<<<<<<<
 *                 raise Exception('No such variable: %s' % vn1)
 *             x1 = inds.varIndex[vn1]
 */
    __pyx_t_10 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__hasVar); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_11));
    __Pyx_INCREF(__pyx_v_vn1);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_vn1);
    __Pyx_GIVEREF(__pyx_v_vn1);
    __pyx_t_1 = PyObject_Call(__pyx_t_10, ((PyObject *)__pyx_t_11), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_11)); __pyx_t_11 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = (!__pyx_t_2);
    if (__pyx_t_4) {

      /* "CyLP/cy/CyClpSimplex.pyx":1459
 * 
 *             if not inds.hasVar(vn1):
 *                 raise Exception('No such variable: %s' % vn1)             # <<<<<<<<<<<<<<
 *             x1 = inds.varIndex[vn1]
 *             if not inds.hasVar(vn2):
 */
      __pyx_t_1 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_28), __pyx_v_vn1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_11));
      PyTuple_SET_ITEM(__pyx_t_11, 0, ((PyObject *)__pyx_t_1));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
      __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_11), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(((PyObject *)__pyx_t_11)); __pyx_t_11 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "CyLP/cy/CyClpSimplex.pyx":1460
 *             if not inds.hasVar(vn1):
 *                 raise Exception('No such variable: %s' % vn1)
 *             x1 = inds.varIndex[vn1]             # <<<<<<<<<<<<<<
 *             if not inds.hasVar(vn2):
 *                 raise Exception('No such variable: %s' % vn2)
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = PyObject_GetItem(__pyx_t_1, __pyx_v_vn1); if (!__pyx_t_11) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_x1 = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1461
 *                 raise Exception('No such variable: %s' % vn1)
 *             x1 = inds.varIndex[vn1]
 *             if not inds.hasVar(vn2):             # <<<<<<<<<<<<<<
 *                 raise Exception('No such variable: %s' % vn2)
 *             x2 = inds.varIndex[vn2]
 */
    __pyx_t_11 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__hasVar); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(__pyx_v_vn2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_vn2);
    __Pyx_GIVEREF(__pyx_v_vn2);
    __pyx_t_10 = PyObject_Call(__pyx_t_11, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_2 = (!__pyx_t_4);
    if (__pyx_t_2) {

      /* "CyLP/cy/CyClpSimplex.pyx":1462
 *             x1 = inds.varIndex[vn1]
 *             if not inds.hasVar(vn2):
 *                 raise Exception('No such variable: %s' % vn2)             # <<<<<<<<<<<<<<
 *             x2 = inds.varIndex[vn2]
 * 
 */
      __pyx_t_10 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_28), __pyx_v_vn2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_10));
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_t_10));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_10));
      __pyx_t_10 = 0;
      __pyx_t_10 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "CyLP/cy/CyClpSimplex.pyx":1463
 *             if not inds.hasVar(vn2):
 *                 raise Exception('No such variable: %s' % vn2)
 *             x2 = inds.varIndex[vn2]             # <<<<<<<<<<<<<<
 * 
 *             for i in xrange(var1.dim):
 */
    __pyx_t_10 = PyObject_GetAttr(__pyx_v_inds, __pyx_n_s__varIndex); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = PyObject_GetItem(__pyx_t_10, __pyx_v_vn2); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_x2 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "CyLP/cy/CyClpSimplex.pyx":1465
 *             x2 = inds.varIndex[vn2]
 * 
 *             for i in xrange(var1.dim):             # <<<<<<<<<<<<<<
 *                 self.CppSelf.setComplement(x1[i], x2[i])
 * 
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_var1, __pyx_n_s__dim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_10));
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_xrange, ((PyObject *)__pyx_t_10), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_10)); __pyx_t_10 = 0;
    if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_10 = __pyx_t_1; __Pyx_INCREF(__pyx_t_10); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (PyList_CheckExact(__pyx_t_10)) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_10)) break;
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++;
      } else if (PyTuple_CheckExact(__pyx_t_10)) {
        if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_1); __pyx_t_12++;
      } else {
        __pyx_t_1 = __pyx_t_13(__pyx_t_10);
        if (unlikely(!__pyx_t_1)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF(__pyx_v_i);
      __pyx_v_i = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "CyLP/cy/CyClpSimplex.pyx":1466
 * 
 *             for i in xrange(var1.dim):
 *                 self.CppSelf.setComplement(x1[i], x2[i])             # <<<<<<<<<<<<<<
 * 
 * #    def setComplement(self, var1, var2):
 */
      __pyx_t_1 = PyObject_GetItem(__pyx_v_x1, __pyx_v_i); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_GetItem(__pyx_v_x2, __pyx_v_i); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->setComplement(__pyx_t_7, __pyx_t_6);
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.setComplement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_vn1);
  __Pyx_XDECREF(__pyx_v_vn2);
  __Pyx_XDECREF(__pyx_v_x1);
  __Pyx_XDECREF(__pyx_v_x2);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1477
 * #        self.CppSelf.setComplement(var1, var2)
 * 
 *     def loadProblemFromCyCoinModel(self, CyCoinModel modelObject, int             # <<<<<<<<<<<<<<
 *                                         tryPlusMinusOne=False):
 *         return self.CppSelf.loadProblem(modelObject.CppSelf, tryPlusMinusOne)
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_74loadProblemFromCyCoinModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_74loadProblemFromCyCoinModel[] = "CyClpSimplex.loadProblemFromCyCoinModel(self, CyCoinModel modelObject, int tryPlusMinusOne=False)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_74loadProblemFromCyCoinModel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *__pyx_v_modelObject = 0;
  int __pyx_v_tryPlusMinusOne;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__modelObject,&__pyx_n_s__tryPlusMinusOne,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("loadProblemFromCyCoinModel");
  __Pyx_TraceCall("loadProblemFromCyCoinModel", __pyx_f[0], 1477);
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__modelObject);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__tryPlusMinusOne);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "loadProblemFromCyCoinModel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_modelObject = ((struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *)values[0]);
    if (values[1]) {
      __pyx_v_tryPlusMinusOne = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_tryPlusMinusOne == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "CyLP/cy/CyClpSimplex.pyx":1478
 * 
 *     def loadProblemFromCyCoinModel(self, CyCoinModel modelObject, int
 *                                         tryPlusMinusOne=False):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.loadProblem(modelObject.CppSelf, tryPlusMinusOne)
 * 
 */
      __pyx_v_tryPlusMinusOne = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("loadProblemFromCyCoinModel", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.loadProblemFromCyCoinModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_modelObject), __pyx_ptype_4CyLP_2cy_11CyCoinModel_CyCoinModel, 1, "modelObject", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "CyLP/cy/CyClpSimplex.pyx":1479
 *     def loadProblemFromCyCoinModel(self, CyCoinModel modelObject, int
 *                                         tryPlusMinusOne=False):
 *         return self.CppSelf.loadProblem(modelObject.CppSelf, tryPlusMinusOne)             # <<<<<<<<<<<<<<
 * 
 *     def loadProblem(self, CyCoinPackedMatrix matrix,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->loadProblem(__pyx_v_modelObject->CppSelf, __pyx_v_tryPlusMinusOne)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.loadProblemFromCyCoinModel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1481
 *         return self.CppSelf.loadProblem(modelObject.CppSelf, tryPlusMinusOne)
 * 
 *     def loadProblem(self, CyCoinPackedMatrix matrix,             # <<<<<<<<<<<<<<
 *                  np.ndarray[np.double_t, ndim=1] collb,
 *                  np.ndarray[np.double_t, ndim=1] colub,
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_75loadProblem(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_75loadProblem[] = "CyClpSimplex.loadProblem(self, CyCoinPackedMatrix matrix, ndarray collb, ndarray colub, ndarray obj, ndarray rowlb, ndarray rowub, ndarray rowObjective=<\077\077?>)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_75loadProblem(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *__pyx_v_matrix = 0;
  PyArrayObject *__pyx_v_collb = 0;
  PyArrayObject *__pyx_v_colub = 0;
  PyArrayObject *__pyx_v_obj = 0;
  PyArrayObject *__pyx_v_rowlb = 0;
  PyArrayObject *__pyx_v_rowub = 0;
  PyArrayObject *__pyx_v_rowObjective = 0;
  double *__pyx_v_rd;
  Py_buffer __pyx_bstruct_rowObjective;
  Py_ssize_t __pyx_bstride_0_rowObjective = 0;
  Py_ssize_t __pyx_bshape_0_rowObjective = 0;
  Py_buffer __pyx_bstruct_obj;
  Py_ssize_t __pyx_bstride_0_obj = 0;
  Py_ssize_t __pyx_bshape_0_obj = 0;
  Py_buffer __pyx_bstruct_rowlb;
  Py_ssize_t __pyx_bstride_0_rowlb = 0;
  Py_ssize_t __pyx_bshape_0_rowlb = 0;
  Py_buffer __pyx_bstruct_rowub;
  Py_ssize_t __pyx_bstride_0_rowub = 0;
  Py_ssize_t __pyx_bshape_0_rowub = 0;
  Py_buffer __pyx_bstruct_colub;
  Py_ssize_t __pyx_bstride_0_colub = 0;
  Py_ssize_t __pyx_bshape_0_colub = 0;
  Py_buffer __pyx_bstruct_collb;
  Py_ssize_t __pyx_bstride_0_collb = 0;
  Py_ssize_t __pyx_bshape_0_collb = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__matrix,&__pyx_n_s__collb,&__pyx_n_s__colub,&__pyx_n_s__obj,&__pyx_n_s__rowlb,&__pyx_n_s__rowub,&__pyx_n_s__rowObjective,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("loadProblem");
  __Pyx_TraceCall("loadProblem", __pyx_f[0], 1481);
  {
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[6] = (PyObject *)__pyx_k_41;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__matrix);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__collb);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadProblem", 0, 6, 7, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__colub);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadProblem", 0, 6, 7, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadProblem", 0, 6, 7, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowlb);
        if (likely(values[4])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadProblem", 0, 6, 7, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowub);
        if (likely(values[5])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadProblem", 0, 6, 7, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rowObjective);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "loadProblem") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_matrix = ((struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix *)values[0]);
    __pyx_v_collb = ((PyArrayObject *)values[1]);
    __pyx_v_colub = ((PyArrayObject *)values[2]);
    __pyx_v_obj = ((PyArrayObject *)values[3]);
    __pyx_v_rowlb = ((PyArrayObject *)values[4]);
    __pyx_v_rowub = ((PyArrayObject *)values[5]);
    __pyx_v_rowObjective = ((PyArrayObject *)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("loadProblem", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.loadProblem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_bstruct_collb.buf = NULL;
  __pyx_bstruct_colub.buf = NULL;
  __pyx_bstruct_obj.buf = NULL;
  __pyx_bstruct_rowlb.buf = NULL;
  __pyx_bstruct_rowub.buf = NULL;
  __pyx_bstruct_rowObjective.buf = NULL;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_matrix), __pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix, 1, "matrix", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_collb), __pyx_ptype_5numpy_ndarray, 1, "collb", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_colub), __pyx_ptype_5numpy_ndarray, 1, "colub", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_obj), __pyx_ptype_5numpy_ndarray, 1, "obj", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowlb), __pyx_ptype_5numpy_ndarray, 1, "rowlb", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowub), __pyx_ptype_5numpy_ndarray, 1, "rowub", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rowObjective), __pyx_ptype_5numpy_ndarray, 1, "rowObjective", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_collb, (PyObject*)__pyx_v_collb, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_collb = __pyx_bstruct_collb.strides[0];
  __pyx_bshape_0_collb = __pyx_bstruct_collb.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_colub, (PyObject*)__pyx_v_colub, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_colub = __pyx_bstruct_colub.strides[0];
  __pyx_bshape_0_colub = __pyx_bstruct_colub.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_obj, (PyObject*)__pyx_v_obj, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_obj = __pyx_bstruct_obj.strides[0];
  __pyx_bshape_0_obj = __pyx_bstruct_obj.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_rowlb, (PyObject*)__pyx_v_rowlb, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_rowlb = __pyx_bstruct_rowlb.strides[0];
  __pyx_bshape_0_rowlb = __pyx_bstruct_rowlb.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_rowub, (PyObject*)__pyx_v_rowub, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_rowub = __pyx_bstruct_rowub.strides[0];
  __pyx_bshape_0_rowub = __pyx_bstruct_rowub.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_rowObjective, (PyObject*)__pyx_v_rowObjective, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_bstride_0_rowObjective = __pyx_bstruct_rowObjective.strides[0];
  __pyx_bshape_0_rowObjective = __pyx_bstruct_rowObjective.shape[0];

  /* "CyLP/cy/CyClpSimplex.pyx":1489
 *                  np.ndarray[np.double_t, ndim=1] rowObjective=np.array([])):
 *         cdef double* rd
 *         if len(rowObjective) == 0:             # <<<<<<<<<<<<<<
 *             rd = NULL
 *         else:
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_rowObjective)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 == 0);
  if (__pyx_t_2) {

    /* "CyLP/cy/CyClpSimplex.pyx":1490
 *         cdef double* rd
 *         if len(rowObjective) == 0:
 *             rd = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             rd = <double*> rowObjective.data
 */
    __pyx_v_rd = NULL;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "CyLP/cy/CyClpSimplex.pyx":1492
 *             rd = NULL
 *         else:
 *             rd = <double*> rowObjective.data             # <<<<<<<<<<<<<<
 *         self.CppSelf.loadProblem(matrix.CppSelf, <double*> collb.data,
 *                                          <double*> colub.data,
 */
    __pyx_v_rd = ((double *)__pyx_v_rowObjective->data);
  }
  __pyx_L6:;

  /* "CyLP/cy/CyClpSimplex.pyx":1498
 *                                          <double*> rowlb.data,
 *                                          <double*> rowub.data,
 *                                          <double*> rd)             # <<<<<<<<<<<<<<
 * 
 *     def getCoinInfinity(self):
 */
  ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->loadProblem(__pyx_v_matrix->CppSelf, ((double *)__pyx_v_collb->data), ((double *)__pyx_v_colub->data), ((double *)__pyx_v_obj->data), ((double *)__pyx_v_rowlb->data), ((double *)__pyx_v_rowub->data), ((double *)__pyx_v_rd));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowObjective);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_obj);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowlb);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowub);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_colub);
    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_collb);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.loadProblem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowObjective);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_obj);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowlb);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_rowub);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_colub);
  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_collb);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1500
 *                                          <double*> rd)
 * 
 *     def getCoinInfinity(self):             # <<<<<<<<<<<<<<
 *         return self.CppSelf.getCoinInfinity()
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_76getCoinInfinity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_76getCoinInfinity[] = "CyClpSimplex.getCoinInfinity(self)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_76getCoinInfinity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getCoinInfinity");
  __Pyx_TraceCall("getCoinInfinity", __pyx_f[0], 1500);

  /* "CyLP/cy/CyClpSimplex.pyx":1501
 * 
 *     def getCoinInfinity(self):
 *         return self.CppSelf.getCoinInfinity()             # <<<<<<<<<<<<<<
 * 
 * #cdef api void CyPostPrimalRow(CppIClpSimplex* s):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_self)->CppSelf->getCoinInfinity()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.CyClpSimplex.getCoinInfinity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1554
 * 
 * 
 * def getModelExample():             # <<<<<<<<<<<<<<
 *     '''
 *     Return a model example to be used in doctests.
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_getModelExample(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_getModelExample[] = "getModelExample()\n\n    Return a model example to be used in doctests.\n    ";
static PyMethodDef __pyx_mdef_4CyLP_2cy_12CyClpSimplex_getModelExample = {__Pyx_NAMESTR("getModelExample"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_getModelExample, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_getModelExample)};
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_getModelExample(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_CyLPModel = NULL;
  PyObject *__pyx_v_CyLPArray = NULL;
  PyObject *__pyx_v_CyClpSimplex = NULL;
  PyObject *__pyx_v_model = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_A = NULL;
  PyObject *__pyx_v_B = NULL;
  PyObject *__pyx_v_D = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_x_u = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getModelExample");
  __Pyx_TraceCall("getModelExample", __pyx_f[0], 1554);
  __pyx_self = __pyx_self;

  /* "CyLP/cy/CyClpSimplex.pyx":1558
 *     Return a model example to be used in doctests.
 *     '''
 *     import numpy as np             # <<<<<<<<<<<<<<
 *     from CyLP.py.modeling.CyLPModel import CyLPModel, CyLPArray
 *     from CyLP.cy import CyClpSimplex
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1559
 *     '''
 *     import numpy as np
 *     from CyLP.py.modeling.CyLPModel import CyLPModel, CyLPArray             # <<<<<<<<<<<<<<
 *     from CyLP.cy import CyClpSimplex
 * 
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPModel));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__CyLPModel));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPModel));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPArray));
  PyList_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_n_s__CyLPArray));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPArray));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_42), ((PyObject *)__pyx_t_1), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__CyLPModel); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_CyLPModel = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__CyLPArray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_CyLPArray = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1560
 *     import numpy as np
 *     from CyLP.py.modeling.CyLPModel import CyLPModel, CyLPArray
 *     from CyLP.cy import CyClpSimplex             # <<<<<<<<<<<<<<
 * 
 *     model = CyLPModel()
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyClpSimplex));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__CyClpSimplex));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyClpSimplex));
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s_43), ((PyObject *)__pyx_t_2), -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__CyClpSimplex); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_CyClpSimplex = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1562
 *     from CyLP.cy import CyClpSimplex
 * 
 *     model = CyLPModel()             # <<<<<<<<<<<<<<
 *     x = model.addVariable('x', 3)
 *     y = model.addVariable('y', 2)
 */
  __pyx_t_1 = PyObject_Call(__pyx_v_CyLPModel, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_model = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1563
 * 
 *     model = CyLPModel()
 *     x = model.addVariable('x', 3)             # <<<<<<<<<<<<<<
 *     y = model.addVariable('y', 2)
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_model, __pyx_n_s__addVariable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_44), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_x = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1564
 *     model = CyLPModel()
 *     x = model.addVariable('x', 3)
 *     y = model.addVariable('y', 2)             # <<<<<<<<<<<<<<
 * 
 *     A = np.matrix([[1., 2., 0], [1., 0, 1.]])
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_model, __pyx_n_s__addVariable); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_45), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_y = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1566
 *     y = model.addVariable('y', 2)
 * 
 *     A = np.matrix([[1., 2., 0], [1., 0, 1.]])             # <<<<<<<<<<<<<<
 *     B = np.matrix([[1., 0, 0], [0, 0, 1.]])
 *     D = np.matrix([[1., 2.], [0, 1]])
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_np, __pyx_n_s__matrix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(2.); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
  PyList_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __pyx_v_A = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1567
 * 
 *     A = np.matrix([[1., 2., 0], [1., 0, 1.]])
 *     B = np.matrix([[1., 0, 0], [0, 0, 1.]])             # <<<<<<<<<<<<<<
 *     D = np.matrix([[1., 2.], [0, 1]])
 *     a = CyLPArray([5, 2.5])
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_np, __pyx_n_s__matrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyList_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_t_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_v_B = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1568
 *     A = np.matrix([[1., 2., 0], [1., 0, 1.]])
 *     B = np.matrix([[1., 0, 0], [0, 0, 1.]])
 *     D = np.matrix([[1., 2.], [0, 1]])             # <<<<<<<<<<<<<<
 *     a = CyLPArray([5, 2.5])
 *     b = CyLPArray([4.2, 3])
 */
  __pyx_t_5 = PyObject_GetAttr(__pyx_v_np, __pyx_n_s__matrix); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyFloat_FromDouble(2.); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyList_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_D = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1569
 *     B = np.matrix([[1., 0, 0], [0, 0, 1.]])
 *     D = np.matrix([[1., 2.], [0, 1]])
 *     a = CyLPArray([5, 2.5])             # <<<<<<<<<<<<<<
 *     b = CyLPArray([4.2, 3])
 *     x_u= CyLPArray([2., 3.5])
 */
  __pyx_t_4 = PyFloat_FromDouble(2.5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_int_5);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_5);
  __Pyx_GIVEREF(__pyx_int_5);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_v_CyLPArray, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_v_a = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1570
 *     D = np.matrix([[1., 2.], [0, 1]])
 *     a = CyLPArray([5, 2.5])
 *     b = CyLPArray([4.2, 3])             # <<<<<<<<<<<<<<
 *     x_u= CyLPArray([2., 3.5])
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(4.2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_3);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_4));
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_v_CyLPArray, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_b = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1571
 *     a = CyLPArray([5, 2.5])
 *     b = CyLPArray([4.2, 3])
 *     x_u= CyLPArray([2., 3.5])             # <<<<<<<<<<<<<<
 * 
 *     model += A * x <= a
 */
  __pyx_t_4 = PyFloat_FromDouble(2.); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyFloat_FromDouble(3.5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_v_CyLPArray, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_x_u = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1573
 *     x_u= CyLPArray([2., 3.5])
 * 
 *     model += A * x <= a             # <<<<<<<<<<<<<<
 *     model += 2 <= B * x + D * y <= b
 *     model += y >= 0
 */
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_A, __pyx_v_x); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_5, __pyx_v_a, Py_LE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_model, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_model);
  __pyx_v_model = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1574
 * 
 *     model += A * x <= a
 *     model += 2 <= B * x + D * y <= b             # <<<<<<<<<<<<<<
 *     model += y >= 0
 *     model += 1.1 <= x[1:3] <= x_u
 */
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_B, __pyx_v_x); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_D, __pyx_v_y); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_int_2, __pyx_t_4, Py_LE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_IsTrue(__pyx_t_2)) {
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_v_b, Py_LE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_model, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_model);
  __pyx_v_model = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1575
 *     model += A * x <= a
 *     model += 2 <= B * x + D * y <= b
 *     model += y >= 0             # <<<<<<<<<<<<<<
 *     model += 1.1 <= x[1:3] <= x_u
 * 
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_y, __pyx_int_0, Py_GE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_model, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_v_model);
  __pyx_v_model = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1576
 *     model += 2 <= B * x + D * y <= b
 *     model += y >= 0
 *     model += 1.1 <= x[1:3] <= x_u             # <<<<<<<<<<<<<<
 * 
 *     c = CyLPArray([1., -2., 3.])
 */
  __pyx_t_2 = PyFloat_FromDouble(1.1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PySequence_GetSlice(__pyx_v_x, 1, 3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_LE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_PyObject_IsTrue(__pyx_t_5)) {
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_v_x_u, Py_LE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_model, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_v_model);
  __pyx_v_model = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1578
 *     model += 1.1 <= x[1:3] <= x_u
 * 
 *     c = CyLPArray([1., -2., 3.])             # <<<<<<<<<<<<<<
 *     model.objective = c * x + 2 * y.sum()
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(1.); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(-2.); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyFloat_FromDouble(3.); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_v_CyLPArray, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_c = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1579
 * 
 *     c = CyLPArray([1., -2., 3.])
 *     model.objective = c * x + 2 * y.sum()             # <<<<<<<<<<<<<<
 * 
 *     return model
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_c, __pyx_v_x); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_y, __pyx_n_s__sum); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_v_model, __pyx_n_s__objective, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1581
 *     model.objective = c * x + 2 * y.sum()
 * 
 *     return model             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_model);
  __pyx_r = __pyx_v_model;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.getModelExample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_CyLPModel);
  __Pyx_XDECREF(__pyx_v_CyLPArray);
  __Pyx_XDECREF(__pyx_v_CyClpSimplex);
  __Pyx_XDECREF(__pyx_v_model);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_x_u);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1584
 * 
 * 
 * cpdef cydot(CyCoinIndexedVector v1, CyCoinIndexedVector v2):             # <<<<<<<<<<<<<<
 *     return cdot(v1.CppSelf, v2.CppSelf)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_1cydot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_4CyLP_2cy_12CyClpSimplex_cydot(struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_v1, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_v2, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("cydot");
  __Pyx_TraceCall("cydot", __pyx_f[0], 1584);

  /* "CyLP/cy/CyClpSimplex.pyx":1585
 * 
 * cpdef cydot(CyCoinIndexedVector v1, CyCoinIndexedVector v2):
 *     return cdot(v1.CppSelf, v2.CppSelf)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(cdot(__pyx_v_v1->CppSelf, __pyx_v_v2->CppSelf)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.cydot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1584
 * 
 * 
 * cpdef cydot(CyCoinIndexedVector v1, CyCoinIndexedVector v2):             # <<<<<<<<<<<<<<
 *     return cdot(v1.CppSelf, v2.CppSelf)
 * 
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_1cydot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_1cydot[] = "cydot(CyCoinIndexedVector v1, CyCoinIndexedVector v2)";
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_1cydot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_v1 = 0;
  struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *__pyx_v_v2 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__v1,&__pyx_n_s__v2,0};
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("cydot");
  __Pyx_TraceCall("cydot", __pyx_f[0], 1584);
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__v1);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__v2);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cydot", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "cydot") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_v1 = ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)values[0]);
    __pyx_v_v2 = ((struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cydot", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.cydot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v1), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "v1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v2), __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector, 1, "v2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4CyLP_2cy_12CyClpSimplex_cydot(__pyx_v_v1, __pyx_v_v2, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.cydot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1588
 * 
 * 
 * def getMpsExample():             # <<<<<<<<<<<<<<
 *     '''
 *     Return full path to an MPS example file for doctests
 */

static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_2getMpsExample(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4CyLP_2cy_12CyClpSimplex_2getMpsExample[] = "getMpsExample()\n\n    Return full path to an MPS example file for doctests\n    ";
static PyMethodDef __pyx_mdef_4CyLP_2cy_12CyClpSimplex_2getMpsExample = {__Pyx_NAMESTR("getMpsExample"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_2getMpsExample, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_2getMpsExample)};
static PyObject *__pyx_pf_4CyLP_2cy_12CyClpSimplex_2getMpsExample(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_v_os = NULL;
  PyObject *__pyx_v_inspect = NULL;
  PyObject *__pyx_v_curpath = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("getMpsExample");
  __Pyx_TraceCall("getMpsExample", __pyx_f[0], 1588);
  __pyx_self = __pyx_self;

  /* "CyLP/cy/CyClpSimplex.pyx":1592
 *     Return full path to an MPS example file for doctests
 *     '''
 *     import os             # <<<<<<<<<<<<<<
 *     import inspect
 *     curpath = os.path.dirname(inspect.getfile(inspect.currentframe()))
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__os), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_os = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1593
 *     '''
 *     import os
 *     import inspect             # <<<<<<<<<<<<<<
 *     curpath = os.path.dirname(inspect.getfile(inspect.currentframe()))
 *     return os.path.join(curpath, '../input/p0033.mps')
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__inspect), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_inspect = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1594
 *     import os
 *     import inspect
 *     curpath = os.path.dirname(inspect.getfile(inspect.currentframe()))             # <<<<<<<<<<<<<<
 *     return os.path.join(curpath, '../input/p0033.mps')
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_os, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__dirname); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_inspect, __pyx_n_s__getfile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_inspect, __pyx_n_s__currentframe); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_curpath = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1595
 *     import inspect
 *     curpath = os.path.dirname(inspect.getfile(inspect.currentframe()))
 *     return os.path.join(curpath, '../input/p0033.mps')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyObject_GetAttr(__pyx_v_os, __pyx_n_s__path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(__pyx_v_curpath);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_curpath);
  __Pyx_GIVEREF(__pyx_v_curpath);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_46));
  PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_kp_s_46));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_46));
  __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("CyLP.cy.CyClpSimplex.getMpsExample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_os);
  __Pyx_XDECREF(__pyx_v_inspect);
  __Pyx_XDECREF(__pyx_v_curpath);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1598
 * 
 * 
 * cdef int RunIsPivotAcceptable(void * ptr):             # <<<<<<<<<<<<<<
 *     cdef CyClpSimplex CyWrapper = <CyClpSimplex>(ptr)
 *     return CyWrapper.isPivotAcceptable()
 */

static int __pyx_f_4CyLP_2cy_12CyClpSimplex_RunIsPivotAcceptable(void *__pyx_v_ptr) {
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_CyWrapper = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("RunIsPivotAcceptable");
  __Pyx_TraceCall("RunIsPivotAcceptable", __pyx_f[0], 1598);

  /* "CyLP/cy/CyClpSimplex.pyx":1599
 * 
 * cdef int RunIsPivotAcceptable(void * ptr):
 *     cdef CyClpSimplex CyWrapper = <CyClpSimplex>(ptr)             # <<<<<<<<<<<<<<
 *     return CyWrapper.isPivotAcceptable()
 * 
 */
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_ptr)));
  __pyx_v_CyWrapper = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_ptr);

  /* "CyLP/cy/CyClpSimplex.pyx":1600
 * cdef int RunIsPivotAcceptable(void * ptr):
 *     cdef CyClpSimplex CyWrapper = <CyClpSimplex>(ptr)
 *     return CyWrapper.isPivotAcceptable()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_CyWrapper), __pyx_n_s__isPivotAcceptable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("CyLP.cy.CyClpSimplex.RunIsPivotAcceptable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_CyWrapper);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "CyLP/cy/CyClpSimplex.pyx":1603
 * 
 * 
 * cdef int RunVarSelCriteria(void * ptr, int varInd):             # <<<<<<<<<<<<<<
 *     cdef CyClpSimplex CyWrapper = <CyClpSimplex>(ptr)
 *     return CyWrapper.checkVar(varInd)
 */

static int __pyx_f_4CyLP_2cy_12CyClpSimplex_RunVarSelCriteria(void *__pyx_v_ptr, int __pyx_v_varInd) {
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *__pyx_v_CyWrapper = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("RunVarSelCriteria");
  __Pyx_TraceCall("RunVarSelCriteria", __pyx_f[0], 1603);

  /* "CyLP/cy/CyClpSimplex.pyx":1604
 * 
 * cdef int RunVarSelCriteria(void * ptr, int varInd):
 *     cdef CyClpSimplex CyWrapper = <CyClpSimplex>(ptr)             # <<<<<<<<<<<<<<
 *     return CyWrapper.checkVar(varInd)
 * 
 */
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_ptr)));
  __pyx_v_CyWrapper = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)__pyx_v_ptr);

  /* "CyLP/cy/CyClpSimplex.pyx":1605
 * cdef int RunVarSelCriteria(void * ptr, int varInd):
 *     cdef CyClpSimplex CyWrapper = <CyClpSimplex>(ptr)
 *     return CyWrapper.checkVar(varInd)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_CyWrapper), __pyx_n_s__checkVar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_varInd); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("CyLP.cy.CyClpSimplex.RunVarSelCriteria", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_CyWrapper);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":190
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

static CYTHON_UNUSED int __pyx_pf_5numpy_7ndarray___getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pf_5numpy_7ndarray___getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__");
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }
  __Pyx_TraceCall("__getbuffer__", __pyx_f[1], 190);

  /* "numpy.pxd":196
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = (__pyx_v_info == NULL);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "numpy.pxd":199
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":200
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":202
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(((PyArrayObject *)__pyx_v_self));

  /* "numpy.pxd":204
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));
  if (__pyx_t_1) {

    /* "numpy.pxd":205
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "numpy.pxd":207
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L6:;

  /* "numpy.pxd":209
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS);
  if (__pyx_t_1) {

    /* "numpy.pxd":210
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
    __pyx_t_2 = (!PyArray_CHKFLAGS(((PyArrayObject *)__pyx_v_self), NPY_C_CONTIGUOUS));
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "numpy.pxd":211
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_48), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "numpy.pxd":213
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_3 = ((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS);
  if (__pyx_t_3) {

    /* "numpy.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
    __pyx_t_1 = (!PyArray_CHKFLAGS(((PyArrayObject *)__pyx_v_self), NPY_F_CONTIGUOUS));
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  if (__pyx_t_2) {

    /* "numpy.pxd":215
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_50), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "numpy.pxd":217
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(((PyArrayObject *)__pyx_v_self));

  /* "numpy.pxd":218
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "numpy.pxd":219
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  if (__pyx_v_copy_shape) {

    /* "numpy.pxd":222
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "numpy.pxd":223
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "numpy.pxd":224
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_5 = __pyx_v_ndim;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "numpy.pxd":225
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(((PyArrayObject *)__pyx_v_self))[__pyx_v_i]);

      /* "numpy.pxd":226
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(((PyArrayObject *)__pyx_v_self))[__pyx_v_i]);
    }
    goto __pyx_L9;
  }
  /*else*/ {

    /* "numpy.pxd":228
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(((PyArrayObject *)__pyx_v_self)));

    /* "numpy.pxd":229
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(((PyArrayObject *)__pyx_v_self)));
  }
  __pyx_L9:;

  /* "numpy.pxd":230
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "numpy.pxd":231
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(((PyArrayObject *)__pyx_v_self));

  /* "numpy.pxd":232
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!PyArray_ISWRITEABLE(((PyArrayObject *)__pyx_v_self)));

  /* "numpy.pxd":235
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "numpy.pxd":236
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __Pyx_INCREF(((PyObject *)((PyArrayObject *)__pyx_v_self)->descr));
  __pyx_v_descr = ((PyArrayObject *)__pyx_v_self)->descr;

  /* "numpy.pxd":240
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "numpy.pxd":242
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = (!__pyx_v_hasfields);
  if (__pyx_t_2) {
    __pyx_t_3 = (!__pyx_v_copy_shape);
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (__pyx_t_1) {

    /* "numpy.pxd":244
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L12;
  }
  /*else*/ {

    /* "numpy.pxd":247
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = __pyx_v_self;
  }
  __pyx_L12:;

  /* "numpy.pxd":249
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == '>' and little_endian) or
 */
  __pyx_t_1 = (!__pyx_v_hasfields);
  if (__pyx_t_1) {

    /* "numpy.pxd":250
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):
 */
    __pyx_v_t = __pyx_v_descr->type_num;

    /* "numpy.pxd":251
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == '>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_1 = (__pyx_v_descr->byteorder == '>');
    if (__pyx_t_1) {
      __pyx_t_2 = __pyx_v_little_endian;
    } else {
      __pyx_t_2 = __pyx_t_1;
    }
    if (!__pyx_t_2) {

      /* "numpy.pxd":252
 *                 t = descr.type_num
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
      __pyx_t_1 = (__pyx_v_descr->byteorder == '<');
      if (__pyx_t_1) {
        __pyx_t_3 = (!__pyx_v_little_endian);
        __pyx_t_7 = __pyx_t_3;
      } else {
        __pyx_t_7 = __pyx_t_1;
      }
      __pyx_t_1 = __pyx_t_7;
    } else {
      __pyx_t_1 = __pyx_t_2;
    }
    if (__pyx_t_1) {

      /* "numpy.pxd":253
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_52), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L14;
    }
    __pyx_L14:;

    /* "numpy.pxd":254
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_BYTE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__b;
      goto __pyx_L15;
    }

    /* "numpy.pxd":255
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_UBYTE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__B;
      goto __pyx_L15;
    }

    /* "numpy.pxd":256
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_SHORT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__h;
      goto __pyx_L15;
    }

    /* "numpy.pxd":257
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_USHORT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__H;
      goto __pyx_L15;
    }

    /* "numpy.pxd":258
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_INT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__i;
      goto __pyx_L15;
    }

    /* "numpy.pxd":259
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_UINT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__I;
      goto __pyx_L15;
    }

    /* "numpy.pxd":260
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_LONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__l;
      goto __pyx_L15;
    }

    /* "numpy.pxd":261
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_ULONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__L;
      goto __pyx_L15;
    }

    /* "numpy.pxd":262
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_LONGLONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__q;
      goto __pyx_L15;
    }

    /* "numpy.pxd":263
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_ULONGLONG);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Q;
      goto __pyx_L15;
    }

    /* "numpy.pxd":264
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_FLOAT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__f;
      goto __pyx_L15;
    }

    /* "numpy.pxd":265
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_DOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__d;
      goto __pyx_L15;
    }

    /* "numpy.pxd":266
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_LONGDOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__g;
      goto __pyx_L15;
    }

    /* "numpy.pxd":267
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_CFLOAT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Zf;
      goto __pyx_L15;
    }

    /* "numpy.pxd":268
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
    __pyx_t_1 = (__pyx_v_t == NPY_CDOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Zd;
      goto __pyx_L15;
    }

    /* "numpy.pxd":269
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
    __pyx_t_1 = (__pyx_v_t == NPY_CLONGDOUBLE);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__Zg;
      goto __pyx_L15;
    }

    /* "numpy.pxd":270
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    __pyx_t_1 = (__pyx_v_t == NPY_OBJECT);
    if (__pyx_t_1) {
      __pyx_v_f = __pyx_k__O;
      goto __pyx_L15;
    }
    /*else*/ {

      /* "numpy.pxd":272
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_4 = PyInt_FromLong(__pyx_v_t); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_53), __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_8));
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_8));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_8));
      __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L15:;

    /* "numpy.pxd":273
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "numpy.pxd":274
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L13;
  }
  /*else*/ {

    /* "numpy.pxd":276
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = '^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "numpy.pxd":277
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = '^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "numpy.pxd":278
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = '^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "numpy.pxd":281
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)             # <<<<<<<<<<<<<<
 *                 f[0] = 0 # Terminate format string
 * 
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_9;

    /* "numpy.pxd":282
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = 0 # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = 0;
  }
  __pyx_L13:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":284
 *                 f[0] = 0 # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

static CYTHON_UNUSED void __pyx_pf_5numpy_7ndarray_1__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pf_5numpy_7ndarray_1__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__");
  __Pyx_TraceCall("__releasebuffer__", __pyx_f[1], 284);

  /* "numpy.pxd":285
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = PyArray_HASFIELDS(((PyArrayObject *)__pyx_v_self));
  if (__pyx_t_1) {

    /* "numpy.pxd":286
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "numpy.pxd":287
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));
  if (__pyx_t_1) {

    /* "numpy.pxd":288
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L6;
  }
  __pyx_L6:;

  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
}

/* "numpy.pxd":764
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1");
  __Pyx_TraceCall("PyArray_MultiIterNew1", __pyx_f[1], 764);

  /* "numpy.pxd":765
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":767
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2");
  __Pyx_TraceCall("PyArray_MultiIterNew2", __pyx_f[1], 767);

  /* "numpy.pxd":768
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":770
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3");
  __Pyx_TraceCall("PyArray_MultiIterNew3", __pyx_f[1], 770);

  /* "numpy.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":773
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4");
  __Pyx_TraceCall("PyArray_MultiIterNew4", __pyx_f[1], 773);

  /* "numpy.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":776
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5");
  __Pyx_TraceCall("PyArray_MultiIterNew5", __pyx_f[1], 776);

  /* "numpy.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":779
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  long __pyx_t_10;
  char *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("_util_dtypestring");
  __Pyx_TraceCall("_util_dtypestring", __pyx_f[1], 779);

  /* "numpy.pxd":786
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":787
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":790
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(((PyObject *)__pyx_v_descr->names) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 790; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_descr->names); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    __Pyx_XDECREF(__pyx_v_childname);
    __pyx_v_childname = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "numpy.pxd":791
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected tuple, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF(((PyObject *)__pyx_v_fields));
    __pyx_v_fields = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "numpy.pxd":792
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 */
    if (likely(PyTuple_CheckExact(((PyObject *)__pyx_v_fields)))) {
      PyObject* sequence = ((PyObject *)__pyx_v_fields);
      if (unlikely(PyTuple_GET_SIZE(sequence) != 2)) {
        if (PyTuple_GET_SIZE(sequence) > 2) __Pyx_RaiseTooManyValuesError(2);
        else __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(sequence));
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
    } else {
      __Pyx_UnpackTupleError(((PyObject *)__pyx_v_fields), 2);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF(((PyObject *)__pyx_v_child));
    __pyx_v_child = ((PyArray_Descr *)__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_v_new_offset);
    __pyx_v_new_offset = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "numpy.pxd":794
 *         child, new_offset = fields
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = PyInt_FromLong((__pyx_v_end - __pyx_v_f)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_15, Py_LT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "numpy.pxd":795
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == '>' and little_endian) or
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_55), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "numpy.pxd":797
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == '>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == '<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_6 = (__pyx_v_child->byteorder == '>');
    if (__pyx_t_6) {
      __pyx_t_7 = __pyx_v_little_endian;
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    if (!__pyx_t_7) {

      /* "numpy.pxd":798
 * 
 *         if ((child.byteorder == '>' and little_endian) or
 *             (child.byteorder == '<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
      __pyx_t_6 = (__pyx_v_child->byteorder == '<');
      if (__pyx_t_6) {
        __pyx_t_8 = (!__pyx_v_little_endian);
        __pyx_t_9 = __pyx_t_8;
      } else {
        __pyx_t_9 = __pyx_t_6;
      }
      __pyx_t_6 = __pyx_t_9;
    } else {
      __pyx_t_6 = __pyx_t_7;
    }
    if (__pyx_t_6) {

      /* "numpy.pxd":799
 *         if ((child.byteorder == '>' and little_endian) or
 *             (child.byteorder == '<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_56), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "numpy.pxd":809
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_5 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_v_new_offset, Py_LT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_6) break;

      /* "numpy.pxd":810
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "numpy.pxd":811
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "numpy.pxd":812
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_10 = 0;
      (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + 1);
    }

    /* "numpy.pxd":814
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_10 = 0;
    (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + __pyx_v_child->elsize);

    /* "numpy.pxd":816
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = (!PyDataType_HASFIELDS(__pyx_v_child));
    if (__pyx_t_6) {

      /* "numpy.pxd":817
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_3 = PyInt_FromLong(__pyx_v_child->type_num); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF(__pyx_v_t);
      __pyx_v_t = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "numpy.pxd":818
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = ((__pyx_v_end - __pyx_v_f) < 5);
      if (__pyx_t_6) {

        /* "numpy.pxd":819
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_3 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_58), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L10;
      }
      __pyx_L10:;

      /* "numpy.pxd":822
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L11;
      }

      /* "numpy.pxd":823
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L11;
      }

      /* "numpy.pxd":824
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L11;
      }

      /* "numpy.pxd":825
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L11;
      }

      /* "numpy.pxd":826
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L11;
      }

      /* "numpy.pxd":827
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L11;
      }

      /* "numpy.pxd":828
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L11;
      }

      /* "numpy.pxd":829
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L11;
      }

      /* "numpy.pxd":830
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L11;
      }

      /* "numpy.pxd":831
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L11;
      }

      /* "numpy.pxd":832
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L11;
      }

      /* "numpy.pxd":833
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_5 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L11;
      }

      /* "numpy.pxd":834
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_3 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L11;
      }

      /* "numpy.pxd":835
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_5 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "numpy.pxd":836
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "numpy.pxd":837
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_5 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "numpy.pxd":838
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_3 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L11;
      }
      /*else*/ {

        /* "numpy.pxd":840
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_5 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_53), __pyx_v_t); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_5));
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_3));
        PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_5));
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
        __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L11:;

      /* "numpy.pxd":841
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L9;
    }
    /*else*/ {

      /* "numpy.pxd":845
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_11 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_11;
    }
    __pyx_L9:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "numpy.pxd":846
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "numpy.pxd":961
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("set_array_base");
  __Pyx_TraceCall("set_array_base", __pyx_f[1], 961);

  /* "numpy.pxd":963
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  if (__pyx_t_1) {

    /* "numpy.pxd":964
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "numpy.pxd":966
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "numpy.pxd":967
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "numpy.pxd":968
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "numpy.pxd":969
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  __Pyx_TraceReturn(Py_None);
  __Pyx_RefNannyFinishContext();
}

/* "numpy.pxd":971
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_TraceDeclarations
  __Pyx_RefNannySetupContext("get_array_base");
  __Pyx_TraceCall("get_array_base", __pyx_f[1], 971);

  /* "numpy.pxd":972
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = (__pyx_v_arr->base == NULL);
  if (__pyx_t_1) {

    /* "numpy.pxd":973
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "numpy.pxd":975
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_4CyLP_2cy_12CyClpSimplex_CyClpSimplex __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex;

static PyObject *__pyx_tp_new_4CyLP_2cy_12CyClpSimplex_CyClpSimplex(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)o);
  p->__pyx_vtab = __pyx_vtabptr_4CyLP_2cy_12CyClpSimplex_CyClpSimplex;
  p->vars = Py_None; Py_INCREF(Py_None);
  p->varSelCriteria = Py_None; Py_INCREF(Py_None);
  p->coinModel = ((struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *)Py_None); Py_INCREF(Py_None);
  p->cyLPModel = Py_None; Py_INCREF(Py_None);
  p->Hessian = Py_None; Py_INCREF(Py_None);
  p->cyPivot = ((struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4CyLP_2cy_12CyClpSimplex_CyClpSimplex(PyObject *o) {
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *p = (struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)o;
  Py_XDECREF(p->vars);
  Py_XDECREF(p->varSelCriteria);
  Py_XDECREF(((PyObject *)p->coinModel));
  Py_XDECREF(p->cyLPModel);
  Py_XDECREF(p->Hessian);
  Py_XDECREF(((PyObject *)p->cyPivot));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4CyLP_2cy_12CyClpSimplex_CyClpSimplex(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *p = (struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)o;
  if (p->vars) {
    e = (*v)(p->vars, a); if (e) return e;
  }
  if (p->varSelCriteria) {
    e = (*v)(p->varSelCriteria, a); if (e) return e;
  }
  if (p->coinModel) {
    e = (*v)(((PyObject*)p->coinModel), a); if (e) return e;
  }
  if (p->cyLPModel) {
    e = (*v)(p->cyLPModel, a); if (e) return e;
  }
  if (p->Hessian) {
    e = (*v)(p->Hessian, a); if (e) return e;
  }
  if (p->cyPivot) {
    e = (*v)(((PyObject*)p->cyPivot), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4CyLP_2cy_12CyClpSimplex_CyClpSimplex(PyObject *o) {
  struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *p = (struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->vars);
  p->vars = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->varSelCriteria);
  p->varSelCriteria = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->coinModel);
  p->coinModel = ((struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->cyLPModel);
  p->cyLPModel = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->Hessian);
  p->Hessian = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->cyPivot);
  p->cyPivot = ((struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_objective(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective_1__get__(o);
}

static int __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_objective(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9objective___set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_iteration(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9iteration___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nRows(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nRows___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nConstraints(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12nConstraints___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nVariables(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10nVariables___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nCols(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5nCols___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_matrix(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6matrix___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_constraints(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11constraints___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variableNames(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13variableNames___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variables(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9variables___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_objectiveValue(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14objectiveValue___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalVariableSolution(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22primalVariableSolution___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalVariableSolutionAll(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25primalVariableSolutionAll___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_solution(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8solution___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualVariableSolution(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20dualVariableSolution___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalConstraintSolution(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24primalConstraintSolution___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualConstraintSolution(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22dualConstraintSolution___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_reducedCosts(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts___get__(o);
}

static int __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_reducedCosts(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12reducedCosts_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variablesUpper(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesUpper___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variablesLower(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14variablesLower___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_constraintsUpper(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsUpper___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_constraintsLower(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16constraintsLower___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_status(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6status___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_freeOrSuperBasicVarInds(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23freeOrSuperBasicVarInds___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_notBasicOrFixedOrFlaggedVarInds(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31notBasicOrFixedOrFlaggedVarInds___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsFree(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9varIsFree___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsBasic(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsBasic___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsAtUpperBound(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtUpperBound___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsAtLowerBound(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17varIsAtLowerBound___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsSuperBasic(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15varIsSuperBasic___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsFixed(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varIsFixed___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsFlagged(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12varIsFlagged___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotFree(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10varNotFree___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotBasic(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotBasic___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotAtUpperBound(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtUpperBound___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotAtLowerBound(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18varNotAtLowerBound___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotSuperBasic(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16varNotSuperBasic___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotFixed(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11varNotFixed___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotFlagged(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13varNotFlagged___get__(o);
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_Hessian(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian___get__(o);
}

static int __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_Hessian(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7Hessian_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualTolerance(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance___get__(o);
}

static int __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualTolerance(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13dualTolerance_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalTolerance(PyObject *o, void *x) {
  return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance___get__(o);
}

static int __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalTolerance(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15primalTolerance_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4CyLP_2cy_12CyClpSimplex_CyClpSimplex[] = {
  {__Pyx_NAMESTR("getReducedCosts"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_1getReducedCosts, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_1getReducedCosts)},
  {__Pyx_NAMESTR("getStatusArray"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_2getStatusArray, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_2getStatusArray)},
  {__Pyx_NAMESTR("getRightHandSide"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3getRightHandSide, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_3getRightHandSide)},
  {__Pyx_NAMESTR("getStatusCode"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4getStatusCode, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_4getStatusCode)},
  {__Pyx_NAMESTR("getStatusString"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5getStatusString, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_5getStatusString)},
  {__Pyx_NAMESTR("setColumnLower"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6setColumnLower, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_6setColumnLower)},
  {__Pyx_NAMESTR("setColumnUpper"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7setColumnUpper, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_7setColumnUpper)},
  {__Pyx_NAMESTR("setRowLower"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8setRowLower, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_8setRowLower)},
  {__Pyx_NAMESTR("setRowUpper"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9setRowUpper, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_9setRowUpper)},
  {__Pyx_NAMESTR("useCustomPrimal"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10useCustomPrimal, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_10useCustomPrimal)},
  {__Pyx_NAMESTR("getUseCustomPrimal"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11getUseCustomPrimal, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_11getUseCustomPrimal)},
  {__Pyx_NAMESTR("flagged"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12flagged, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_12flagged)},
  {__Pyx_NAMESTR("setFlagged"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13setFlagged, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_13setFlagged)},
  {__Pyx_NAMESTR("largestDualError"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14largestDualError, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_14largestDualError)},
  {__Pyx_NAMESTR("pivotRow"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15pivotRow, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_15pivotRow)},
  {__Pyx_NAMESTR("setPivotRow"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16setPivotRow, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_16setPivotRow)},
  {__Pyx_NAMESTR("sequenceIn"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17sequenceIn, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_17sequenceIn)},
  {__Pyx_NAMESTR("setSequenceIn"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18setSequenceIn, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_18setSequenceIn)},
  {__Pyx_NAMESTR("getVariableNames"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_19getVariableNames, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_19getVariableNames)},
  {__Pyx_NAMESTR("setVariableName"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20setVariableName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_20setVariableName)},
  {__Pyx_NAMESTR("setConstraintName"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_21setConstraintName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_21setConstraintName)},
  {__Pyx_NAMESTR("getPivotVariable"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22getPivotVariable, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_22getPivotVariable)},
  {__Pyx_NAMESTR("getVarStatus"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23getVarStatus, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_23getVarStatus)},
  {__Pyx_NAMESTR("setColumnUpperArray"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24setColumnUpperArray, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_24setColumnUpperArray)},
  {__Pyx_NAMESTR("setColumnLowerArray"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25setColumnLowerArray, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_25setColumnLowerArray)},
  {__Pyx_NAMESTR("setRowUpperArray"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_26setRowUpperArray, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_26setRowUpperArray)},
  {__Pyx_NAMESTR("setRowLowerArray"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_27setRowLowerArray, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_27setRowLowerArray)},
  {__Pyx_NAMESTR("setObjectiveArray"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_28setObjectiveArray, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_28setObjectiveArray)},
  {__Pyx_NAMESTR("initialSolve"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_29initialSolve, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_29initialSolve)},
  {__Pyx_NAMESTR("initialPrimalSolve"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_30initialPrimalSolve, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_30initialPrimalSolve)},
  {__Pyx_NAMESTR("initialDualSolve"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31initialDualSolve, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_31initialDualSolve)},
  {__Pyx_NAMESTR("addConstraint"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_33addConstraint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_33addConstraint)},
  {__Pyx_NAMESTR("removeConstraint"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_34removeConstraint, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_34removeConstraint)},
  {__Pyx_NAMESTR("addVariable"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_35addVariable, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_35addVariable)},
  {__Pyx_NAMESTR("removeVariable"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_36removeVariable, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_36removeVariable)},
  {__Pyx_NAMESTR("getVarByName"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_37getVarByName, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_37getVarByName)},
  {__Pyx_NAMESTR("getVarNameByIndex"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_38getVarNameByIndex, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_38getVarNameByIndex)},
  {__Pyx_NAMESTR("CLP_addConstraint"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_39CLP_addConstraint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_39CLP_addConstraint)},
  {__Pyx_NAMESTR("CLP_addVariable"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_40CLP_addVariable, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_40CLP_addVariable)},
  {__Pyx_NAMESTR("addVariables"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_41addVariables, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_41addVariables)},
  {__Pyx_NAMESTR("addConstraints"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_42addConstraints, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_42addConstraints)},
  {__Pyx_NAMESTR("readMps"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_43readMps, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_43readMps)},
  {__Pyx_NAMESTR("extractCyLPModel"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_44extractCyLPModel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_44extractCyLPModel)},
  {__Pyx_NAMESTR("primal"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_45primal, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_45primal)},
  {__Pyx_NAMESTR("dual"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_46dual, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_46dual)},
  {__Pyx_NAMESTR("setPerturbation"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_47setPerturbation, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_47setPerturbation)},
  {__Pyx_NAMESTR("resize"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_48resize, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_48resize)},
  {__Pyx_NAMESTR("getBInvACol"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_49getBInvACol, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_49getBInvACol)},
  {__Pyx_NAMESTR("transposeTimesSubset"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_50transposeTimesSubset, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_50transposeTimesSubset)},
  {__Pyx_NAMESTR("transposeTimesSubsetAll"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_51transposeTimesSubsetAll, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_51transposeTimesSubsetAll)},
  {__Pyx_NAMESTR("setInteger"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_52setInteger, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_52setInteger)},
  {__Pyx_NAMESTR("copyInIntegerInformation"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_53copyInIntegerInformation, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_53copyInIntegerInformation)},
  {__Pyx_NAMESTR("replaceMatrix"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_54replaceMatrix, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_54replaceMatrix)},
  {__Pyx_NAMESTR("loadQuadraticObjective"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_55loadQuadraticObjective, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_55loadQuadraticObjective)},
  {__Pyx_NAMESTR("preSolve"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_56preSolve, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_56preSolve)},
  {__Pyx_NAMESTR("writeMps"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_57writeMps, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_57writeMps)},
  {__Pyx_NAMESTR("loadFromCyLPModel"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_58loadFromCyLPModel, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_58loadFromCyLPModel)},
  {__Pyx_NAMESTR("getCbcModel"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_59getCbcModel, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_59getCbcModel)},
  {__Pyx_NAMESTR("isPivotAcceptable"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_60isPivotAcceptable, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_60isPivotAcceptable)},
  {__Pyx_NAMESTR("checkVar"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_61checkVar, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_61checkVar)},
  {__Pyx_NAMESTR("setPrimalColumnPivotAlgorithmToWolfe"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_62setPrimalColumnPivotAlgorithmToWolfe, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_62setPrimalColumnPivotAlgorithmToWolfe)},
  {__Pyx_NAMESTR("setPrimalColumnPivotAlgorithmToPE"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_63setPrimalColumnPivotAlgorithmToPE, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_63setPrimalColumnPivotAlgorithmToPE)},
  {__Pyx_NAMESTR("setPivotMethod"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_64setPivotMethod, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_64setPivotMethod)},
  {__Pyx_NAMESTR("filterVars"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_65filterVars, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_65filterVars)},
  {__Pyx_NAMESTR("setObjectiveCoefficient"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_66setObjectiveCoefficient, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_66setObjectiveCoefficient)},
  {__Pyx_NAMESTR("partialPricing"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_67partialPricing, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_67partialPricing)},
  {__Pyx_NAMESTR("setComplementarityList"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_68setComplementarityList, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_68setComplementarityList)},
  {__Pyx_NAMESTR("getACol"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_69getACol, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_69getACol)},
  {__Pyx_NAMESTR("vectorTimesB_1"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_70vectorTimesB_1, METH_O, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_70vectorTimesB_1)},
  {__Pyx_NAMESTR("argWeightedMax"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_71argWeightedMax, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_71argWeightedMax)},
  {__Pyx_NAMESTR("getComplementarityList"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_72getComplementarityList, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_72getComplementarityList)},
  {__Pyx_NAMESTR("setComplement"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_73setComplement, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_73setComplement)},
  {__Pyx_NAMESTR("loadProblemFromCyCoinModel"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_74loadProblemFromCyCoinModel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_74loadProblemFromCyCoinModel)},
  {__Pyx_NAMESTR("loadProblem"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_75loadProblem, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_75loadProblem)},
  {__Pyx_NAMESTR("getCoinInfinity"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_76getCoinInfinity, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_76getCoinInfinity)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4CyLP_2cy_12CyClpSimplex_CyClpSimplex[] = {
  {(char *)"objective", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_objective, __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_objective, __Pyx_DOCSTR(__pyx_k_59), 0},
  {(char *)"iteration", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_iteration, 0, __Pyx_DOCSTR(__pyx_k_60), 0},
  {(char *)"nRows", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nRows, 0, __Pyx_DOCSTR(__pyx_k_61), 0},
  {(char *)"nConstraints", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nConstraints, 0, __Pyx_DOCSTR(__pyx_k_62), 0},
  {(char *)"nVariables", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nVariables, 0, __Pyx_DOCSTR(__pyx_k_63), 0},
  {(char *)"nCols", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_nCols, 0, __Pyx_DOCSTR(__pyx_k_64), 0},
  {(char *)"matrix", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_matrix, 0, __Pyx_DOCSTR(__pyx_k_65), 0},
  {(char *)"constraints", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_constraints, 0, __Pyx_DOCSTR(__pyx_k_66), 0},
  {(char *)"variableNames", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variableNames, 0, __Pyx_DOCSTR(__pyx_k_67), 0},
  {(char *)"variables", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variables, 0, __Pyx_DOCSTR(__pyx_k_68), 0},
  {(char *)"objectiveValue", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_objectiveValue, 0, __Pyx_DOCSTR(__pyx_k_69), 0},
  {(char *)"primalVariableSolution", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalVariableSolution, 0, __Pyx_DOCSTR(__pyx_k_70), 0},
  {(char *)"primalVariableSolutionAll", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalVariableSolutionAll, 0, __Pyx_DOCSTR(__pyx_k_71), 0},
  {(char *)"solution", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_solution, 0, __Pyx_DOCSTR(__pyx_k_72), 0},
  {(char *)"dualVariableSolution", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualVariableSolution, 0, __Pyx_DOCSTR(__pyx_k_73), 0},
  {(char *)"primalConstraintSolution", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalConstraintSolution, 0, __Pyx_DOCSTR(__pyx_k_74), 0},
  {(char *)"dualConstraintSolution", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualConstraintSolution, 0, __Pyx_DOCSTR(__pyx_k_75), 0},
  {(char *)"reducedCosts", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_reducedCosts, __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_reducedCosts, __Pyx_DOCSTR(__pyx_k_76), 0},
  {(char *)"variablesUpper", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variablesUpper, 0, __Pyx_DOCSTR(__pyx_k_77), 0},
  {(char *)"variablesLower", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_variablesLower, 0, __Pyx_DOCSTR(__pyx_k_78), 0},
  {(char *)"constraintsUpper", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_constraintsUpper, 0, __Pyx_DOCSTR(__pyx_k_79), 0},
  {(char *)"constraintsLower", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_constraintsLower, 0, __Pyx_DOCSTR(__pyx_k_80), 0},
  {(char *)"status", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_status, 0, __Pyx_DOCSTR(__pyx_k_81), 0},
  {(char *)"freeOrSuperBasicVarInds", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_freeOrSuperBasicVarInds, 0, __Pyx_DOCSTR(__pyx_k_82), 0},
  {(char *)"notBasicOrFixedOrFlaggedVarInds", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_notBasicOrFixedOrFlaggedVarInds, 0, __Pyx_DOCSTR(__pyx_k_83), 0},
  {(char *)"varIsFree", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsFree, 0, __Pyx_DOCSTR(__pyx_k_84), 0},
  {(char *)"varIsBasic", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsBasic, 0, __Pyx_DOCSTR(__pyx_k_85), 0},
  {(char *)"varIsAtUpperBound", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsAtUpperBound, 0, __Pyx_DOCSTR(__pyx_k_86), 0},
  {(char *)"varIsAtLowerBound", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsAtLowerBound, 0, __Pyx_DOCSTR(__pyx_k_87), 0},
  {(char *)"varIsSuperBasic", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsSuperBasic, 0, __Pyx_DOCSTR(__pyx_k_88), 0},
  {(char *)"varIsFixed", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsFixed, 0, __Pyx_DOCSTR(__pyx_k_89), 0},
  {(char *)"varIsFlagged", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varIsFlagged, 0, __Pyx_DOCSTR(__pyx_k_90), 0},
  {(char *)"varNotFree", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotFree, 0, __Pyx_DOCSTR(__pyx_k_91), 0},
  {(char *)"varNotBasic", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotBasic, 0, __Pyx_DOCSTR(__pyx_k_92), 0},
  {(char *)"varNotAtUpperBound", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotAtUpperBound, 0, __Pyx_DOCSTR(__pyx_k_93), 0},
  {(char *)"varNotAtLowerBound", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotAtLowerBound, 0, __Pyx_DOCSTR(__pyx_k_94), 0},
  {(char *)"varNotSuperBasic", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotSuperBasic, 0, __Pyx_DOCSTR(__pyx_k_95), 0},
  {(char *)"varNotFixed", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotFixed, 0, __Pyx_DOCSTR(__pyx_k_96), 0},
  {(char *)"varNotFlagged", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_varNotFlagged, 0, __Pyx_DOCSTR(__pyx_k_97), 0},
  {(char *)"Hessian", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_Hessian, __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_Hessian, 0, 0},
  {(char *)"dualTolerance", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualTolerance, __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualTolerance, 0, 0},
  {(char *)"primalTolerance", __pyx_getprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalTolerance, __pyx_setprop_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalTolerance, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_CyClpSimplex = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  __pyx_pf_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_32__iadd__, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_CyClpSimplex = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CyClpSimplex = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_CyClpSimplex = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4CyLP_2cy_12CyClpSimplex_CyClpSimplex = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("CyLP.cy.CyClpSimplex.CyClpSimplex"), /*tp_name*/
  sizeof(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4CyLP_2cy_12CyClpSimplex_CyClpSimplex, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_CyClpSimplex, /*tp_as_number*/
  &__pyx_tp_as_sequence_CyClpSimplex, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CyClpSimplex, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_CyClpSimplex, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    CyClpSimplex is a Cython interface to CLP.\n    Not all methods are available but they are being added gradually.\n\n    Its constructor can create an empty object if no argument is provided.\n    However, if a :class:`CyLPModel <CyLP.py.modeling.CyLPModel>` object is\n    given then the resulting ``CyClpSimplex`` object will be build from it.\n    For an example of the latter case see\n    :mod:`CyLP's modeling tool. <CyLP.py.modeling.CyLPModel>`\n\n    .. _simple-run:\n\n    **An easy example of how to read and solve an LP**\n\n    >>> from CyLP.cy.CyClpSimplex import CyClpSimplex, getMpsExample\n    >>> s = CyClpSimplex()\n    >>> f = getMpsExample()\n    >>> s.readMps(f)\n    0\n    >>> s.initialSolve()\n    'optimal'\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_4CyLP_2cy_12CyClpSimplex_CyClpSimplex, /*tp_traverse*/
  __pyx_tp_clear_4CyLP_2cy_12CyClpSimplex_CyClpSimplex, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4CyLP_2cy_12CyClpSimplex_CyClpSimplex, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4CyLP_2cy_12CyClpSimplex_CyClpSimplex, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4CyLP_2cy_12CyClpSimplex_CyClpSimplex, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_4CyLP_2cy_12CyClpSimplex_VarStatus(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_4CyLP_2cy_12CyClpSimplex_VarStatus(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4CyLP_2cy_12CyClpSimplex_VarStatus[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_VarStatus = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_VarStatus = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_VarStatus = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_VarStatus = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4CyLP_2cy_12CyClpSimplex_VarStatus = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("CyLP.cy.CyClpSimplex.VarStatus"), /*tp_name*/
  sizeof(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_VarStatus), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4CyLP_2cy_12CyClpSimplex_VarStatus, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_VarStatus, /*tp_as_number*/
  &__pyx_tp_as_sequence_VarStatus, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_VarStatus, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_VarStatus, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4CyLP_2cy_12CyClpSimplex_VarStatus, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4CyLP_2cy_12CyClpSimplex_VarStatus, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("cydot"), (PyCFunction)__pyx_pf_4CyLP_2cy_12CyClpSimplex_1cydot, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4CyLP_2cy_12CyClpSimplex_1cydot)},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("CyClpSimplex"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_n_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 1},
  {&__pyx_n_s_100, __pyx_k_100, sizeof(__pyx_k_100), 0, 0, 1, 1},
  {&__pyx_kp_s_101, __pyx_k_101, sizeof(__pyx_k_101), 0, 0, 1, 0},
  {&__pyx_kp_s_102, __pyx_k_102, sizeof(__pyx_k_102), 0, 0, 1, 0},
  {&__pyx_kp_s_103, __pyx_k_103, sizeof(__pyx_k_103), 0, 0, 1, 0},
  {&__pyx_kp_s_104, __pyx_k_104, sizeof(__pyx_k_104), 0, 0, 1, 0},
  {&__pyx_kp_s_105, __pyx_k_105, sizeof(__pyx_k_105), 0, 0, 1, 0},
  {&__pyx_n_s_106, __pyx_k_106, sizeof(__pyx_k_106), 0, 0, 1, 1},
  {&__pyx_kp_u_107, __pyx_k_107, sizeof(__pyx_k_107), 0, 1, 0, 0},
  {&__pyx_kp_u_108, __pyx_k_108, sizeof(__pyx_k_108), 0, 1, 0, 0},
  {&__pyx_kp_u_109, __pyx_k_109, sizeof(__pyx_k_109), 0, 1, 0, 0},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_kp_u_110, __pyx_k_110, sizeof(__pyx_k_110), 0, 1, 0, 0},
  {&__pyx_kp_u_111, __pyx_k_111, sizeof(__pyx_k_111), 0, 1, 0, 0},
  {&__pyx_kp_u_112, __pyx_k_112, sizeof(__pyx_k_112), 0, 1, 0, 0},
  {&__pyx_kp_u_113, __pyx_k_113, sizeof(__pyx_k_113), 0, 1, 0, 0},
  {&__pyx_kp_u_114, __pyx_k_114, sizeof(__pyx_k_114), 0, 1, 0, 0},
  {&__pyx_kp_u_115, __pyx_k_115, sizeof(__pyx_k_115), 0, 1, 0, 0},
  {&__pyx_kp_u_116, __pyx_k_116, sizeof(__pyx_k_116), 0, 1, 0, 0},
  {&__pyx_kp_u_117, __pyx_k_117, sizeof(__pyx_k_117), 0, 1, 0, 0},
  {&__pyx_kp_u_118, __pyx_k_118, sizeof(__pyx_k_118), 0, 1, 0, 0},
  {&__pyx_kp_s_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 0, 1, 0},
  {&__pyx_kp_s_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 0, 1, 0},
  {&__pyx_kp_s_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 0, 1, 0},
  {&__pyx_kp_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 0},
  {&__pyx_n_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 1},
  {&__pyx_kp_s_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 1, 0},
  {&__pyx_kp_s_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 0, 1, 0},
  {&__pyx_kp_s_26, __pyx_k_26, sizeof(__pyx_k_26), 0, 0, 1, 0},
  {&__pyx_kp_s_28, __pyx_k_28, sizeof(__pyx_k_28), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_n_s_30, __pyx_k_30, sizeof(__pyx_k_30), 0, 0, 1, 1},
  {&__pyx_kp_s_32, __pyx_k_32, sizeof(__pyx_k_32), 0, 0, 1, 0},
  {&__pyx_kp_s_33, __pyx_k_33, sizeof(__pyx_k_33), 0, 0, 1, 0},
  {&__pyx_kp_s_34, __pyx_k_34, sizeof(__pyx_k_34), 0, 0, 1, 0},
  {&__pyx_kp_s_36, __pyx_k_36, sizeof(__pyx_k_36), 0, 0, 1, 0},
  {&__pyx_n_s_38, __pyx_k_38, sizeof(__pyx_k_38), 0, 0, 1, 1},
  {&__pyx_kp_s_40, __pyx_k_40, sizeof(__pyx_k_40), 0, 0, 1, 0},
  {&__pyx_n_s_42, __pyx_k_42, sizeof(__pyx_k_42), 0, 0, 1, 1},
  {&__pyx_n_s_43, __pyx_k_43, sizeof(__pyx_k_43), 0, 0, 1, 1},
  {&__pyx_kp_s_46, __pyx_k_46, sizeof(__pyx_k_46), 0, 0, 1, 0},
  {&__pyx_kp_u_47, __pyx_k_47, sizeof(__pyx_k_47), 0, 1, 0, 0},
  {&__pyx_kp_u_49, __pyx_k_49, sizeof(__pyx_k_49), 0, 1, 0, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_u_51, __pyx_k_51, sizeof(__pyx_k_51), 0, 1, 0, 0},
  {&__pyx_kp_u_53, __pyx_k_53, sizeof(__pyx_k_53), 0, 1, 0, 0},
  {&__pyx_kp_u_54, __pyx_k_54, sizeof(__pyx_k_54), 0, 1, 0, 0},
  {&__pyx_kp_u_57, __pyx_k_57, sizeof(__pyx_k_57), 0, 1, 0, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_n_s_98, __pyx_k_98, sizeof(__pyx_k_98), 0, 0, 1, 1},
  {&__pyx_n_s_99, __pyx_k_99, sizeof(__pyx_k_99), 0, 0, 1, 1},
  {&__pyx_n_s__CyClpSimplex, __pyx_k__CyClpSimplex, sizeof(__pyx_k__CyClpSimplex), 0, 0, 1, 1},
  {&__pyx_n_s__CyLPArray, __pyx_k__CyLPArray, sizeof(__pyx_k__CyLPArray), 0, 0, 1, 1},
  {&__pyx_n_s__CyLPModel, __pyx_k__CyLPModel, sizeof(__pyx_k__CyLPModel), 0, 0, 1, 1},
  {&__pyx_n_s__CyLPSolution, __pyx_k__CyLPSolution, sizeof(__pyx_k__CyLPSolution), 0, 0, 1, 1},
  {&__pyx_n_s__CyLPVar, __pyx_k__CyLPVar, sizeof(__pyx_k__CyLPVar), 0, 0, 1, 1},
  {&__pyx_n_s__Exception, __pyx_k__Exception, sizeof(__pyx_k__Exception), 0, 0, 1, 1},
  {&__pyx_n_s__PivotPythonBase, __pyx_k__PivotPythonBase, sizeof(__pyx_k__PivotPythonBase), 0, 0, 1, 1},
  {&__pyx_n_s__RuntimeError, __pyx_k__RuntimeError, sizeof(__pyx_k__RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s____class__, __pyx_k____class__, sizeof(__pyx_k____class__), 0, 0, 1, 1},
  {&__pyx_n_s____getitem__, __pyx_k____getitem__, sizeof(__pyx_k____getitem__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__addConstraint, __pyx_k__addConstraint, sizeof(__pyx_k__addConstraint), 0, 0, 1, 1},
  {&__pyx_n_s__addVariable, __pyx_k__addVariable, sizeof(__pyx_k__addVariable), 0, 0, 1, 1},
  {&__pyx_n_s__appendCol, __pyx_k__appendCol, sizeof(__pyx_k__appendCol), 0, 0, 1, 1},
  {&__pyx_n_s__appendRow, __pyx_k__appendRow, sizeof(__pyx_k__appendRow), 0, 0, 1, 1},
  {&__pyx_n_s__arr, __pyx_k__arr, sizeof(__pyx_k__arr), 0, 0, 1, 1},
  {&__pyx_n_s__arr_ind, __pyx_k__arr_ind, sizeof(__pyx_k__arr_ind), 0, 0, 1, 1},
  {&__pyx_n_s__array, __pyx_k__array, sizeof(__pyx_k__array), 0, 0, 1, 1},
  {&__pyx_n_s__astype, __pyx_k__astype, sizeof(__pyx_k__astype), 0, 0, 1, 1},
  {&__pyx_n_s__atLowerBound, __pyx_k__atLowerBound, sizeof(__pyx_k__atLowerBound), 0, 0, 1, 1},
  {&__pyx_n_s__atUpperBound, __pyx_k__atUpperBound, sizeof(__pyx_k__atUpperBound), 0, 0, 1, 1},
  {&__pyx_n_s__basic, __pyx_k__basic, sizeof(__pyx_k__basic), 0, 0, 1, 1},
  {&__pyx_n_s__checkVar, __pyx_k__checkVar, sizeof(__pyx_k__checkVar), 0, 0, 1, 1},
  {&__pyx_n_s__cl, __pyx_k__cl, sizeof(__pyx_k__cl), 0, 0, 1, 1},
  {&__pyx_n_s__close, __pyx_k__close, sizeof(__pyx_k__close), 0, 0, 1, 1},
  {&__pyx_n_s__col, __pyx_k__col, sizeof(__pyx_k__col), 0, 0, 1, 1},
  {&__pyx_n_s__colArray, __pyx_k__colArray, sizeof(__pyx_k__colArray), 0, 0, 1, 1},
  {&__pyx_n_s__collb, __pyx_k__collb, sizeof(__pyx_k__collb), 0, 0, 1, 1},
  {&__pyx_n_s__colub, __pyx_k__colub, sizeof(__pyx_k__colub), 0, 0, 1, 1},
  {&__pyx_n_s__columnLower, __pyx_k__columnLower, sizeof(__pyx_k__columnLower), 0, 0, 1, 1},
  {&__pyx_n_s__columnStarts, __pyx_k__columnStarts, sizeof(__pyx_k__columnStarts), 0, 0, 1, 1},
  {&__pyx_n_s__columnUpper, __pyx_k__columnUpper, sizeof(__pyx_k__columnUpper), 0, 0, 1, 1},
  {&__pyx_n_s__columns, __pyx_k__columns, sizeof(__pyx_k__columns), 0, 0, 1, 1},
  {&__pyx_n_s__cons, __pyx_k__cons, sizeof(__pyx_k__cons), 0, 0, 1, 1},
  {&__pyx_n_s__constInd, __pyx_k__constInd, sizeof(__pyx_k__constInd), 0, 0, 1, 1},
  {&__pyx_n_s__constIndex, __pyx_k__constIndex, sizeof(__pyx_k__constIndex), 0, 0, 1, 1},
  {&__pyx_n_s__constraints, __pyx_k__constraints, sizeof(__pyx_k__constraints), 0, 0, 1, 1},
  {&__pyx_n_s__constraintsLower, __pyx_k__constraintsLower, sizeof(__pyx_k__constraintsLower), 0, 0, 1, 1},
  {&__pyx_n_s__constraintsUpper, __pyx_k__constraintsUpper, sizeof(__pyx_k__constraintsUpper), 0, 0, 1, 1},
  {&__pyx_n_s__coo_matrix, __pyx_k__coo_matrix, sizeof(__pyx_k__coo_matrix), 0, 0, 1, 1},
  {&__pyx_n_s__copy, __pyx_k__copy, sizeof(__pyx_k__copy), 0, 0, 1, 1},
  {&__pyx_n_s__csc_matrix, __pyx_k__csc_matrix, sizeof(__pyx_k__csc_matrix), 0, 0, 1, 1},
  {&__pyx_n_s__csc_matrixPlus, __pyx_k__csc_matrixPlus, sizeof(__pyx_k__csc_matrixPlus), 0, 0, 1, 1},
  {&__pyx_n_s__csr_matrix, __pyx_k__csr_matrix, sizeof(__pyx_k__csr_matrix), 0, 0, 1, 1},
  {&__pyx_n_s__currentframe, __pyx_k__currentframe, sizeof(__pyx_k__currentframe), 0, 0, 1, 1},
  {&__pyx_n_s__cyLPModel, __pyx_k__cyLPModel, sizeof(__pyx_k__cyLPModel), 0, 0, 1, 1},
  {&__pyx_n_s__data, __pyx_k__data, sizeof(__pyx_k__data), 0, 0, 1, 1},
  {&__pyx_n_s__deleteCurrent, __pyx_k__deleteCurrent, sizeof(__pyx_k__deleteCurrent), 0, 0, 1, 1},
  {&__pyx_n_s__dim, __pyx_k__dim, sizeof(__pyx_k__dim), 0, 0, 1, 1},
  {&__pyx_n_s__dims, __pyx_k__dims, sizeof(__pyx_k__dims), 0, 0, 1, 1},
  {&__pyx_n_s__dirname, __pyx_k__dirname, sizeof(__pyx_k__dirname), 0, 0, 1, 1},
  {&__pyx_n_s__doRowObjective, __pyx_k__doRowObjective, sizeof(__pyx_k__doRowObjective), 0, 0, 1, 1},
  {&__pyx_n_s__double, __pyx_k__double, sizeof(__pyx_k__double), 0, 0, 1, 1},
  {&__pyx_n_s__dropNames, __pyx_k__dropNames, sizeof(__pyx_k__dropNames), 0, 0, 1, 1},
  {&__pyx_n_s__elementIndex, __pyx_k__elementIndex, sizeof(__pyx_k__elementIndex), 0, 0, 1, 1},
  {&__pyx_n_s__elementValue, __pyx_k__elementValue, sizeof(__pyx_k__elementValue), 0, 0, 1, 1},
  {&__pyx_n_s__elements, __pyx_k__elements, sizeof(__pyx_k__elements), 0, 0, 1, 1},
  {&__pyx_n_s__end, __pyx_k__end, sizeof(__pyx_k__end), 0, 0, 1, 1},
  {&__pyx_n_s__exceptions, __pyx_k__exceptions, sizeof(__pyx_k__exceptions), 0, 0, 1, 1},
  {&__pyx_n_s__fileName, __pyx_k__fileName, sizeof(__pyx_k__fileName), 0, 0, 1, 1},
  {&__pyx_n_s__filename, __pyx_k__filename, sizeof(__pyx_k__filename), 0, 0, 1, 1},
  {&__pyx_n_s__filterVars, __pyx_k__filterVars, sizeof(__pyx_k__filterVars), 0, 0, 1, 1},
  {&__pyx_n_s__fixed, __pyx_k__fixed, sizeof(__pyx_k__fixed), 0, 0, 1, 1},
  {&__pyx_n_s__formatType, __pyx_k__formatType, sizeof(__pyx_k__formatType), 0, 0, 1, 1},
  {&__pyx_n_s__free, __pyx_k__free, sizeof(__pyx_k__free), 0, 0, 1, 1},
  {&__pyx_n_s__getACol, __pyx_k__getACol, sizeof(__pyx_k__getACol), 0, 0, 1, 1},
  {&__pyx_n_s__getModelExample, __pyx_k__getModelExample, sizeof(__pyx_k__getModelExample), 0, 0, 1, 1},
  {&__pyx_n_s__getMpsExample, __pyx_k__getMpsExample, sizeof(__pyx_k__getMpsExample), 0, 0, 1, 1},
  {&__pyx_n_s__getNumCols, __pyx_k__getNumCols, sizeof(__pyx_k__getNumCols), 0, 0, 1, 1},
  {&__pyx_n_s__getNumRows, __pyx_k__getNumRows, sizeof(__pyx_k__getNumRows), 0, 0, 1, 1},
  {&__pyx_n_s__getPivotVariable, __pyx_k__getPivotVariable, sizeof(__pyx_k__getPivotVariable), 0, 0, 1, 1},
  {&__pyx_n_s__getReducedCosts, __pyx_k__getReducedCosts, sizeof(__pyx_k__getReducedCosts), 0, 0, 1, 1},
  {&__pyx_n_s__getStatusArray, __pyx_k__getStatusArray, sizeof(__pyx_k__getStatusArray), 0, 0, 1, 1},
  {&__pyx_n_s__getStatusCode, __pyx_k__getStatusCode, sizeof(__pyx_k__getStatusCode), 0, 0, 1, 1},
  {&__pyx_n_s__getVarByName, __pyx_k__getVarByName, sizeof(__pyx_k__getVarByName), 0, 0, 1, 1},
  {&__pyx_n_s__getVarStatus, __pyx_k__getVarStatus, sizeof(__pyx_k__getVarStatus), 0, 0, 1, 1},
  {&__pyx_n_s__getVariableNames, __pyx_k__getVariableNames, sizeof(__pyx_k__getVariableNames), 0, 0, 1, 1},
  {&__pyx_n_s__getfile, __pyx_k__getfile, sizeof(__pyx_k__getfile), 0, 0, 1, 1},
  {&__pyx_n_s__hasVar, __pyx_k__hasVar, sizeof(__pyx_k__hasVar), 0, 0, 1, 1},
  {&__pyx_n_s__ifValuesPass, __pyx_k__ifValuesPass, sizeof(__pyx_k__ifValuesPass), 0, 0, 1, 1},
  {&__pyx_n_s__ignoreErrors, __pyx_k__ignoreErrors, sizeof(__pyx_k__ignoreErrors), 0, 0, 1, 1},
  {&__pyx_n_s__ind, __pyx_k__ind, sizeof(__pyx_k__ind), 0, 0, 1, 1},
  {&__pyx_n_s__indices, __pyx_k__indices, sizeof(__pyx_k__indices), 0, 0, 1, 1},
  {&__pyx_n_s__inds, __pyx_k__inds, sizeof(__pyx_k__inds), 0, 0, 1, 1},
  {&__pyx_n_s__inspect, __pyx_k__inspect, sizeof(__pyx_k__inspect), 0, 0, 1, 1},
  {&__pyx_n_s__int32, __pyx_k__int32, sizeof(__pyx_k__int32), 0, 0, 1, 1},
  {&__pyx_n_s__isInt, __pyx_k__isInt, sizeof(__pyx_k__isInt), 0, 0, 1, 1},
  {&__pyx_n_s__isPivotAcceptable, __pyx_k__isPivotAcceptable, sizeof(__pyx_k__isPivotAcceptable), 0, 0, 1, 1},
  {&__pyx_n_s__itertools, __pyx_k__itertools, sizeof(__pyx_k__itertools), 0, 0, 1, 1},
  {&__pyx_n_s__izip, __pyx_k__izip, sizeof(__pyx_k__izip), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__keepIntegers, __pyx_k__keepIntegers, sizeof(__pyx_k__keepIntegers), 0, 0, 1, 1},
  {&__pyx_n_s__keepNames, __pyx_k__keepNames, sizeof(__pyx_k__keepNames), 0, 0, 1, 1},
  {&__pyx_n_s__keys, __pyx_k__keys, sizeof(__pyx_k__keys), 0, 0, 1, 1},
  {&__pyx_n_s__lil_matrix, __pyx_k__lil_matrix, sizeof(__pyx_k__lil_matrix), 0, 0, 1, 1},
  {&__pyx_n_s__loadFromCyLPModel, __pyx_k__loadFromCyLPModel, sizeof(__pyx_k__loadFromCyLPModel), 0, 0, 1, 1},
  {&__pyx_n_s__majorDim, __pyx_k__majorDim, sizeof(__pyx_k__majorDim), 0, 0, 1, 1},
  {&__pyx_n_s__makeMatrices, __pyx_k__makeMatrices, sizeof(__pyx_k__makeMatrices), 0, 0, 1, 1},
  {&__pyx_n_s__matrix, __pyx_k__matrix, sizeof(__pyx_k__matrix), 0, 0, 1, 1},
  {&__pyx_n_s__minorDim, __pyx_k__minorDim, sizeof(__pyx_k__minorDim), 0, 0, 1, 1},
  {&__pyx_n_s__modelObject, __pyx_k__modelObject, sizeof(__pyx_k__modelObject), 0, 0, 1, 1},
  {&__pyx_n_s__mpsNames, __pyx_k__mpsNames, sizeof(__pyx_k__mpsNames), 0, 0, 1, 1},
  {&__pyx_n_s__nConstraints, __pyx_k__nConstraints, sizeof(__pyx_k__nConstraints), 0, 0, 1, 1},
  {&__pyx_n_s__nRows, __pyx_k__nRows, sizeof(__pyx_k__nRows), 0, 0, 1, 1},
  {&__pyx_n_s__nVariables, __pyx_k__nVariables, sizeof(__pyx_k__nVariables), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__ncol, __pyx_k__ncol, sizeof(__pyx_k__ncol), 0, 0, 1, 1},
  {&__pyx_n_s__newNumberColumns, __pyx_k__newNumberColumns, sizeof(__pyx_k__newNumberColumns), 0, 0, 1, 1},
  {&__pyx_n_s__newNumberRows, __pyx_k__newNumberRows, sizeof(__pyx_k__newNumberRows), 0, 0, 1, 1},
  {&__pyx_n_s__np, __pyx_k__np, sizeof(__pyx_k__np), 0, 0, 1, 1},
  {&__pyx_n_s__number, __pyx_k__number, sizeof(__pyx_k__number), 0, 0, 1, 1},
  {&__pyx_n_s__numberAcross, __pyx_k__numberAcross, sizeof(__pyx_k__numberAcross), 0, 0, 1, 1},
  {&__pyx_n_s__numberInColumn, __pyx_k__numberInColumn, sizeof(__pyx_k__numberInColumn), 0, 0, 1, 1},
  {&__pyx_n_s__numberInRow, __pyx_k__numberInRow, sizeof(__pyx_k__numberInRow), 0, 0, 1, 1},
  {&__pyx_n_s__numberPasses, __pyx_k__numberPasses, sizeof(__pyx_k__numberPasses), 0, 0, 1, 1},
  {&__pyx_n_s__numberWanted, __pyx_k__numberWanted, sizeof(__pyx_k__numberWanted), 0, 0, 1, 1},
  {&__pyx_n_s__numpy, __pyx_k__numpy, sizeof(__pyx_k__numpy), 0, 0, 1, 1},
  {&__pyx_n_s__obj, __pyx_k__obj, sizeof(__pyx_k__obj), 0, 0, 1, 1},
  {&__pyx_n_s__objSense, __pyx_k__objSense, sizeof(__pyx_k__objSense), 0, 0, 1, 1},
  {&__pyx_n_s__objective, __pyx_k__objective, sizeof(__pyx_k__objective), 0, 0, 1, 1},
  {&__pyx_n_s__open, __pyx_k__open, sizeof(__pyx_k__open), 0, 0, 1, 1},
  {&__pyx_n_s__optimal, __pyx_k__optimal, sizeof(__pyx_k__optimal), 0, 0, 1, 1},
  {&__pyx_n_s__os, __pyx_k__os, sizeof(__pyx_k__os), 0, 0, 1, 1},
  {&__pyx_n_s__parent, __pyx_k__parent, sizeof(__pyx_k__parent), 0, 0, 1, 1},
  {&__pyx_n_s__path, __pyx_k__path, sizeof(__pyx_k__path), 0, 0, 1, 1},
  {&__pyx_n_s__pi, __pyx_k__pi, sizeof(__pyx_k__pi), 0, 0, 1, 1},
  {&__pyx_n_s__problemStatus, __pyx_k__problemStatus, sizeof(__pyx_k__problemStatus), 0, 0, 1, 1},
  {&__pyx_n_s__product, __pyx_k__product, sizeof(__pyx_k__product), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__readMps, __pyx_k__readMps, sizeof(__pyx_k__readMps), 0, 0, 1, 1},
  {&__pyx_n_s__removeConstraint, __pyx_k__removeConstraint, sizeof(__pyx_k__removeConstraint), 0, 0, 1, 1},
  {&__pyx_n_s__removeVariable, __pyx_k__removeVariable, sizeof(__pyx_k__removeVariable), 0, 0, 1, 1},
  {&__pyx_n_s__replaceMatrix, __pyx_k__replaceMatrix, sizeof(__pyx_k__replaceMatrix), 0, 0, 1, 1},
  {&__pyx_n_s__resize, __pyx_k__resize, sizeof(__pyx_k__resize), 0, 0, 1, 1},
  {&__pyx_n_s__reverseVarSearch, __pyx_k__reverseVarSearch, sizeof(__pyx_k__reverseVarSearch), 0, 0, 1, 1},
  {&__pyx_n_s__row, __pyx_k__row, sizeof(__pyx_k__row), 0, 0, 1, 1},
  {&__pyx_n_s__rowLower, __pyx_k__rowLower, sizeof(__pyx_k__rowLower), 0, 0, 1, 1},
  {&__pyx_n_s__rowObjective, __pyx_k__rowObjective, sizeof(__pyx_k__rowObjective), 0, 0, 1, 1},
  {&__pyx_n_s__rowStarts, __pyx_k__rowStarts, sizeof(__pyx_k__rowStarts), 0, 0, 1, 1},
  {&__pyx_n_s__rowUpper, __pyx_k__rowUpper, sizeof(__pyx_k__rowUpper), 0, 0, 1, 1},
  {&__pyx_n_s__rowlb, __pyx_k__rowlb, sizeof(__pyx_k__rowlb), 0, 0, 1, 1},
  {&__pyx_n_s__rows, __pyx_k__rows, sizeof(__pyx_k__rows), 0, 0, 1, 1},
  {&__pyx_n_s__rowub, __pyx_k__rowub, sizeof(__pyx_k__rowub), 0, 0, 1, 1},
  {&__pyx_n_s__scipy, __pyx_k__scipy, sizeof(__pyx_k__scipy), 0, 0, 1, 1},
  {&__pyx_n_s__setColumnLower, __pyx_k__setColumnLower, sizeof(__pyx_k__setColumnLower), 0, 0, 1, 1},
  {&__pyx_n_s__setColumnUpper, __pyx_k__setColumnUpper, sizeof(__pyx_k__setColumnUpper), 0, 0, 1, 1},
  {&__pyx_n_s__setConstraintName, __pyx_k__setConstraintName, sizeof(__pyx_k__setConstraintName), 0, 0, 1, 1},
  {&__pyx_n_s__setInteger, __pyx_k__setInteger, sizeof(__pyx_k__setInteger), 0, 0, 1, 1},
  {&__pyx_n_s__setObjectiveArray, __pyx_k__setObjectiveArray, sizeof(__pyx_k__setObjectiveArray), 0, 0, 1, 1},
  {&__pyx_n_s__setRowLower, __pyx_k__setRowLower, sizeof(__pyx_k__setRowLower), 0, 0, 1, 1},
  {&__pyx_n_s__setRowUpper, __pyx_k__setRowUpper, sizeof(__pyx_k__setRowUpper), 0, 0, 1, 1},
  {&__pyx_n_s__setVariableName, __pyx_k__setVariableName, sizeof(__pyx_k__setVariableName), 0, 0, 1, 1},
  {&__pyx_n_s__shape, __pyx_k__shape, sizeof(__pyx_k__shape), 0, 0, 1, 1},
  {&__pyx_n_s__sparse, __pyx_k__sparse, sizeof(__pyx_k__sparse), 0, 0, 1, 1},
  {&__pyx_n_s__sparseConcat, __pyx_k__sparseConcat, sizeof(__pyx_k__sparseConcat), 0, 0, 1, 1},
  {&__pyx_n_s__start, __pyx_k__start, sizeof(__pyx_k__start), 0, 0, 1, 1},
  {&__pyx_n_s__startFinishOptions, __pyx_k__startFinishOptions, sizeof(__pyx_k__startFinishOptions), 0, 0, 1, 1},
  {&__pyx_n_s__status, __pyx_k__status, sizeof(__pyx_k__status), 0, 0, 1, 1},
  {&__pyx_n_s__status_, __pyx_k__status_, sizeof(__pyx_k__status_), 0, 0, 1, 1},
  {&__pyx_n_s__sum, __pyx_k__sum, sizeof(__pyx_k__sum), 0, 0, 1, 1},
  {&__pyx_n_s__superBasic, __pyx_k__superBasic, sizeof(__pyx_k__superBasic), 0, 0, 1, 1},
  {&__pyx_n_s__tocoo, __pyx_k__tocoo, sizeof(__pyx_k__tocoo), 0, 0, 1, 1},
  {&__pyx_n_s__tryPlusMinusOne, __pyx_k__tryPlusMinusOne, sizeof(__pyx_k__tryPlusMinusOne), 0, 0, 1, 1},
  {&__pyx_n_s__v1, __pyx_k__v1, sizeof(__pyx_k__v1), 0, 0, 1, 1},
  {&__pyx_n_s__v2, __pyx_k__v2, sizeof(__pyx_k__v2), 0, 0, 1, 1},
  {&__pyx_n_s__val, __pyx_k__val, sizeof(__pyx_k__val), 0, 0, 1, 1},
  {&__pyx_n_s__var1, __pyx_k__var1, sizeof(__pyx_k__var1), 0, 0, 1, 1},
  {&__pyx_n_s__var2, __pyx_k__var2, sizeof(__pyx_k__var2), 0, 0, 1, 1},
  {&__pyx_n_s__varInd, __pyx_k__varInd, sizeof(__pyx_k__varInd), 0, 0, 1, 1},
  {&__pyx_n_s__varIndex, __pyx_k__varIndex, sizeof(__pyx_k__varIndex), 0, 0, 1, 1},
  {&__pyx_n_s__variableNames, __pyx_k__variableNames, sizeof(__pyx_k__variableNames), 0, 0, 1, 1},
  {&__pyx_n_s__variables, __pyx_k__variables, sizeof(__pyx_k__variables), 0, 0, 1, 1},
  {&__pyx_n_s__variablesLower, __pyx_k__variablesLower, sizeof(__pyx_k__variablesLower), 0, 0, 1, 1},
  {&__pyx_n_s__variablesUpper, __pyx_k__variablesUpper, sizeof(__pyx_k__variablesUpper), 0, 0, 1, 1},
  {&__pyx_n_s__varname, __pyx_k__varname, sizeof(__pyx_k__varname), 0, 0, 1, 1},
  {&__pyx_n_s__vectorStarts, __pyx_k__vectorStarts, sizeof(__pyx_k__vectorStarts), 0, 0, 1, 1},
  {&__pyx_n_s__vectorTimesB_1, __pyx_k__vectorTimesB_1, sizeof(__pyx_k__vectorTimesB_1), 0, 0, 1, 1},
  {&__pyx_n_s__w, __pyx_k__w, sizeof(__pyx_k__w), 0, 0, 1, 1},
  {&__pyx_n_s__w_ind, __pyx_k__w_ind, sizeof(__pyx_k__w_ind), 0, 0, 1, 1},
  {&__pyx_n_s__where, __pyx_k__where, sizeof(__pyx_k__where), 0, 0, 1, 1},
  {&__pyx_n_s__which, __pyx_k__which, sizeof(__pyx_k__which), 0, 0, 1, 1},
  {&__pyx_n_s__x, __pyx_k__x, sizeof(__pyx_k__x), 0, 0, 1, 1},
  {&__pyx_n_s__xrange, __pyx_k__xrange, sizeof(__pyx_k__xrange), 0, 0, 1, 1},
  {&__pyx_n_s__y, __pyx_k__y, sizeof(__pyx_k__y), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetName(__pyx_b, __pyx_n_s__xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_n_s__Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_open = __Pyx_GetName(__pyx_b, __pyx_n_s__open); if (!__pyx_builtin_open) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetName(__pyx_b, __pyx_n_s__RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "CyLP/cy/CyClpSimplex.pyx":105
 *                 #       self.cyLPModel.objective.astype(np.double))
 *             else:
 *                 raise Exception('To set the objective function of ' \             # <<<<<<<<<<<<<<
 *                                 'CyClpSimplex set CyLPSimplex.cyLPModel ' \
 *                                 'first.')
 */
  __pyx_k_tuple_4 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_4));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
  PyTuple_SET_ITEM(__pyx_k_tuple_4, 0, ((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_4));

  /* "CyLP/cy/CyClpSimplex.pyx":162
 *         def __get__(self):
 *             if not self.cyLPModel:
 *                 raise Exception('No CyClpSimplex cyLPModel.')             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.cyLPModel.constraints
 */
  __pyx_k_tuple_6 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_6));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_5));
  PyTuple_SET_ITEM(__pyx_k_tuple_6, 0, ((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));

  /* "CyLP/cy/CyClpSimplex.pyx":179
 *         def __get__(self):
 *             if not self.cyLPModel:
 *                 raise Exception('No CyClpSimplex cyLPModel.')             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.cyLPModel.variables
 */
  __pyx_k_tuple_7 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_7));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_5));
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 0, ((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_7));

  /* "CyLP/cy/CyClpSimplex.pyx":480
 *                 m = mat.tocoo()
 *             except:
 *                 raise Exception('Hessian can be set to a matrix that ' \             # <<<<<<<<<<<<<<
 *                                             'implements *tocoo* method')
 *             if m:
 */
  __pyx_k_tuple_9 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_9));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_8));
  PyTuple_SET_ITEM(__pyx_k_tuple_9, 0, ((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_8));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_9));

  /* "CyLP/cy/CyClpSimplex.pyx":822
 *             self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 *             raise Exception('To add a constraint you must set ' \             # <<<<<<<<<<<<<<
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 */
  __pyx_k_tuple_13 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_13));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_12));
  PyTuple_SET_ITEM(__pyx_k_tuple_13, 0, ((PyObject *)__pyx_kp_s_12));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_12));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_13));

  /* "CyLP/cy/CyClpSimplex.pyx":833
 *             self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 *             raise Exception('To remove a constraint you must set ' \             # <<<<<<<<<<<<<<
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 */
  __pyx_k_tuple_15 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_15));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_14));
  PyTuple_SET_ITEM(__pyx_k_tuple_15, 0, ((PyObject *)__pyx_kp_s_14));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_14));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_15));

  /* "CyLP/cy/CyClpSimplex.pyx":857
 *             self.loadFromCyLPModel(self.cyLPModel)
 *         else:
 *             raise Exception('To remove a variable you must set ' \             # <<<<<<<<<<<<<<
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 */
  __pyx_k_tuple_18 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_18));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_17));
  PyTuple_SET_ITEM(__pyx_k_tuple_18, 0, ((PyObject *)__pyx_kp_s_17));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_17));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_18));

  /* "CyLP/cy/CyClpSimplex.pyx":862
 *     def getVarByName(self, name):
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')             # <<<<<<<<<<<<<<
 *         return self.cyLPModel.getVarByName(name)
 * 
 */
  __pyx_k_tuple_20 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_20));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_19));
  PyTuple_SET_ITEM(__pyx_k_tuple_20, 0, ((PyObject *)__pyx_kp_s_19));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_19));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_20));

  /* "CyLP/cy/CyClpSimplex.pyx":867
 *     def getVarNameByIndex(self, ind):
 *         if not self.cyLPModel:
 *             raise Exception('No CyLPSimplex.cyLPModel is set.')             # <<<<<<<<<<<<<<
 *         return self.cyLPModel.inds.reverseVarSearch(ind)
 * 
 */
  __pyx_k_tuple_21 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_21));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_19));
  PyTuple_SET_ITEM(__pyx_k_tuple_21, 0, ((PyObject *)__pyx_kp_s_19));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_19));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_21));

  /* "CyLP/cy/CyClpSimplex.pyx":1125
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setInteger can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
  __pyx_k_tuple_27 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_27));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_26));
  PyTuple_SET_ITEM(__pyx_k_tuple_27, 0, ((PyObject *)__pyx_kp_s_26));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_26));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_27));

  /* "CyLP/cy/CyClpSimplex.pyx":1365
 *         '''
 *         if not issubclass(pivotMethodObject.__class__, PivotPythonBase):
 *             raise TypeError('pivotMethodObject should be of a \             # <<<<<<<<<<<<<<
 *                             class derived from PivotPythonBase')
 * 
 */
  __pyx_k_tuple_35 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_35));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_34));
  PyTuple_SET_ITEM(__pyx_k_tuple_35, 0, ((PyObject *)__pyx_kp_s_34));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_34));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_35));

  /* "CyLP/cy/CyClpSimplex.pyx":1411
 *                                        CppCoinIndexedVector * spareArray2,
 *                                        int valuesPass):
 *         raise Exception('CyClpPrimalColumnPivotBase.pyx: pivot column ' \             # <<<<<<<<<<<<<<
 *                         'should be implemented.')
 * 
 */
  __pyx_k_tuple_37 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_37));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_36));
  PyTuple_SET_ITEM(__pyx_k_tuple_37, 0, ((PyObject *)__pyx_kp_s_36));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_36));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_37));

  /* "CyLP/cy/CyClpSimplex.pyx":1444
 *         elif True:  # isinstance(arg, CyLPVar):
 *             if self.cyLPModel == None:
 *                 raise Exception('The argument of setInteger can be ' \             # <<<<<<<<<<<<<<
 *                                 'a CyLPVar only if the object is built ' \
 *                                 'using a CyLPModel.')
 */
  __pyx_k_tuple_39 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_39));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_26));
  PyTuple_SET_ITEM(__pyx_k_tuple_39, 0, ((PyObject *)__pyx_kp_s_26));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_26));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_39));

  /* "CyLP/cy/CyClpSimplex.pyx":1563
 * 
 *     model = CyLPModel()
 *     x = model.addVariable('x', 3)             # <<<<<<<<<<<<<<
 *     y = model.addVariable('y', 2)
 * 
 */
  __pyx_k_tuple_44 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_44));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__x));
  PyTuple_SET_ITEM(__pyx_k_tuple_44, 0, ((PyObject *)__pyx_n_s__x));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__x));
  __Pyx_INCREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_k_tuple_44, 1, __pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_44));

  /* "CyLP/cy/CyClpSimplex.pyx":1564
 *     model = CyLPModel()
 *     x = model.addVariable('x', 3)
 *     y = model.addVariable('y', 2)             # <<<<<<<<<<<<<<
 * 
 *     A = np.matrix([[1., 2., 0], [1., 0, 1.]])
 */
  __pyx_k_tuple_45 = PyTuple_New(2); if (unlikely(!__pyx_k_tuple_45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_45));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__y));
  PyTuple_SET_ITEM(__pyx_k_tuple_45, 0, ((PyObject *)__pyx_n_s__y));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__y));
  __Pyx_INCREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_k_tuple_45, 1, __pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_45));

  /* "numpy.pxd":211
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_k_tuple_48 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_48)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_48));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_47));
  PyTuple_SET_ITEM(__pyx_k_tuple_48, 0, ((PyObject *)__pyx_kp_u_47));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_47));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_48));

  /* "numpy.pxd":215
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_k_tuple_50 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_50)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_50));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_49));
  PyTuple_SET_ITEM(__pyx_k_tuple_50, 0, ((PyObject *)__pyx_kp_u_49));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_49));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_50));

  /* "numpy.pxd":253
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_k_tuple_52 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_52)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_52));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_51));
  PyTuple_SET_ITEM(__pyx_k_tuple_52, 0, ((PyObject *)__pyx_kp_u_51));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_51));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_52));

  /* "numpy.pxd":795
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == '>' and little_endian) or
 */
  __pyx_k_tuple_55 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_55)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_55));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_54));
  PyTuple_SET_ITEM(__pyx_k_tuple_55, 0, ((PyObject *)__pyx_kp_u_54));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_54));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_55));

  /* "numpy.pxd":799
 *         if ((child.byteorder == '>' and little_endian) or
 *             (child.byteorder == '<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_k_tuple_56 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_56)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_56));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_51));
  PyTuple_SET_ITEM(__pyx_k_tuple_56, 0, ((PyObject *)__pyx_kp_u_51));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_51));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_56));

  /* "numpy.pxd":819
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_k_tuple_58 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_58)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_58));
  __Pyx_INCREF(((PyObject *)__pyx_kp_u_57));
  PyTuple_SET_ITEM(__pyx_k_tuple_58, 0, ((PyObject *)__pyx_kp_u_57));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_u_57));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_58));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_64 = PyInt_FromLong(64); if (unlikely(!__pyx_int_64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initCyClpSimplex(void); /*proto*/
PyMODINIT_FUNC initCyClpSimplex(void)
#else
PyMODINIT_FUNC PyInit_CyClpSimplex(void); /*proto*/
PyMODINIT_FUNC PyInit_CyClpSimplex(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_CyClpSimplex(void)");
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("CyClpSimplex"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_CyLP__cy__CyClpSimplex) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("cydot", (void (*)(void))__pyx_f_4CyLP_2cy_12CyClpSimplex_cydot, "PyObject *(struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, int __pyx_skip_dispatch)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  __pyx_vtabptr_4CyLP_2cy_12CyClpSimplex_CyClpSimplex = &__pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.setCppSelf = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, IClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setCppSelf;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.readMps = (int (*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, char *, int __pyx_skip_dispatch, struct __pyx_opt_args_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps *__pyx_optional_args))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_readMps;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.setPrimalColumnPivotAlgorithm = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, void *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setPrimalColumnPivotAlgorithm;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.primalColumnSolution = (double *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalColumnSolution;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.dualColumnSolution = (double *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualColumnSolution;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.primalRowSolution = (double *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalRowSolution;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.dualRowSolution = (double *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_dualRowSolution;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.rowLower = (double *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_rowLower;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.rowUpper = (double *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_rowUpper;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.getReducedCosts = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getReducedCosts;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.getStatusArray = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getStatusArray;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.getComplementarityList = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getComplementarityList;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.getPivotVariable = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getPivotVariable;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.filterVars = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_filterVars;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.getVarStatus = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getVarStatus;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.primalRow = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, int))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_primalRow;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.getACol = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, int, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_getACol;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.ComplementarityList = (int *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_ComplementarityList;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.pivotVariable = (int *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_pivotVariable;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.vectorTimesB_1 = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_vectorTimesB_1;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.setVariableName = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setVariableName;
  __pyx_vtable_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.setConstraintName = (PyObject *(*)(struct __pyx_obj_4CyLP_2cy_12CyClpSimplex_CyClpSimplex *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4CyLP_2cy_12CyClpSimplex_12CyClpSimplex_setConstraintName;
  if (PyType_Ready(&__pyx_type_4CyLP_2cy_12CyClpSimplex_CyClpSimplex) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_4CyLP_2cy_12CyClpSimplex_CyClpSimplex.tp_dict, __pyx_vtabptr_4CyLP_2cy_12CyClpSimplex_CyClpSimplex) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "CyClpSimplex", (PyObject *)&__pyx_type_4CyLP_2cy_12CyClpSimplex_CyClpSimplex) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_12CyClpSimplex_CyClpSimplex = &__pyx_type_4CyLP_2cy_12CyClpSimplex_CyClpSimplex;
  if (PyType_Ready(&__pyx_type_4CyLP_2cy_12CyClpSimplex_VarStatus) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "VarStatus", (PyObject *)&__pyx_type_4CyLP_2cy_12CyClpSimplex_VarStatus) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus = &__pyx_type_4CyLP_2cy_12CyClpSimplex_VarStatus;
  /*--- Type import code ---*/
  __pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector = __Pyx_ImportType("CyLP.cy.CyCoinIndexedVector", "CyCoinIndexedVector", sizeof(struct __pyx_obj_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector = (struct __pyx_vtabstruct_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_19CyCoinIndexedVector_CyCoinIndexedVector)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase = __Pyx_ImportType("CyLP.cy.CyClpPrimalColumnPivotBase", "CyClpPrimalColumnPivotBase", sizeof(struct __pyx_obj_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase = (struct __pyx_vtabstruct_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_26CyClpPrimalColumnPivotBase_CyClpPrimalColumnPivotBase)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_11CyCoinModel_CyCoinModel = __Pyx_ImportType("CyLP.cy.CyCoinModel", "CyCoinModel", sizeof(struct __pyx_obj_4CyLP_2cy_11CyCoinModel_CyCoinModel), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_11CyCoinModel_CyCoinModel)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_11CyCoinModel_CyCoinModel = (struct __pyx_vtabstruct_4CyLP_2cy_11CyCoinModel_CyCoinModel*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_11CyCoinModel_CyCoinModel->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_11CyCoinModel_CyCoinModel)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix = __Pyx_ImportType("CyLP.cy.CyCoinPackedMatrix", "CyCoinPackedMatrix", sizeof(struct __pyx_obj_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_18CyCoinPackedMatrix_CyCoinPackedMatrix)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglCutGenerator = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglCutGenerator", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglCutGenerator), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglCutGenerator)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglAllDifferent = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglAllDifferent", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglAllDifferent), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglAllDifferent)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglClique = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglClique", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglClique), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglClique)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglKnapsackCover = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglKnapsackCover", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglKnapsackCover), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglKnapsackCover)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_5CyCgl_CyCglKnapsackCover = (struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglKnapsackCover*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglKnapsackCover->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_5CyCgl_CyCglKnapsackCover)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglOddHole = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglOddHole", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglOddHole), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglOddHole)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglFlowCover = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglFlowCover", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglFlowCover), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglFlowCover)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglGomory = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglGomory", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglGomory), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglGomory)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_5CyCgl_CyCglGomory = (struct __pyx_vtabstruct_4CyLP_2cy_5CyCgl_CyCglGomory*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglGomory->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_5CyCgl_CyCglGomory)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglRedSplit = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglRedSplit", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglRedSplit), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglRedSplit)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglLiftAndProject = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglLiftAndProject", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglLiftAndProject), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglLiftAndProject)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglLandP = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglLandP", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglLandP), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglLandP)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglMixedIntegerRounding", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding2 = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglMixedIntegerRounding2", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding2), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglMixedIntegerRounding2)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglTwomir = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglTwomir", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglTwomir), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglTwomir)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglResidualCapacity = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglResidualCapacity", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglResidualCapacity), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglResidualCapacity)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglPreProcess = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglPreProcess", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglPreProcess), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglPreProcess)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglProbing = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglProbing", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglProbing), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglProbing)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_5CyCgl_CyCglSimpleRounding = __Pyx_ImportType("CyLP.cy.CyCgl", "CyCglSimpleRounding", sizeof(struct __pyx_obj_4CyLP_2cy_5CyCgl_CyCglSimpleRounding), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_5CyCgl_CyCglSimpleRounding)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_9CyCbcNode_CyCbcNode = __Pyx_ImportType("CyLP.cy.CyCbcNode", "CyCbcNode", sizeof(struct __pyx_obj_4CyLP_2cy_9CyCbcNode_CyCbcNode), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_9CyCbcNode_CyCbcNode)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_9CyCbcNode_CyCbcNode = (struct __pyx_vtabstruct_4CyLP_2cy_9CyCbcNode_CyCbcNode*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_9CyCbcNode_CyCbcNode->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_9CyCbcNode_CyCbcNode)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_10CyCbcModel_CyCbcModel = __Pyx_ImportType("CyLP.cy.CyCbcModel", "CyCbcModel", sizeof(struct __pyx_obj_4CyLP_2cy_10CyCbcModel_CyCbcModel), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_10CyCbcModel_CyCbcModel)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_10CyCbcModel_CyCbcModel = (struct __pyx_vtabstruct_4CyLP_2cy_10CyCbcModel_CyCbcModel*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_10CyCbcModel_CyCbcModel->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_10CyCbcModel_CyCbcModel)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_12CyWolfePivot_CyWolfePivot = __Pyx_ImportType("CyLP.cy.CyWolfePivot", "CyWolfePivot", sizeof(struct __pyx_obj_4CyLP_2cy_12CyWolfePivot_CyWolfePivot), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_12CyWolfePivot_CyWolfePivot)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_12CyWolfePivot_CyWolfePivot = (struct __pyx_vtabstruct_4CyLP_2cy_12CyWolfePivot_CyWolfePivot*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_12CyWolfePivot_CyWolfePivot->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_12CyWolfePivot_CyWolfePivot)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_9CyPEPivot_CyPEPivot = __Pyx_ImportType("CyLP.cy.CyPEPivot", "CyPEPivot", sizeof(struct __pyx_obj_4CyLP_2cy_9CyPEPivot_CyPEPivot), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_9CyPEPivot_CyPEPivot)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_9CyPEPivot_CyPEPivot = (struct __pyx_vtabstruct_4CyLP_2cy_9CyPEPivot_CyPEPivot*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_9CyPEPivot_CyPEPivot->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_9CyPEPivot_CyPEPivot)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase = __Pyx_ImportType("CyLP.cy.CyPivotPythonBase", "CyPivotPythonBase", sizeof(struct __pyx_obj_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase = (struct __pyx_vtabstruct_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase*)__Pyx_GetVtable(__pyx_ptype_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase->tp_dict); if (unlikely(!__pyx_vtabptr_4CyLP_2cy_17CyPivotPythonBase_CyPivotPythonBase)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4CyLP_2cy_11CyCoinMpsIO_CyCoinMpsIO = __Pyx_ImportType("CyLP.cy.CyCoinMpsIO", "CyCoinMpsIO", sizeof(struct __pyx_obj_4CyLP_2cy_11CyCoinMpsIO_CyCoinMpsIO), 1); if (unlikely(!__pyx_ptype_4CyLP_2cy_11CyCoinMpsIO_CyCoinMpsIO)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("CyLP.cy.CyClpPrimalColumnPivotBase"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "RunPivotColumn", (void (**)(void))&__pyx_f_4CyLP_2cy_26CyClpPrimalColumnPivotBase_RunPivotColumn, "int (void *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *, ICoinIndexedVector *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "RunClone", (void (**)(void))&__pyx_f_4CyLP_2cy_26CyClpPrimalColumnPivotBase_RunClone, "ClpPrimalColumnPivot *(void *, int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "RunSaveWeights", (void (**)(void))&__pyx_f_4CyLP_2cy_26CyClpPrimalColumnPivotBase_RunSaveWeights, "void (void *, IClpSimplex *, int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Execution code ---*/

  /* "CyLP/cy/CyClpSimplex.pyx":5
 * 
 * 
 * from exceptions import TypeError             # <<<<<<<<<<<<<<
 * import inspect
 * import os.path
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__TypeError));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__TypeError));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__TypeError));
  __pyx_t_3 = __Pyx_Import(((PyObject *)__pyx_n_s__exceptions), ((PyObject *)__pyx_t_2), -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__TypeError); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__TypeError, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":6
 * 
 * from exceptions import TypeError
 * import inspect             # <<<<<<<<<<<<<<
 * import os.path
 * from itertools import izip, product
 */
  __pyx_t_3 = __Pyx_Import(((PyObject *)__pyx_n_s__inspect), 0, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__inspect, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":7
 * from exceptions import TypeError
 * import inspect
 * import os.path             # <<<<<<<<<<<<<<
 * from itertools import izip, product
 * import numpy as np
 */
  __pyx_t_3 = __Pyx_Import(((PyObject *)__pyx_n_s_98), 0, -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__os, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":8
 * import inspect
 * import os.path
 * from itertools import izip, product             # <<<<<<<<<<<<<<
 * import numpy as np
 * cimport numpy as np
 */
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__izip));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_n_s__izip));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__izip));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__product));
  PyList_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_n_s__product));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__product));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__itertools), ((PyObject *)__pyx_t_3), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__izip); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__izip, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__product); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__product, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":9
 * import os.path
 * from itertools import izip, product
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * from scipy import sparse
 */
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__np, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":11
 * import numpy as np
 * cimport numpy as np
 * from scipy import sparse             # <<<<<<<<<<<<<<
 * cimport cpython.ref as cpy_ref
 * from CyWolfePivot cimport CyWolfePivot
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__sparse));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__sparse));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__sparse));
  __pyx_t_3 = __Pyx_Import(((PyObject *)__pyx_n_s__scipy), ((PyObject *)__pyx_t_2), -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__sparse); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sparse, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":18
 * from CyLP.cy cimport CyClpSimplex
 * from CyLP.cy cimport CyCoinModel
 * from CyLP.py.utils.sparseUtil import sparseConcat, csc_matrixPlus             # <<<<<<<<<<<<<<
 * from CyLP.py.modeling.CyLPModel import CyLPVar, CyLPArray, CyLPSolution
 * from CyLP.py.pivots.PivotPythonBase import PivotPythonBase
 */
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__sparseConcat));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_n_s__sparseConcat));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__sparseConcat));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__csc_matrixPlus));
  PyList_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_n_s__csc_matrixPlus));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__csc_matrixPlus));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_99), ((PyObject *)__pyx_t_3), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__sparseConcat); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sparseConcat, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__csc_matrixPlus); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__csc_matrixPlus, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":19
 * from CyLP.cy cimport CyCoinModel
 * from CyLP.py.utils.sparseUtil import sparseConcat, csc_matrixPlus
 * from CyLP.py.modeling.CyLPModel import CyLPVar, CyLPArray, CyLPSolution             # <<<<<<<<<<<<<<
 * from CyLP.py.pivots.PivotPythonBase import PivotPythonBase
 * from CyLP.py.modeling.CyLPModel import CyLPModel
 */
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPVar));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__CyLPVar));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPVar));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPArray));
  PyList_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_n_s__CyLPArray));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPArray));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPSolution));
  PyList_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_n_s__CyLPSolution));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPSolution));
  __pyx_t_3 = __Pyx_Import(((PyObject *)__pyx_n_s_42), ((PyObject *)__pyx_t_2), -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__CyLPVar); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CyLPVar, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__CyLPArray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CyLPArray, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__CyLPSolution); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CyLPSolution, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":20
 * from CyLP.py.utils.sparseUtil import sparseConcat, csc_matrixPlus
 * from CyLP.py.modeling.CyLPModel import CyLPVar, CyLPArray, CyLPSolution
 * from CyLP.py.pivots.PivotPythonBase import PivotPythonBase             # <<<<<<<<<<<<<<
 * from CyLP.py.modeling.CyLPModel import CyLPModel
 * from CyLP.cy cimport CyCoinMpsIO
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__PivotPythonBase));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_n_s__PivotPythonBase));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__PivotPythonBase));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_100), ((PyObject *)__pyx_t_3), -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__PivotPythonBase); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PivotPythonBase, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":21
 * from CyLP.py.modeling.CyLPModel import CyLPVar, CyLPArray, CyLPSolution
 * from CyLP.py.pivots.PivotPythonBase import PivotPythonBase
 * from CyLP.py.modeling.CyLPModel import CyLPModel             # <<<<<<<<<<<<<<
 * from CyLP.cy cimport CyCoinMpsIO
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CyLPModel));
  PyList_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__CyLPModel));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CyLPModel));
  __pyx_t_3 = __Pyx_Import(((PyObject *)__pyx_n_s_42), ((PyObject *)__pyx_t_2), -1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__CyLPModel); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__CyLPModel, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":24
 * from CyLP.cy cimport CyCoinMpsIO
 * 
 * problemStatus = ['optimal', 'primal infeasible', 'dual infeasible',             # <<<<<<<<<<<<<<
 *                 'stopped on iterations or time',
 *                 'stopped due to errors',
 */
  __pyx_t_3 = PyList_New(6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__optimal));
  PyList_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_n_s__optimal));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__optimal));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_101));
  PyList_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_kp_s_101));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_101));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_102));
  PyList_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_kp_s_102));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_102));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_103));
  PyList_SET_ITEM(__pyx_t_3, 3, ((PyObject *)__pyx_kp_s_103));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_103));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_104));
  PyList_SET_ITEM(__pyx_t_3, 4, ((PyObject *)__pyx_kp_s_104));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_104));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_105));
  PyList_SET_ITEM(__pyx_t_3, 5, ((PyObject *)__pyx_kp_s_105));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_105));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__problemStatus, ((PyObject *)__pyx_t_3)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":836
 *                             'CyLPSimplex.cyLPModel first.')
 * 
 *     def addVariable(self, varname, dim, isInt=False):             # <<<<<<<<<<<<<<
 *         '''
 *         Add variable ``var`` to the problem.
 */
  __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_k_16 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":967
 *             #return ret
 * 
 *     def extractCyLPModel(self, fileName, keepNames=False, ignoreErrors=False):             # <<<<<<<<<<<<<<
 *         if self.readMps(fileName, keepNames, ignoreErrors) != 0:
 *             return None
 */
  __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_k_24 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_k_25 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1150
 *         self.CppSelf.copyInIntegerInformation(<char*>colType.data)
 * 
 *     def replaceMatrix(self, CyCoinPackedMatrix matrix, deleteCurrent=False):             # <<<<<<<<<<<<<<
 *         self.CppSelf.replaceMatrix(matrix.CppSelf, deleteCurrent)
 * 
 */
  __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_k_29 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1156
 *         self.CppSelf.loadQuadraticObjective(matrix.CppSelf)
 * 
 *     def preSolve(self, feasibilityTolerance=0.0,             # <<<<<<<<<<<<<<
 *                  keepIntegers=0, numberPasses=5,
 *                  dropNames=0, doRowObjective=0):
 */
  __pyx_t_3 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_k_31 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1487
 *                  np.ndarray[np.double_t, ndim=1] rowlb,
 *                  np.ndarray[np.double_t, ndim=1] rowub,
 *                  np.ndarray[np.double_t, ndim=1] rowObjective=np.array([])):             # <<<<<<<<<<<<<<
 *         cdef double* rd
 *         if len(rowObjective) == 0:
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_k_41 = ((PyArrayObject *)__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1554
 * 
 * 
 * def getModelExample():             # <<<<<<<<<<<<<<
 *     '''
 *     Return a model example to be used in doctests.
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4CyLP_2cy_12CyClpSimplex_getModelExample, NULL, __pyx_n_s_106); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__getModelExample, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1588
 * 
 * 
 * def getMpsExample():             # <<<<<<<<<<<<<<
 *     '''
 *     Return full path to an MPS example file for doctests
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4CyLP_2cy_12CyClpSimplex_2getMpsExample, NULL, __pyx_n_s_106); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__getMpsExample, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "CyLP/cy/CyClpSimplex.pyx":1609
 * 
 * cdef class VarStatus:
 *     free = 0             # <<<<<<<<<<<<<<
 *     basic = 1
 *     atUpperBound = 2
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__free, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1610
 * cdef class VarStatus:
 *     free = 0
 *     basic = 1             # <<<<<<<<<<<<<<
 *     atUpperBound = 2
 *     atLowerBound = 3
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__basic, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1611
 *     free = 0
 *     basic = 1
 *     atUpperBound = 2             # <<<<<<<<<<<<<<
 *     atLowerBound = 3
 *     superBasic = 4
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__atUpperBound, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1612
 *     basic = 1
 *     atUpperBound = 2
 *     atLowerBound = 3             # <<<<<<<<<<<<<<
 *     superBasic = 4
 *     fixed = 5
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__atLowerBound, __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1613
 *     atUpperBound = 2
 *     atLowerBound = 3
 *     superBasic = 4             # <<<<<<<<<<<<<<
 *     fixed = 5
 *     status_ = np.array([free,
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__superBasic, __pyx_int_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1614
 *     atLowerBound = 3
 *     superBasic = 4
 *     fixed = 5             # <<<<<<<<<<<<<<
 *     status_ = np.array([free,
 *                         basic,
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__fixed, __pyx_int_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1615
 *     superBasic = 4
 *     fixed = 5
 *     status_ = np.array([free,             # <<<<<<<<<<<<<<
 *                         basic,
 *                         atUpperBound,
 */
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__array); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetName((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus, __pyx_n_s__free); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "CyLP/cy/CyClpSimplex.pyx":1616
 *     fixed = 5
 *     status_ = np.array([free,
 *                         basic,             # <<<<<<<<<<<<<<
 *                         atUpperBound,
 *                         atLowerBound,
 */
  __pyx_t_2 = __Pyx_GetName((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus, __pyx_n_s__basic); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "CyLP/cy/CyClpSimplex.pyx":1617
 *     status_ = np.array([free,
 *                         basic,
 *                         atUpperBound,             # <<<<<<<<<<<<<<
 *                         atLowerBound,
 *                         superBasic,
 */
  __pyx_t_5 = __Pyx_GetName((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus, __pyx_n_s__atUpperBound); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "CyLP/cy/CyClpSimplex.pyx":1618
 *                         basic,
 *                         atUpperBound,
 *                         atLowerBound,             # <<<<<<<<<<<<<<
 *                         superBasic,
 *                         fixed])
 */
  __pyx_t_6 = __Pyx_GetName((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus, __pyx_n_s__atLowerBound); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);

  /* "CyLP/cy/CyClpSimplex.pyx":1619
 *                         atUpperBound,
 *                         atLowerBound,
 *                         superBasic,             # <<<<<<<<<<<<<<
 *                         fixed])
 */
  __pyx_t_7 = __Pyx_GetName((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus, __pyx_n_s__superBasic); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "CyLP/cy/CyClpSimplex.pyx":1620
 *                         atLowerBound,
 *                         superBasic,
 *                         fixed])             # <<<<<<<<<<<<<<
 */
  __pyx_t_8 = __Pyx_GetName((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus, __pyx_n_s__fixed); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyList_New(6); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_9));
  PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_9, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_9, 3, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_9, 4, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_9, 5, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_8));
  PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_t_9));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_9));
  __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus->tp_dict, __pyx_n_s__status_, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  PyType_Modified(__pyx_ptype_4CyLP_2cy_12CyClpSimplex_VarStatus);

  /* "CyLP/cy/CyClpSimplex.pyx":1
 * # cython: profile=True             # <<<<<<<<<<<<<<
 * # cython: embedsignature=True
 * 
 */
  __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_9));
  if (PyDict_SetItem(__pyx_t_9, ((PyObject *)__pyx_kp_u_107), ((PyObject *)__pyx_kp_u_108)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_9, ((PyObject *)__pyx_kp_u_109), ((PyObject *)__pyx_kp_u_110)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_9, ((PyObject *)__pyx_kp_u_111), ((PyObject *)__pyx_kp_u_112)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_9, ((PyObject *)__pyx_kp_u_113), ((PyObject *)__pyx_kp_u_114)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_9, ((PyObject *)__pyx_kp_u_115), ((PyObject *)__pyx_kp_u_116)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_9, ((PyObject *)__pyx_kp_u_117), ((PyObject *)__pyx_kp_u_118)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_9)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;

  /* "numpy.pxd":971
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  if (__pyx_m) {
    __Pyx_AddTraceback("init CyLP.cy.CyClpSimplex", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init CyLP.cy.CyClpSimplex");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}


#if CYTHON_PROFILE

static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            PyThreadState_GET(),            /*PyThreadState *tstate*/
            *code,                          /*PyCodeObject *code*/
            PyModule_GetDict(__pyx_m),      /*PyObject *globals*/
            0                               /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
    }
    else {
        (*frame)->f_tstate = PyThreadState_GET();
    }
    return PyThreadState_GET()->c_profilefunc(PyThreadState_GET()->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
}

static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyCodeObject *py_code = 0;

    #if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromString(funcname);
    py_srcfile = PyString_FromString(srcfile);
    #else
    py_funcname = PyUnicode_FromString(funcname);
    py_srcfile = PyUnicode_FromString(srcfile);
    #endif
    if (!py_funcname | !py_srcfile) goto bad;

    py_code = PyCode_New(
        0,                /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,                /*int kwonlyargcount,*/
        #endif
        0,                /*int nlocals,*/
        0,                /*int stacksize,*/
        0,                /*int flags,*/
        __pyx_empty_bytes,  /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,      /*int firstlineno,*/
        __pyx_empty_bytes   /*PyObject *lnotab*/
    );

bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);

    return py_code;
}

#endif /* CYTHON_PROFILE */

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    /* cause is unused */
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    if (cause) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        if (!value) {
            value = PyObject_CallObject(type, NULL);
        }
        PyException_SetCause(value, fixed_cause);
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif


static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}

typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
} __Pyx_BufFmt_Context;

static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}

static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}

static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}

static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'b': return "'char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 0: return "end";
    default: return "unparseable format string";
  }
}

static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}

static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}

typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif

static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}

static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'h': case 'i': case 'l': case 'q': return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q': return 'U';
    case 'f': case 'd': case 'g': return (is_complex ? 'C' : 'R');
    case 'O': return 'O';
    case 'P': return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}

static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}

static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset;
  if (ctx->enc_type == 0) return 0;
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;

    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
    }

    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        /* special case -- treat as struct rather than complex number */
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }

      __Pyx_BufFmt_RaiseExpected(ctx);
      return -1;
    }

    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %"PY_FORMAT_SIZE_T"d but %"PY_FORMAT_SIZE_T"d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }

    ctx->fmt_offset += size;

    --ctx->enc_count; /* Consume from buffer string */

    /* Done checking, move to next field, pushing or popping struct stack if needed */
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break; /* breaks both loops as ctx->enc_count == 0 */
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue; /* empty struct */
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}

static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case 10:
      case 13:
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T': /* substruct */
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
        }
        break;
      case '}': /* end of substruct; either repeat or move on */
        ++ts;
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }        /* fall through */
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          /* Continue pooling same type */
          ctx->enc_count += ctx->new_count;
        } else {
          /* New type */
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_count = ctx->new_count;
          ctx->enc_packmode = ctx->new_packmode;
          ctx->enc_type = *ts;
          ctx->is_complex = got_Z;
        }
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ParseNumber(&ts);
          if (number == -1) { /* First char was not a digit */
            PyErr_Format(PyExc_ValueError,
                         "Does not understand character buffer dtype format string ('%c')", *ts);
            return NULL;
          }
          ctx->new_count = (size_t)number; 
        }
    }
  }
}

static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}

static CYTHON_INLINE int __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj, __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack) {
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%"PY_FORMAT_SIZE_T"d byte%s) does not match size of '%s' (%"PY_FORMAT_SIZE_T"d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}

static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
    if (unlikely(tstate->curexc_type))
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
        goto bad;
    #endif
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
    Py_INCREF(local_type);
    Py_INCREF(local_value);
    Py_INCREF(local_tb);
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    /* Make sure tstate is in a consistent state when we XDECREF
       these objects (XDECREF may run arbitrary code). */
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}


static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %"PY_FORMAT_SIZE_T"d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %"PY_FORMAT_SIZE_T"d)", expected);
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else if (PyErr_Occurred()) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, long level) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        PyObject *py_level = PyInt_FromLong(level);
        if (!py_level)
            goto bad;
        module = PyObject_CallFunctionObjArgs(py_import,
            name, global_dict, empty_dict, list, py_level, NULL);
        Py_DECREF(py_level);
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}

static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
  #if PY_VERSION_HEX >= 0x02060000
  if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
  #endif
  if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pf_5numpy_7ndarray___getbuffer__(obj, view, flags);
  else {
  PyErr_Format(PyExc_TypeError, "'%100s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
  return -1;
    }
}

static void __Pyx_ReleaseBuffer(Py_buffer *view) {
  PyObject* obj = view->obj;
  if (obj) {
    #if PY_VERSION_HEX >= 0x02060000
    if (PyObject_CheckBuffer(obj)) {PyBuffer_Release(view); return;}
    #endif
    if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pf_5numpy_7ndarray_1__releasebuffer__(obj, view);
    Py_DECREF(obj);
    view->obj = NULL;
  }
}

#endif

#if PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}

static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    PyObject* v;
    int i;

    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                return -1;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            return -1;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0 &&
                isspace(Py_CHARMASK(s[len-1])) &&
                s[len-1] != ' ')
                    PyFile_SoftSpace(f, 0);
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            return -1;
        PyFile_SoftSpace(f, 0);
    }
    return 0;
}

#else /* Python 3 has a print function */

static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItemString(kwargs, "file", stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItemString(kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}

#endif

#if PY_MAJOR_VERSION < 3

static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            return -1;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        return -1;
    if (PyFile_WriteString("\n", f) < 0)
        return -1;
    return 0;
    /* the line below is just to avoid compiler
     * compiler warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}

#else /* Python 3 has a print function */

static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_New(1);
    if (unlikely(!arg_tuple))
        return -1;
    Py_INCREF(o);
    PyTuple_SET_ITEM(arg_tuple, 0, o);
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}

#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;

    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];

    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(class_name);
    #else
    py_name = PyUnicode_FromString(class_name);
    #endif
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (!strict && ((PyTypeObject *)result)->tp_basicsize > (Py_ssize_t)size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if (((PyTypeObject *)result)->tp_basicsize != (Py_ssize_t)size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;

    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(name);
    #else
    py_name = PyUnicode_FromString(name);
    #endif
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyMapping_GetItemString(dict, (char *)"__pyx_vtable__");
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;

    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%s does not export expected C function %s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %s.%s has wrong signature (expected %s, got %s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
