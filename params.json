{"name":"CyLP","tagline":"A Python interface to CLP, CBC, and CGL to solve LPs and MIPs.","body":"What is CyLP?\r\n==============\r\nCyLP is an interface to COIN-OR’s Linear and mixed-integer program solvers\r\n(CLP, CBC, and CGL). CyLP’s unique feature is that you can use it to alter the\r\nsolution process of the solvers from within Python. For example, you may\r\ndefine cut generators, branch-and-bound strategies, and primal/dual Simplex\r\npivot rules completely in Python.\r\n\r\nYou may read your LP from an mps file or use the CyLP’s easy modeling\r\nfacility. Please find examples in the documentation: http://mpy.github.io/CyLPdoc/.\r\n\r\nInstallation\r\n============\r\n\r\nSTEP 1:\r\n    Install CoinMP. You can get the source at\r\n    http://www.coin-or.org/download/source/CoinMP/. CyLP can be compiled against\r\n    CoinMP-1.6.0. To compile CyLP you will need a LAPACK\r\n    implementation and BZIP2 installed. If you are on a MAC or a linux\r\n    system you might already have both.\r\n    To compile CoinMP's source you may need to pass 'g95' to configure:\r\n\r\n        $ ./configure F77=/path/to/g95\r\n        $ make\r\n        $ make install\r\n\r\nSTEP 2:\r\n    Create an environment variable called COIN_INSTALL_DIR pointing to your\r\n    installation of Coin. For example:\r\n\r\n        $ export COIN_INSTALL_DIR=/Users/mehdi/CoinMP-1.6.0\r\n\r\nYou may also add this line to your ~/.bash_rc or ~/.profile to make\r\nit persistent.\r\n\r\nSTEP 3:\r\n    Install CyLP. Go to CyLP's root directory and run:\r\n\r\n        $ python setup.py install\r\n\r\nSTEP 4 (LINUX):\r\n     In linux you might also need to add COIN's lib directory to\r\n     LD_LIBRARY_PATH as follows:\r\n\r\n        $ export LD_LIBRARY_PATH=/path/to/CoinMP-1.6.0/lib:$LD_LIBRARY_PATH\"\r\n\r\nOptional step:\r\n    If you want to run the doctests (i.e. ``make doctest`` in the ``doc`` directory)\r\n    you should also define:\r\n\r\n        $ export CYLP_SOURCE_DIR=/Path/to/CyLP\r\n\r\nNow you can use CyLP in your python code. For example:\r\n\r\n    >>> from CyLP.cy import CyClpSimplex\r\n    >>> s = CyClpSimplex()\r\n    >>> s.readMps('../input/netlib/adlittle.mps')\r\n    0\r\n    >>> s.initialSolve()\r\n    'optimal'\r\n    >>> round(s.objectiveValue, 3)\r\n    225494.963\r\n\r\nOr simply go to CyLP and run:\r\n\r\n    $ python -m unittest discover\r\n\r\nto run all CyLP unit tests.\r\n\r\n\r\n\r\nModeling Example\r\n==================\r\n\r\nHere is an example of how to model with CyLP's modeling facility:\r\n\r\n    >>> import numpy as np\r\n    >>> from CyLP.cy import CyClpSimplex\r\n    >>> from CyLP.py.modeling.CyLPModel import CyLPArray\r\n    >>>\r\n    >>> s = CyClpSimplex()\r\n    >>>\r\n    >>> # Add variables\r\n    >>> x = s.addVariable('x', 3)\r\n    >>> y = s.addVariable('y', 2)\r\n    >>>\r\n    >>> # Create coefficients and bounds\r\n    >>> A = np.matrix([[1., 2., 0],[1., 0, 1.]])\r\n    >>> B = np.matrix([[1., 0, 0], [0, 0, 1.]])\r\n    >>> D = np.matrix([[1., 2.],[0, 1]])\r\n    >>> a = CyLPArray([5, 2.5])\r\n    >>> b = CyLPArray([4.2, 3])\r\n    >>> x_u= CyLPArray([2., 3.5])\r\n    >>>\r\n    >>> # Add constraints\r\n    >>> s += A * x <= a\r\n    >>> s += 2 <= B * x + D * y <= b\r\n    >>> s += y >= 0\r\n    >>> s += 1.1 <= x[1:3] <= x_u\r\n    >>>\r\n    >>> # Set the objective function\r\n    >>> c = CyLPArray([1., -2., 3.])\r\n    >>> s.objective = c * x + 2 * y.sum()\r\n    >>>\r\n    >>> # Solve using primal Simplex\r\n    >>> s.primal()\r\n    >>> print s.primalVariableSolution['x']\r\n\r\n\r\n\r\nDocumentation\r\n===============\r\nYou may access CyLP's documentation:\r\n\r\n1. _Online_ : Please visit [http://mpy.github.io/CyLPdoc/](http://mpy.github.io/CyLPdoc/)\r\n\r\n2. _Offline_ : To install CyLP's documentation in your repository, you need Sphinx (http://sphinx.pocoo.org/). You can generate the documentation by going to CyLP/doc and run ``make html`` or ``make latex`` and access the documentation under CyLP/doc/build. You can also run ``make doctest`` to perform all the doctest.\r\n","google":"UA-43999736-1","note":"Don't delete this file! It's used internally to help with page regeneration."}